export class FunctionSegments {
	public static deserialize( node : Node) : CompileResult<JavaFunctionSegment> {return Deserializers.orError( "function-segment", node, Lists.of( Deserializers.wrap( JavaDeserializers.deserializeWhitespace), Deserializers.wrap( JavaDeserializers.deserializeFunctionStatement), Deserializers.wrap( JavaDeserializers.deserializeBlock), Deserializers.wrap( JavaDeserializers.deserializeReturn), Deserializers.wrap( JavaDeserializers.deserializeCase)));;}
	public static initFunctionSegmentRule( functionSegmentRule : LazyRule,  value : Rule,  definition : Rule) : Rule { let functionSegmentValueRule : var=FunctionSegmentValues.createFunctionSegmentValueRule( value, definition); let rule : Rule=new OrRule( Lists.of( new TypeRule( "whitespace", new StripRule( new ExactRule( ";"))), JavaRules.createTypedWhitespaceRule( ), JavaRules.createStatementRule( functionSegmentValueRule), JavaRules.createBlockRule( functionSegmentRule, value, definition), JavaRules.createReturnRule( value), JavaRules.createCaseRule( value, functionSegmentRule)));return functionSegmentRule.set( new StripRule( "before", rule, ""));;}
}
