export class StructureMembers {
	public static deserialize( node : Node) : CompileResult<JavaStructureMember> {return Deserializers.orError( "structure-members", node, Lists.of( Deserializers.wrap( JavaDeserializers.deserializeWhitespace), Deserializers.wrap( JavaMethod.deserialize), Deserializers.wrap( JavaStructureStatement.deserialize), Deserializers.wrap( JavaEnumValues.deserialize), Deserializers.wrap( new JavaLang.JavaStructureNodeDeserializer( JavaLang.JavaStructureType.Class)), Deserializers.wrap( new JavaLang.JavaStructureNodeDeserializer( JavaLang.JavaStructureType.Interface)), Deserializers.wrap( new JavaLang.JavaStructureNodeDeserializer( JavaLang.JavaStructureType.Record)), Deserializers.wrap( new JavaLang.JavaStructureNodeDeserializer( JavaLang.JavaStructureType.Enum))));;}
	public static createClassMemberRule() : Rule { let classMemberRule : LazyRule=new MutableLazyRule( ); let functionSegmentRule : LazyRule=new MutableLazyRule( ); let valueLazy : LazyRule=new MutableLazyRule( ); let value : var=JavaRules.initValueRule( functionSegmentRule, valueLazy, "->", JavaRules.createDefinitionRule( )); let functionSegment : var=FunctionSegments.initFunctionSegmentRule( functionSegmentRule, value, JavaRules.createDefinitionRule( ));return classMemberRule.set( new OrRule( Lists.of( JavaRules.createTypedWhitespaceRule( ), JavaStructureStatement.createStructureStatementRule( new TypeRule( "definition", JavaRules.createDefinitionRule( )), value), JavaMethod.createMethodRule( functionSegment), JavaEnumValues.createEnumValuesRule( value), JavaRules.createStructureRule( "record", classMemberRule), JavaRules.createStructureRule( "interface", classMemberRule), JavaRules.createStructureRule( "class", classMemberRule), JavaRules.createStructureRule( "enum", classMemberRule))));;}
}
