export class MergeDiagram {
	private static findParentDependencies( child : String,  childToParents : Map<String, List<String>>,  dependencyMap : Map<String, List<String>>) : List<String> {return childToParents.getOrDefault( child, Lists.empty( )).iter( ).map( 0).flatMap( List.iter).collect( new ListCollector<>( ));;}
	private static findChildrenWithDependencies( rootSegments : NodeList) : Map<String, List<String>> {return rootSegments.iter( ).fold( Maps.empty( ), 0);;}
	private static findChildrenWithInheritedTypes( rootSegments : NodeList) : Map<String, List<String>> {return rootSegments.iter( ).fold( Maps.empty( ), 0);;}
	private static createInitial() : MapUnitSet<Node> {return new MapUnitSet<>( );;}
	public afterAll( roots : UnitSet<Node>) : UnitSet<Node> { let oldRootSegments : NodeList=new InlineNodeList( roots.iterValues( ).map( 0).flatMap( Iters.fromOption).flatMap( NodeList.iter).collect( new ListCollector<>( ))); let childrenWithInheritedTypes : var=MergeDiagram.findChildrenWithInheritedTypes( oldRootSegments); let childrenWithDependencies : var=MergeDiagram.findChildrenWithDependencies( oldRootSegments); let newDependencies : var=childrenWithDependencies.iter( ).fold( InlineNodeList.empty( ), 0); let withoutDependencies : NodeList=new InlineNodeList( oldRootSegments.iter( ).filter( 0).collect( new ListCollector<>( ))); let copy : var=InlineNodeList.empty( ).add( new MapNode( "start")).addAll( withoutDependencies).addAll( newDependencies).add( new MapNode( "end")); let node : Node=new MapNode( ); let root : var=node.withNodeList( "children", copy); let location : var=new Location( Lists.empty( ), "diagram");return MergeDiagram.createInitial( ).add( new SimpleUnit<>( location, root));;}
}
