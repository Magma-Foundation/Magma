import { None } from "../../../../magmac/api/None";
import { Option } from "../../../../magmac/api/Option";
import { Some } from "../../../../magmac/api/Some";
import { Tuple2 } from "../../../../magmac/api/Tuple2";
import { List } from "../../../../magmac/api/collect/list/List";
import { Map } from "../../../../magmac/api/collect/map/Map";
import { Maps } from "../../../../magmac/api/collect/map/Maps";
import { Iter } from "../../../../magmac/api/iter/Iter";
import { Iters } from "../../../../magmac/api/iter/Iters";
import { Joiner } from "../../../../magmac/api/iter/collect/Joiner";
import { Ok } from "../../../../magmac/api/result/Ok";
import { CompileResult } from "../../../../magmac/app/compile/error/CompileResult";
import { CompileResults } from "../../../../magmac/app/compile/error/CompileResults";
import { CompileErrors } from "../../../../magmac/app/compile/error/error/CompileErrors";
import { BiFunction } from "../../../../java/util/function/BiFunction";
import { Function } from "../../../../java/util/function/Function";
export class MapNode {
	MapNode : public;
	MapNode : private;
	MapNode : public;
	fold : Node;
	formatNodeList : String;
	createIndent : String;
	formatEntry : String;
	toStream : Iter<String>;
	withNodeAndSerializer : Node;
	iterNodes : Iter<Tuple2<String, Node>>;
	display : String;
	format : String;
	withString : Node;
	findString : Option<String>;
	strings : Map<String, String>;
	is : boolean;
	retype : Node;
	withNode : Node;
	findNode : Option<Node>;
	merge : Node;
	iterStrings : Iter<Tuple2<String, String>>;
	hasNodeList : boolean;
	removeNodeListOrError : CompileResult<Tuple2<Node, NodeList>>;
	removeNodeList : Option<Tuple2<Node, NodeList>>;
	withNodeLists : Node;
	isEmpty : boolean;
	withNodeListAndSerializer : Node;
	removeString : CompileResult<Tuple2<Node, String>>;
	removeNode : CompileResult<Tuple2<Node, Node>>;
	createNotPresent : CompileResult<Tuple2<Node, T>>;
	withNodes : Node;
	withStrings : Node;
	iterNodeLists : Iter<Tuple2<String, NodeList>>;
	withNodeList : Node;
	toString : String;
	findNodeList : Option<NodeList>;
	findNodeOrError : CompileResult<Node>;
	findNodeListOrError : CompileResult<NodeList>;
}
