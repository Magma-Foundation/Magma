import { List } from "../../../magma/api/collect/list/List";
import { Location } from "../../../magma/app/io/Location";
import { Definition } from "../../../magma/app/compile/define/Definition";
import { Type } from "../../../magma/api/Type";
import { Option } from "../../../magma/api/option/Option";
import { Source } from "../../../magma/app/io/Source";
import { Platform } from "../../../magma/app/io/Platform";
import { Import } from "../../../magma/app/compile/Import";
export interface CompileState {
	isLastWithin(name: string): boolean;
	addResolvedImport(oldParent: List<string>, child: string): CompileState;
	withLocation(namespace: Location): CompileState;
	append(element: string): CompileState;
	pushStructureName(name: string): CompileState;
	enterDepth(): CompileState;
	exitDepth(): CompileState;
	defineAll(definitions: List<Definition>): CompileState;
	resolve(name: string): Option<Type>;
	clearImports(): CompileState;
	clearOutput(): CompileState;
	addSource(source: Source): CompileState;
	findSource(name: string): Option<Source>;
	addResolvedImportFromCache(base: string): CompileState;
	popStructureName(): CompileState;
	mapLocation(mapper: (arg0 : Location) => Location): CompileState;
	withPlatform(platform: Platform): CompileState;
	imports(): List<Import>;
	output(): string;
	structureNames(): List<string>;
	depth(): number;
	definitions(): List<Definition>;
	maybeLocation(): Option<Location>;
	sources(): List<Source>;
	platform(): Platform;
}
