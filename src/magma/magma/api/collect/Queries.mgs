import magma.api.collect.Query;
import magma.api.option.Option;
import magma.api.collect.head.HeadedQuery;
import magma.api.collect.head.EmptyHead;
import magma.api.collect.head.Head;
import magma.api.collect.head.SingleHead;
export struct Queries {
	def static fromOption<T>(option: Option<T>): Query<T> {
		return HeadedQuery<T>(option.map((mut element: T) => Queries.getTSingleHead(element)).orElseGet(() => EmptyHead<T>()));
	}
	def static getTSingleHead<T>(element: T): Head<T> {
		return SingleHead<T>(element);
	}
	def static fromArray<T>(elements: T[]): Query<T> {
		/*return new HeadedQuery<Integer>(new RangeHead(elements.length)).map((Integer index) -> elements[index])*/;
	}
}
