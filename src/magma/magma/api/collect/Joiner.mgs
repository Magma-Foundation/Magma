import magma.api.option.Option;
import magma.api.collect.Collector;
import magma.api.collect.list.List;
import magma.api.option.None;
import magma.api.option.Some;
export struct Joiner implements Collector<&[I8], Option<&[I8]>> {
	mut delimiter: &[I8];
	constructor (mut delimiter: &[I8]) {
		this.delimiter = delimiter;
	}
	static def empty(): Joiner {
		return Joiner("");
	}
	static def joinOrEmpty(items: List<&[I8]>, delimiter: &[I8], prefix: &[I8], suffix: &[I8]): &[I8] {
		return items/*auto*/.query(/*auto*/).collect(Joiner(delimiter/*auto*/)).map((mut inner: &[I8]) => prefix/*auto*/ + inner/*auto*/ + suffix/*auto*/).orElse("");
	}
	def createInitial(): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
	def fold(maybe: Option<&[I8]>, element: &[I8]): Option<&[I8]> {
		return Some<&[I8]>(maybe/*auto*/.map((mut inner: &[I8]) => inner/*auto*/ + this/*auto*/.delimiter + element/*auto*/).orElse(element/*auto*/));
	}
}
