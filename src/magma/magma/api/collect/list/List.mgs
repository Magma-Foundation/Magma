/*[
	JVMList: jvm.api.collect.list, 
	Lists: jvm.api.collect.list, 
	Console: jvm.api.io, 
	Files: jvm.api.io, 
	JVMPath: jvm.api.io, 
	Characters: jvm.api.text, 
	Strings: jvm.api.text, 
	Actual: magma.annotate, 
	Namespace: magma.annotate, 
	Collector: magma.api.collect, 
	EmptyHead: magma.api.collect.head, 
	FlatMapHead: magma.api.collect.head, 
	Head: magma.api.collect.head, 
	HeadedQuery: magma.api.collect.head, 
	MapHead: magma.api.collect.head, 
	RangeHead: magma.api.collect.head, 
	SingleHead: magma.api.collect.head, 
	ZipHead: magma.api.collect.head, 
	List: magma.api.collect.list, 
	ListCollector: magma.api.collect.list, 
	Queries: magma.api.collect, 
	Query: magma.api.collect, 
	IOError: magma.api.io, 
	Path: magma.api.io, 
	None: magma.api.option, 
	Option: magma.api.option, 
	Some: magma.api.option, 
	Err: magma.api.result, 
	Ok: magma.api.result, 
	Result: magma.api.result, 
	Tuple2: magma.api, 
	Tuple2Impl: magma.api, 
	Main: magma.app
]*/
import magma.api.collect.Query;
import magma.api.option.Option;
import magma.api.Tuple2;
export struct List<T> {
	def addLast(element: T): List<T>;
	def query(): Query<T>;
	def size(): I32;
	def subList(startInclusive: I32, endExclusive: I32): Option<List<T>>;
	def findLast(): Option<T>;
	def findFirst(): Option<T>;
	def find(index: I32): Option<T>;
	def queryWithIndices(): Query<Tuple2<I32, T>>;
	def addAll(others: List<T>): List<T>;
	def contains(element: T, equator: (arg0 : T, arg1 : T) => Bool): Bool;
	def queryReversed(): Query<T>;
	def addFirst(element: T): List<T>;
	def isEmpty(): Bool;
	def equalsTo(other: List<T>, equator: (arg0 : T, arg1 : T) => Bool): Bool;
	def removeValue(element: T, equator: (arg0 : T, arg1 : T) => Bool): List<T>;
	def removeLast(): Option<List<T>>;
}
