// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query]
import magma.api.collect.{ Collector };
import magma.api.option.{ Option };
import magma.api.{ Tuple2 };
export struct Query<T> {
	def collect<C>(mut collector: Collector<T, C>): C;
	def map<R>(mut mapper: (arg0 : T) => R): Query<R>;
	def foldWithInitial<R>(mut initial: R, mut folder: (arg0 : R, arg1 : T) => R): R;
	def foldWithMapper<R>(mut mapper: (arg0 : T) => R, mut folder: (arg0 : R, arg1 : T) => R): Option<R>;
	def flatMap<R>(mut mapper: (arg0 : T) => Query<R>): Query<R>;
	def next(): Option<T>;
	def allMatch(mut predicate: (arg0 : T) => boolean): Bool;
	def filter(mut predicate: (arg0 : T) => boolean): Query<T>;
	def anyMatch(mut predicate: (arg0 : T) => boolean): Bool;
	def zip<R>(mut other: Query<R>): Query<Tuple2<T, R>>;
}
