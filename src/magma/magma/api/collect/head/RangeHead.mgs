// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType, VariadicType, AccessNode, Argument, Caller, ConstructionCaller, ConstructorHeader, InvokableNode, LambdaNode, NotNode, OperationNode, StringNode, SymbolNode, Value, Location, Platform, Source, Main, Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead]
import magma.api.collect.head.{ Head };
import magma.api.option.{ Option, None, Some };
export struct RangeHead implements Head<I32> {
	length: I32;
	mut counter: I32;
	constructor (length: I32) {
		this/*auto*/.length = length/*I32*/;
		this/*auto*/.counter = 0/*auto*/;
	}
	def next(): Option<I32> {
		if (this/*auto*/.counter >= this/*auto*/.length) {
			return None<I32>(/*auto*/);
		}
		let value = this/*auto*/.counter;
		this/*auto*/.counter++;
		return Some<I32>(value/*string*/);
	}
}
