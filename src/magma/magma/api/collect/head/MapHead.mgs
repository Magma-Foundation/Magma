// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType, VariadicType, AccessNode, Argument, Caller, ConstructionCaller, ConstructorHeader, InvokableNode, LambdaNode, NotNode, OperationNode, StringNode, SymbolNode, Value, Location, Platform, Source, Main, Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead]
import magma.api.collect.head.{ Head };
import magma.api.option.{ Option };
export struct MapHead<T, R> implements Head<R> {
	mut head: Head<T>;
	mut mapper: (arg0 : T) => R;
	constructor (mut head: Head<T>, mut mapper: (arg0 : T) => R) {
		this.head = head;
		this.mapper = mapper;
	}
	def next(): Option<R> {
		return this/*auto*/.head.next(/*auto*/).map(this/*auto*/.mapper);
	}
}
