/*[
	JVMList: jvm.api.collect.list, 
	Lists: jvm.api.collect.list, 
	Console: jvm.api.io, 
	Files: jvm.api.io, 
	JVMPath: jvm.api.io, 
	Characters: jvm.api.text, 
	Strings: jvm.api.text, 
	Actual: magma.annotate, 
	Namespace: magma.annotate, 
	Collector: magma.api.collect, 
	EmptyHead: magma.api.collect.head, 
	FlatMapHead: magma.api.collect.head, 
	Head: magma.api.collect.head, 
	HeadedQuery: magma.api.collect.head, 
	MapHead: magma.api.collect.head, 
	RangeHead: magma.api.collect.head, 
	SingleHead: magma.api.collect.head, 
	ZipHead: magma.api.collect.head, 
	List: magma.api.collect.list, 
	ListCollector: magma.api.collect.list, 
	Queries: magma.api.collect, 
	Query: magma.api.collect, 
	IOError: magma.api.io, 
	Path: magma.api.io, 
	None: magma.api.option, 
	Option: magma.api.option, 
	Some: magma.api.option, 
	Err: magma.api.result, 
	Ok: magma.api.result, 
	Result: magma.api.result, 
	Tuple2: magma.api, 
	Tuple2Impl: magma.api, 
	Main: magma.app
]*/
import magma.api.collect.Query;
import magma.api.collect.head.Head;
import magma.api.option.Option;
import magma.api.collect.Collector;
import magma.api.collect.head.MapHead;
import magma.api.Tuple2;
import magma.api.collect.head.FlatMapHead;
import magma.api.collect.head.EmptyHead;
import magma.api.collect.head.ZipHead;
import magma.api.collect.head.SingleHead;
export struct HeadedQuery<T> implements Query<T> {
	mut head: Head<T>;
	constructor (mut head: Head<T>) {
		this.head = head;
	}
	def next(): Option<T> {
		return this.head.next();
	}
	def collect<C>(collector: Collector<T, C>): C {
		return this.foldWithInitial(collector.createInitial(), (mut current: C, mut element: T) => collector.fold(current, element));
	}
	def map<R>(mapper: (arg0 : T) => R): Query<R> {
		return HeadedQuery<R>(MapHead<T, R>(this.head, mapper));
	}
	def foldWithInitial<R>(initial: R, folder: (arg0 : R, arg1 : T) => R): R {
		let mut result: R = initial;
		while (true) {
			let finalResult: R = result;
			let maybeNext: Tuple2<Bool, R> = this.head.next().map((mut inner: T) => folder(finalResult, inner)).toTuple(finalResult);
			if (maybeNext.left()) {
				result = maybeNext.right();
			}
			else {
				return result;
			}
		}
	}
	def foldWithMapper<R>(next: (arg0 : T) => R, folder: (arg0 : R, arg1 : T) => R): Option<R> {
		return this.head.next().map(next).map((maybeNext: R) => this.foldWithInitial(maybeNext, folder));
	}
	def flatMap<R>(mapper: (arg0 : T) => Query<R>): Query<R> {
		return this.head.next().map(mapper).map((mut initial: Query<R>) => HeadedQuery<R>(FlatMapHead<T, R>(this.head, initial, mapper))).orElseGet(() => HeadedQuery<R>(EmptyHead<R>()));
	}
	def allMatch(predicate: (arg0 : T) => boolean): Bool {
		return this.foldWithInitial(true, (mut maybeAllTrue: Bool, mut element: T) => maybeAllTrue && predicate(element));
	}
	def anyMatch(predicate: (arg0 : T) => boolean): Bool {
		return this.foldWithInitial(false, (mut aBoolean: Bool, mut t: T) => aBoolean || predicate(t));
	}
	def zip<R>(other: Query<R>): Query<Tuple2<T, R>> {
		return HeadedQuery<Tuple2<T, R>>(ZipHead<T, R>(this.head, other));
	}
	def filter(predicate: (arg0 : T) => boolean): Query<T> {
		return this.flatMap((element: T) => {
			if (predicate(element)) {
				return HeadedQuery<T>(SingleHead<T>(element));
			}
			else {
				return HeadedQuery<T>(EmptyHead<T>());
			}
		});
	}
}
