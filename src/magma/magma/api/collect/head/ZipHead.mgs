// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead]
import magma.api.{ Tuple2 };
import magma.api.collect.head.{ Head };
import magma.api.collect.{ Query };
import magma.api.option.{ Option };
export struct ZipHead<T, R> implements Head<Tuple2<T, R>> {
	mut head: Head<T>;
	mut other: Query<R>;
	constructor (mut head: Head<T>, mut other: Query<R>) {
		this.head = head;
		this.other = other;
	}
	def next(): Option<Tuple2<T, R>> {
		return this/*auto*/.head.next(/*auto*/).and(() => this/*auto*/.other.next(/*auto*/));
	}
}
