// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path]
import magma.api.io.{ IOError };
import magma.api.option.{ Option };
import magma.api.result.{ Result };
import magma.api.collect.list.{ List };
import magma.api.collect.{ Query };
export struct Path {
	def asString(): &[I8];
	def writeString(mut output: &[I8]): Option<IOError>;
	def readString(): Result<&[I8], IOError>;
	def walk(): Result<List<Path>, IOError>;
	def findFileName(): &[I8];
	def endsWith(mut suffix: &[I8]): Bool;
	def relativize(mut source: Path): Path;
	def getParent(): Path;
	def query(): Query<&[I8]>;
	def resolveChildSegments(mut children: List<&[I8]>): Path;
	def resolveChild(mut name: &[I8]): Path;
	def exists(): Bool;
	def createDirectories(): Option<IOError>;
}
