// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType, VariadicType, AccessNode, Argument, Caller, ConstructionCaller, ConstructorHeader, InvokableNode, LambdaNode, NotNode, OperationNode, StringNode, SymbolNode, Value, Location, Platform, Source, Main, Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option]
import magma.api.{ Tuple2 };
export struct Option<T> {
	def map<R>(mut mapper: (arg0 : T) => R): Option<R>;
	def orElse(mut other: T): T;
	def orElseGet(mut supplier: () => T): T;
	def isPresent(): Bool;
	def ifPresent(mut consumer: (arg0 : T) => void): void;
	def or(mut other: () => Option<T>): Option<T>;
	def flatMap<R>(mut mapper: (arg0 : T) => Option<R>): Option<R>;
	def filter(mut predicate: (arg0 : T) => boolean): Option<T>;
	def toTuple(mut other: T): Tuple2<Bool, T>;
	def and<R>(mut other: () => Option<R>): Option<Tuple2<T, R>>;
}
