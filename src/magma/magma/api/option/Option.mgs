// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path, Path, None, None, None, Option, Option]
import magma.api.{ Tuple2 };
export struct Option<T> {
	def map<R>(mut mapper: (arg0 : T) => R): Option<R>;
	def orElse(mut other: T): T;
	def orElseGet(mut supplier: () => T): T;
	def isPresent(): Bool;
	def ifPresent(mut consumer: (arg0 : T) => void): void;
	def or(mut other: () => Option<T>): Option<T>;
	def flatMap<R>(mut mapper: (arg0 : T) => Option<R>): Option<R>;
	def filter(mut predicate: (arg0 : T) => boolean): Option<T>;
	def toTuple(mut other: T): Tuple2<Bool, T>;
	def and<R>(mut other: () => Option<R>): Option<Tuple2<T, R>>;
}
