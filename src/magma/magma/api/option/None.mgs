// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType, VariadicType, AccessNode, Argument, Caller, ConstructionCaller, ConstructorHeader, InvokableNode, LambdaNode, NotNode, OperationNode, StringNode, SymbolNode, Value, Location, Platform, Source, Main, Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None]
import magma.api.option.{ Option };
import magma.api.{ Tuple2, Tuple2Impl };
export struct None<T> implements Option<T> {
	def map<R>(mapper: (arg0 : T) => R): Option<R> {
		return None<R>(/*auto*/);
	}
	def orElse(other: T): T {
		return other/*T*/;
	}
	def orElseGet(supplier: () => T): T {
		return supplier/*() => T*/(/*auto*/);
	}
	def isPresent(): Bool {
		return false/*auto*/;
	}
	def ifPresent(consumer: (arg0 : T) => void): void {
	}
	def or(other: () => Option<T>): Option<T> {
		return other/*() => Option<T>*/(/*auto*/);
	}
	def flatMap<R>(mapper: (arg0 : T) => Option<R>): Option<R> {
		return None<R>(/*auto*/);
	}
	def filter(predicate: (arg0 : T) => boolean): Option<T> {
		return None<T>(/*auto*/);
	}
	def toTuple(other: T): Tuple2<Bool, T> {
		return Tuple2Impl<Bool, T>(false/*auto*/, other/*T*/);
	}
	def and<R>(other: () => Option<R>): Option<Tuple2<T, R>> {
		return None<Tuple2<T, R>>(/*auto*/);
	}
}
