import magma.api.io.Path;
import magma.api.io.IOError;
import magma.api.result.Result;
import magma.api.collect.list.List;
import magma.api.collect.list.ListCollector;
import magma.app.io.Location;
export struct Source {
	mut sourceDirectory: Path;
	mut source: Path;
	constructor (mut sourceDirectory: Path, mut source: Path) {
		this.sourceDirectory = sourceDirectory;
		this.source = source;
	}
	def read(): Result<&[I8], IOError> {
		return this.source.readString();
	}
	def computeName(): &[I8] {
		let fileName: &[I8] = this.source.findFileName();
		let separator: I32 = fileName.lastIndexOf(".");
		return fileName.substring(0, separator);
	}
	def computeNamespace(): List<&[I8]> {
		return this.sourceDirectory.relativize(this.source).getParent().query().collect(ListCollector<&[I8]>());
	}
	def computeLocation(): Location {
		return Location(this.computeNamespace(), this.computeName());
	}
}
