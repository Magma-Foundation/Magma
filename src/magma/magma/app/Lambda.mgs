import magma.app.Value;
import magma.app.Definition;
import magma.api.collect.list.List;
import magma.api.collect.Joiner;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.option.None;
import magma.api.Type;
import magma.app.compile.CompileState;
import magma.app.Primitive;
struct Lambda implements Value {
	mut paramNames: List<Definition>;
	mut content: &[I8];
	constructor (mut paramNames: List<Definition>, mut content: &[I8]) {
		this.paramNames = paramNames;
		this.content = content;
	}
	def generate(): &[I8] {
		let joinedParamNames = this.paramNames.query().map((mut definition: Definition) => definition.generate()).collect(Joiner(", ")).orElse("");
		return "(" + joinedParamNames + ")" + " => " + this.content;
	}
	def toValue(): Option<Value> {
		return Some<Value>(this);
	}
	def findChild(): Option<Value> {
		return None<Value>();
	}
	def resolve(state: CompileState): Type {
		return Primitive.Unknown;
	}
	def generateAsEnumValue(structureName: &[I8]): Option<&[I8]> {
		return None<&[I8]>();
	}
}
