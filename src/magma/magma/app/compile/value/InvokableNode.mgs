import magma.app.compile.value.Value;
import magma.app.compile.value.Caller;
import magma.api.collect.list.List;
import magma.app.io.Platform;
import magma.api.collect.Joiner;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.option.None;
import magma.api.Type;
import magma.app.compile.CompileState;
import magma.app.compile.type.PrimitiveType;
export struct InvokableNode implements Value {
	mut caller: Caller;
	mut args: List<Value>;
	constructor (mut caller: Caller, mut args: List<Value>) {
		this.caller = caller;
		this.args = args;
	}
	def generate(platform: Platform): &[I8] {
		let joinedArguments: &[I8] = this/*auto*/.joinArgs(platform/*auto*/);
		return this/*auto*/.caller.generate(platform/*auto*/) + "(" + joinedArguments/*auto*/ + ")";
	}
	def joinArgs(platform: Platform): &[I8] {
		return this/*auto*/.args.query(/*auto*/).map((mut value: Value) => value/*auto*/.generate(platform/*auto*/)).collect(Joiner(", ")).orElse("");
	}
	def toValue(): Option<Value> {
		return Some<Value>(this/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def resolve(state: CompileState): Type {
		return PrimitiveType/*auto*/.Auto;
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return Some<&[I8]>("\n\tstatic " + this/*auto*/.caller.generate(platform/*auto*/) + ": " + structureName/*auto*/ + " = new " + structureName/*auto*/ + "(" + this/*auto*/.joinArgs(platform/*auto*/) + ");");
	}
}
