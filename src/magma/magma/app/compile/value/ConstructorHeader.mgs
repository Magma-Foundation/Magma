// []
import magma.app.compile.value.{ ConstructorHeader };
import magma.app.compile.define.{ FunctionHeader, Definition };
import magma.app.io.{ Platform };
import magma.api.collect.list.{ List };
import magma.api.collect.{ Joiner };
export struct ConstructorHeader implements FunctionHeader<ConstructorHeader> {
	def generateWithAfterName(mut platform: Platform, afterName: &[I8]): &[I8] {
		return "constructor " + afterName/*&[I8]*/;
	}
	def hasAnnotation(annotation: &[I8]): Bool {
		return false/*auto*/;
	}
	def removeModifier(modifier: &[I8]): ConstructorHeader {
		return this/*auto*/;
	}
	def addModifierLast(modifier: &[I8]): ConstructorHeader {
		return this/*auto*/;
	}
	def generateWithDefinitions0(mut platform: Platform, mut definitions: &[I8]): &[I8] {
		return generateWithAfterName/*auto*/(platform/*Platform*/, "(" + definitions/*&[I8]*/ + ")");
	}
	def generateWithDefinitions(platform: Platform, definitions: List<Definition>): &[I8] {
		let joinedDefinitions = definitions/*List<Definition>*/.query(/*auto*/).map((mut definition: Definition) => definition/*auto*/.generate(platform/*Platform*/)).collect(Joiner(", ")).orElse("");
		return this/*auto*/.generateWithDefinitions0(platform/*Platform*/, joinedDefinitions/*auto*/);
	}
}
