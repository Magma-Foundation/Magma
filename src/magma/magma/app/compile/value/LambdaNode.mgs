import magma.app.compile.value.Value;
import magma.app.compile.define.Definition;
import magma.api.collect.list.List;
import magma.app.io.Platform;
import magma.api.collect.Joiner;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.option.None;
import magma.api.Type;
import magma.app.compile.CompileState;
import magma.app.compile.type.PrimitiveType;
export struct LambdaNode implements Value {
	mut paramNames: List<Definition>;
	mut content: &[I8];
	constructor (mut paramNames: List<Definition>, mut content: &[I8]) {
		this.paramNames = paramNames;
		this.content = content;
	}
	def generate(mut platform: Platform): &[I8] {
		let joinedParamNames: &[I8] = this/*auto*/.paramNames.query(/*auto*/).map((mut definition: Definition) => definition/*auto*/.generate(platform/*auto*/)).collect(Joiner(", ")).orElse("");
		return "(" + joinedParamNames/*auto*/ + ")" + " => " + this/*auto*/.content;
	}
	def toValue(): Option<Value> {
		return Some<Value>(this/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def resolve(state: CompileState): Type {
		return PrimitiveType/*auto*/.Auto;
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
}
