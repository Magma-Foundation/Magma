import magma.app.compile.value.Value;
import magma.app.io.Platform;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.option.None;
import magma.api.Type;
import magma.app.compile.CompileState;
import magma.app.compile.type.PrimitiveType;
export struct NotNode implements Value {
	mut child: &[I8];
	constructor (mut child: &[I8]) {
		this.child = child;
	}
	def generate(mut platform: Platform): &[I8] {
		return this/*auto*/.child;
	}
	def toValue(): Option<Value> {
		return Some<Value>(this/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def resolve(state: CompileState): Type {
		return PrimitiveType/*auto*/.Auto;
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
}
