// []
import magma.api.{ Type };
import magma.app.io.{ Platform };
import magma.app.{ Main };
import magma.app.compile.value.{ Value };
import magma.api.option.{ Option, Some, None };
export struct SymbolNode {
	mut value: &[I8];
	mut type: Type;
	constructor (mut value: &[I8], mut type: Type) {
		this.value = value;
		this.type = type;
	}
	def generate(platform: Platform): &[I8] {
		return this/*auto*/.value + Main/*auto*/.generatePlaceholder(type/*Type*/.generate(/*auto*/));
	}
	def toValue(): Option<Value> {
		return Some<Value>(this/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def generate(): &[I8] {
		return this/*auto*/.value;
	}
	def isFunctional(): Bool {
		return false/*auto*/;
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
}
