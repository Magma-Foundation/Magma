import magma.app.compile.CompileState;
import magma.app.io.Platform;
import magma.app.io.Location;
import magma.api.option.Option;
import magma.app.io.Source;
import magma.api.collect.list.List;
import magma.app.compile.Import;
import magma.app.compile.define.Definition;
import magma.api.option.None;
import jvm.api.collect.list.Lists;
import jvm.api.text.Strings;
import magma.api.option.Some;
import magma.api.Type;
export struct ImmutableCompileState implements CompileState {
	mut platform: Platform;
	mut findCurrentLocation: Option<Location>;
	mut sources: List<Source>;
	mut imports: List<Import>;
	mut structureNames: List<&[I8]>;
	mut structures: &[I8];
	mut functions: &[I8];
	mut definitions: List<Definition>;
	mut depth: I32;
	constructor (mut platform: Platform, mut findCurrentLocation: Option<Location>, mut sources: List<Source>, mut imports: List<Import>, mut structureNames: List<&[I8]>, mut structures: &[I8], mut functions: &[I8], mut definitions: List<Definition>, mut depth: I32) {
		this.platform = platform;
		this.findCurrentLocation = findCurrentLocation;
		this.sources = sources;
		this.imports = imports;
		this.structureNames = structureNames;
		this.structures = structures;
		this.functions = functions;
		this.definitions = definitions;
		this.depth = depth;
	}
	static def createInitial(): CompileState {
		return ImmutableCompileState(Platform.Magma, None<Location>(), Lists.empty(), Lists.empty(), Lists.empty(), "", "", Lists.empty(), 0);
	}
	def hasLastStructureNameOf(name: &[I8]): Bool {
		return this.structureNames.findLast().filter((mut anObject: &[I8]) => Strings.equalsTo(name, anObject)).isPresent();
	}
	def withLocation(namespace: Location): CompileState {
		return ImmutableCompileState(this.platform, Some<Location>(namespace), this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def append(element: &[I8]): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures + element, this.functions, this.definitions, this.depth);
	}
	def pushStructureName(name: &[I8]): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames.addLast(name), this.structures, this.functions, this.definitions, this.depth);
	}
	def enterDepth(): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth + 1);
	}
	def exitDepth(): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth - 1);
	}
	def defineAll(definitions: List<Definition>): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions.addAll(definitions), this.depth);
	}
	def resolve(name: &[I8]): Option<Type> {
		return this.definitions.queryReversed().filter((mut definition: Definition) => Strings.equalsTo(definition.name(), name)).map((mut definition1: Definition) => definition1.type()).next();
	}
	def clearImports(): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, Lists.empty(), this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def clear(): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, "", "", this.definitions, this.depth);
	}
	def addSource(source: Source): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources.addLast(source), this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def addResolvedImportFromCache(base: &[I8]): CompileState {
		if (this.structureNames.query().anyMatch((mut inner: &[I8]) => Strings.equalsTo(inner, base))) {
			return this;
		}
		return this.findSource(base).map((mut source: Source) => this.addResolvedImportWithNamespace(source.computeNamespace(), source.computeName())).orElse(this);
	}
	def popStructureName(): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames.removeLast().orElse(this.structureNames), this.structures, this.functions, this.definitions, this.depth);
	}
	def mapLocation(mapper: (arg0 : Location) => Location): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation.map(mapper), this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def withPlatform(platform: Platform): CompileState {
		return ImmutableCompileState(platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def addFunction(function: &[I8]): CompileState {
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports, this.structureNames, this.structures, this.functions + function, this.definitions, this.depth);
	}
	def join(): &[I8] {
		return this.structures + this.functions;
	}
	def addResolvedImportWithNamespace(oldParent: List<&[I8]>, child: &[I8]): CompileState {
		let namespace: List<&[I8]> = this.findCurrentLocation.map((mut location: Location) => location.namespace()).orElse(Lists.empty());
		List < String > newParent = oldParent;
		if (Platform.TypeScript === this.platform) {
			if (namespace.isEmpty()) {
				newParent = newParent.addFirst(".");
			}
			mut let i: I32 = 0;
			let size: I32 = namespace.size();
			while (i < size) {
				newParent = newParent.addFirst("..");
				i++;
			}
		}
		if (this.imports.query().filter((mut node: Import) => Strings.equalsTo(node.child(), child)).next().isPresent()) {
			return this;
		}
		let importString: Import = Import(newParent, child);
		return ImmutableCompileState(this.platform, this.findCurrentLocation, this.sources, this.imports.addLast(importString), this.structureNames, this.structures, this.functions, this.definitions, this.depth);
	}
	def findSource(name: &[I8]): Option<Source> {
		return this.sources.query().filter((mut source: Source) => Strings.equalsTo(source.computeName(), name)).next();
	}
	def isPlatform(platform: Platform): Bool {
		return platform === this.platform();
	}
	def createIndent(): &[I8] {
		let indent: I32 = this.depth();
		return "\n" + "\t".repeat(indent);
	}
	def findLastStructureName(): Option<&[I8]> {
		return this.structureNames().findLast();
	}
}
