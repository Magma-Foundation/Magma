import magma.app.compile.CompileState;
import magma.app.io.Platform;
import magma.app.io.Location;
import magma.api.option.Option;
import magma.app.io.Source;
import magma.api.collect.list.List;
import magma.app.compile.Import;
import magma.app.compile.define.Definition;
import magma.api.option.None;
import jvm.api.collect.list.Lists;
import jvm.api.text.Strings;
import magma.api.option.Some;
import magma.api.Type;
export struct ImmutableCompileState implements CompileState {
	mut platform: Platform;
	mut findCurrentLocation: Option<Location>;
	mut sources: List<Source>;
	mut imports: List<Import>;
	mut structureNames: List<&[I8]>;
	mut structures: &[I8];
	mut functions: &[I8];
	mut definitions: List<Definition>;
	mut depth: I32;
	constructor (mut platform: Platform, mut findCurrentLocation: Option<Location>, mut sources: List<Source>, mut imports: List<Import>, mut structureNames: List<&[I8]>, mut structures: &[I8], mut functions: &[I8], mut definitions: List<Definition>, mut depth: I32) {
		this.platform = platform;
		this.findCurrentLocation = findCurrentLocation;
		this.sources = sources;
		this.imports = imports;
		this.structureNames = structureNames;
		this.structures = structures;
		this.functions = functions;
		this.definitions = definitions;
		this.depth = depth;
	}
	static def createInitial(): CompileState {
		return ImmutableCompileState(Platform/*auto*/.Magma, None<Location>(/*auto*/), Lists/*auto*/.empty(/*auto*/), Lists/*auto*/.empty(/*auto*/), Lists/*auto*/.empty(/*auto*/), "", "", Lists/*auto*/.empty(/*auto*/), 0/*auto*/);
	}
	def hasLastStructureNameOf(name: &[I8]): Bool {
		return this/*auto*/.structureNames.findLast(/*auto*/).filter((mut anObject: &[I8]) => Strings/*auto*/.equalsTo(name/*auto*/, anObject/*auto*/)).isPresent(/*auto*/);
	}
	def withLocation(namespace: Location): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, Some<Location>(namespace/*auto*/), this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def append(element: &[I8]): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures + element/*auto*/, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def pushStructureName(name: &[I8]): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames.addLast(name/*auto*/), this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def enterDepth(): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth + 1/*auto*/);
	}
	def exitDepth(): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth - 1/*auto*/);
	}
	def defineAll(definitions: List<Definition>): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions.addAll(definitions/*auto*/), this/*auto*/.depth);
	}
	def resolve(name: &[I8]): Option<Type> {
		return this/*auto*/.definitions.queryReversed(/*auto*/).filter((mut definition: Definition) => Strings/*auto*/.equalsTo(definition/*auto*/.name(/*auto*/), name/*auto*/)).map((mut definition1: Definition) => definition1/*auto*/.type(/*auto*/)).next(/*auto*/);
	}
	def clearImports(): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, Lists/*auto*/.empty(/*auto*/), this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def clear(): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, "", "", this/*auto*/.definitions, this/*auto*/.depth);
	}
	def addSource(source: Source): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources.addLast(source/*auto*/), this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def addResolvedImportFromCache(base: &[I8]): CompileState {
		if (this/*auto*/.structureNames.query(/*auto*/).anyMatch((mut inner: &[I8]) => Strings/*auto*/.equalsTo(inner/*auto*/, base/*auto*/))) {
			return this/*auto*/;
		}
		return this/*auto*/.findSource(base/*auto*/).map((mut source: Source) => this/*auto*/.addResolvedImportWithNamespace(source/*auto*/.computeNamespace(/*auto*/), source/*auto*/.computeName(/*auto*/))).orElse(this/*auto*/);
	}
	def popStructureName(): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames.removeLast(/*auto*/).orElse(this/*auto*/.structureNames), this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def mapLocation(mapper: (arg0 : Location) => Location): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation.map(mapper/*auto*/), this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def withPlatform(platform: Platform): CompileState {
		return ImmutableCompileState(platform/*auto*/, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def addFunction(function: &[I8]): CompileState {
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports, this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions + function/*auto*/, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def join(): &[I8] {
		return this/*auto*/.structures + this/*auto*/.functions;
	}
	def addResolvedImportWithNamespace(oldParent: List<&[I8]>, child: &[I8]): CompileState {
		let namespace: List<&[I8]> = this/*auto*/.findCurrentLocation.map((mut location: Location) => location/*auto*/.namespace(/*auto*/)).orElse(Lists/*auto*/.empty(/*auto*/));
		List/*auto*/ < String/*auto*/ > newParent/*auto*/ = oldParent/*auto*/;
		if (Platform/*auto*/.TypeScript === this/*auto*/.platform) {
			if (namespace/*auto*/.isEmpty(/*auto*/)) {
				newParent/*auto*/ = newParent/*auto*/.addFirst(".");
			}
			mut let i: I32 = 0/*auto*/;
			let size: I32 = namespace/*auto*/.size(/*auto*/);
			while (i/*auto*/ < size/*auto*/) {
				newParent/*auto*/ = newParent/*auto*/.addFirst("..");
				i/*auto*/++;
			}
		}
		if (this/*auto*/.imports.query(/*auto*/).filter((mut node: Import) => Strings/*auto*/.equalsTo(node/*auto*/.child(/*auto*/), child/*auto*/)).next(/*auto*/).isPresent(/*auto*/)) {
			return this/*auto*/;
		}
		let importString: Import = Import(newParent/*auto*/, child/*auto*/);
		return ImmutableCompileState(this/*auto*/.platform, this/*auto*/.findCurrentLocation, this/*auto*/.sources, this/*auto*/.imports.addLast(importString/*auto*/), this/*auto*/.structureNames, this/*auto*/.structures, this/*auto*/.functions, this/*auto*/.definitions, this/*auto*/.depth);
	}
	def findSource(name: &[I8]): Option<Source> {
		return this/*auto*/.sources.query(/*auto*/).filter((mut source: Source) => Strings/*auto*/.equalsTo(source/*auto*/.computeName(/*auto*/), name/*auto*/)).next(/*auto*/);
	}
	def isPlatform(platform: Platform): Bool {
		return platform/*auto*/ === this/*auto*/.platform(/*auto*/);
	}
	def createIndent(): &[I8] {
		let indent: I32 = this/*auto*/.depth(/*auto*/);
		return "\n" + "\t".repeat(indent/*auto*/);
	}
	def functionName(): &[I8] {
		return "temp";
	}
	def findLastStructureName(): Option<&[I8]> {
		return this/*auto*/.structureNames(/*auto*/).findLast(/*auto*/);
	}
}
