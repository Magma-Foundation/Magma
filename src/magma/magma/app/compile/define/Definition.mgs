import magma.api.collect.list.List;
import magma.api.Type;
import magma.app.io.Platform;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.collect.Joiner;
import jvm.api.text.Strings;
export struct Definition {
	mut annotations: List<&[I8]>;
	mut modifiers: List<&[I8]>;
	mut typeParams: List<&[I8]>;
	mut type: Type;
	mut name: &[I8];
	constructor (mut annotations: List<&[I8]>, mut modifiers: List<&[I8]>, mut typeParams: List<&[I8]>, mut type: Type, mut name: &[I8]) {
		this.annotations = annotations;
		this.modifiers = modifiers;
		this.typeParams = typeParams;
		this.type = type;
		this.name = name;
	}
	def generate(mut platform: Platform): &[I8] {
		return this.generateWithAfterName(platform, "");
	}
	def asDefinition(): Option<Definition> {
		return Some<Definition>(this);
	}
	def generateWithAfterName(platform: Platform, afterName: &[I8]): &[I8] {
		let joinedTypeParams: &[I8] = this.joinTypeParams();
		let joinedModifiers: &[I8] = this.modifiers.query().map((mut value: &[I8]) => value + " ").collect(Joiner("")).orElse("");
		if (Platform.Windows === platform) {
			return joinedModifiers + this.type.generateBeforeName() + this.type.generate() + " " + this.name + afterName;
		}
		return joinedModifiers + this.type.generateBeforeName() + this.name + joinedTypeParams + afterName + this.generateType();
	}
	def generateType(): &[I8] {
		if (this.type.isVar()) {
			return "";
		}
		return ": " + this.type.generate();
	}
	def joinTypeParams(): &[I8] {
		return Joiner.joinOrEmpty(this.typeParams, ", ", "<", ">");
	}
	def hasAnnotation(annotation: &[I8]): Bool {
		return this.annotations.contains(annotation, Strings.equalsTo);
	}
	def removeModifier(modifier: &[I8]): Definition {
		return Definition(this.annotations, this.modifiers.removeValue(modifier, Strings.equalsTo), this.typeParams, this.type, this.name);
	}
	def addModifier(modifier: &[I8]): Definition {
		return Definition(this.annotations, this.modifiers.addFirst(modifier), this.typeParams, this.type, this.name);
	}
}
