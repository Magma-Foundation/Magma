/*[
	Actual, 
	Characters, 
	Collector, 
	CompileState, 
	Console, 
	Definition, 
	EmptyHead, 
	Err, 
	Files, 
	FlatMapHead, 
	FunctionHeader, 
	FunctionSegment, 
	Head, 
	HeadedQuery, 
	IOError, 
	Joiner, 
	List, 
	ListCollector, 
	Lists, 
	MapHead, 
	Namespace, 
	None, 
	Ok, 
	Option, 
	Parameter, 
	Path, 
	Queries, 
	Query, 
	RangeHead, 
	Result, 
	SingleHead, 
	Some, 
	Strings, 
	Tuple2, 
	Tuple2Impl, 
	Type, 
	ZipHead
]*/
import magma.app.compile.define.{ FunctionHeader, Definition };
import magma.api.collect.list.{ List };
import magma.api.option.{ Option };
import magma.app.io.{ Platform };
export struct FunctionSegment<S extends FunctionHeader<S>> {
	mut header: FunctionHeader<S>;
	mut definitions: List<Definition>;
	mut maybeContent: Option<&[I8]>;
	constructor (mut header: FunctionHeader<S>, mut definitions: List<Definition>, mut maybeContent: Option<&[I8]>) {
		this.header = header;
		this.definitions = definitions;
		this.maybeContent = maybeContent;
	}
	def generate(platform: Platform, indent: &[I8]): &[I8] {
		let content = this/*auto*/.maybeContent(/*auto*/).map((mut inner: &[I8]) => " {" + inner/*auto*/ + indent/*&[I8]*/ + "}").orElse(";");
		return indent/*&[I8]*/ + this/*auto*/.header.generateWithDefinitions(platform/*Platform*/, this/*auto*/.definitions(/*auto*/)) + content/*string*/;
	}
}
