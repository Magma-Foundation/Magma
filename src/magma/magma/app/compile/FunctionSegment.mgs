// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path, Path, None, None, None, Option, Option, Option, Some, Some, Some, Err, Err, Err, Ok, Ok, Ok, Result, Result, Result, Tuple2, Tuple2, Tuple2, Tuple2Impl, Tuple2Impl, Tuple2Impl, Type, Type, Type, CompileState, CompileState, CompileState, Definition, Definition, Definition, FunctionHeader, FunctionHeader, FunctionHeader, Parameter, Parameter, Parameter, FunctionSegment, FunctionSegment]
import magma.app.compile.define.{ FunctionHeader, Definition };
import magma.api.collect.list.{ List };
import magma.api.option.{ Option };
import magma.app.io.{ Platform };
export struct FunctionSegment<S extends FunctionHeader<S>> {
	mut header: FunctionHeader<S>;
	mut definitions: List<Definition>;
	mut maybeContent: Option<&[I8]>;
	constructor (mut header: FunctionHeader<S>, mut definitions: List<Definition>, mut maybeContent: Option<&[I8]>) {
		this.header = header;
		this.definitions = definitions;
		this.maybeContent = maybeContent;
	}
	def generate(platform: Platform, indent: &[I8]): &[I8] {
		let content = this/*auto*/.maybeContent(/*auto*/).map((mut inner: &[I8]) => " {" + inner/*auto*/ + indent/*&[I8]*/ + "}").orElse(";");
		return indent/*&[I8]*/ + this/*auto*/.header.generateWithDefinitions(platform/*Platform*/, this/*auto*/.definitions(/*auto*/)) + content/*auto*/;
	}
}
