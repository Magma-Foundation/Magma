// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path, Path, None, None, None, Option, Option, Option, Some, Some, Some, Err, Err, Err, Ok, Ok, Ok, Result, Result, Result, Tuple2, Tuple2, Tuple2, Tuple2Impl, Tuple2Impl, Tuple2Impl, Type, Type, Type, CompileState, CompileState]
import magma.api.option.{ Option };
import magma.app.io.{ Platform, Location, Source };
import magma.api.collect.list.{ List };
import magma.app.compile.define.{ Definition };
import magma.api.{ Type };
import magma.app.compile.{ Import };
export struct CompileState {
	def functionName(): &[I8];
	def findLastStructureName(): Option<&[I8]>;
	def createIndent(): &[I8];
	def isPlatform(mut platform: Platform): Bool;
	def hasLastStructureNameOf(mut name: &[I8]): Bool;
	def addResolvedImportFromCache(mut base: &[I8]): CompileState;
	def addResolvedImportWithNamespace(mut namespace: List<&[I8]>, mut child: &[I8]): CompileState;
	def withLocation(mut namespace: Location): CompileState;
	def append(mut element: &[I8]): CompileState;
	def pushStructureName(mut name: &[I8]): CompileState;
	def enterDepth(): CompileState;
	def exitDepth(): CompileState;
	def defineAll(mut definitions: List<Definition>): CompileState;
	def resolve(mut name: &[I8]): Option<Type>;
	def clearImports(): CompileState;
	def clear(): CompileState;
	def addSource(mut source: Source): CompileState;
	def findSource(mut name: &[I8]): Option<Source>;
	def popStructureName(): CompileState;
	def mapLocation(mut mapper: (arg0 : Location) => Location): CompileState;
	def withPlatform(mut platform: Platform): CompileState;
	def imports(): List<Import>;
	def join(): &[I8];
	def findCurrentLocation(): Option<Location>;
	def platform(): Platform;
	def addFunction(mut function: &[I8]): CompileState;
	def findDefinedTypes(): List<&[I8]>;
	def defineType(mut name: &[I8]): CompileState;
}
