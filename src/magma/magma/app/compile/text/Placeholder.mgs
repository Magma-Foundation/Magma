// []
import magma.app.{ Main };
import magma.app.io.{ Platform };
import magma.app.compile.value.{ Value };
import magma.api.option.{ Option, None };
import magma.app.compile.define.{ Definition };
import magma.api.{ Type };
import magma.app.compile.type.{ PrimitiveType };
export struct Placeholder {
	mut input: &[I8];
	constructor (mut input: &[I8]) {
		this.input = input;
	}
	def generate(): &[I8] {
		return Main/*auto*/.generatePlaceholder(this/*auto*/.input);
	}
	def isFunctional(): Bool {
		return false/*auto*/;
	}
	def generate(platform: Platform): &[I8] {
		return this/*auto*/.generate(/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def asDefinition(): Option<Definition> {
		return None<Definition>(/*auto*/);
	}
	def toValue(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
	def type(): Type {
		return PrimitiveType/*auto*/.Auto;
	}
}
