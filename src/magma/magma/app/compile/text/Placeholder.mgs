// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path, Path, None, None, None, Option, Option, Option, Some, Some, Some, Err, Err, Err, Ok, Ok, Ok, Result, Result, Result, Tuple2, Tuple2, Tuple2, Tuple2Impl, Tuple2Impl, Tuple2Impl, Type, Type, Type, CompileState, CompileState, CompileState, Definition, Definition, Definition, FunctionHeader, FunctionHeader, FunctionHeader, Parameter, Parameter, Parameter, FunctionSegment, FunctionSegment, FunctionSegment, ImmutableCompileState, ImmutableCompileState, ImmutableCompileState, Import, Import, Import, DivideState, DivideState, DivideState, Placeholder, Placeholder]
import magma.app.{ Main };
import magma.app.io.{ Platform };
import magma.app.compile.value.{ Value };
import magma.api.option.{ Option, None };
import magma.app.compile.define.{ Definition };
import magma.api.{ Type };
import magma.app.compile.type.{ PrimitiveType };
export struct Placeholder {
	mut input: &[I8];
	constructor (mut input: &[I8]) {
		this.input = input;
	}
	def generate(): &[I8] {
		return Main/*auto*/.generatePlaceholder(this/*auto*/.input);
	}
	def isFunctional(): Bool {
		return false/*auto*/;
	}
	def generate(platform: Platform): &[I8] {
		return this/*auto*/.generate(/*auto*/);
	}
	def findChild(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def asDefinition(): Option<Definition> {
		return None<Definition>(/*auto*/);
	}
	def toValue(): Option<Value> {
		return None<Value>(/*auto*/);
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
	def generateAsEnumValue(structureName: &[I8], mut platform: Platform): Option<&[I8]> {
		return None<&[I8]>(/*auto*/);
	}
	def type(): Type {
		return PrimitiveType/*auto*/.Auto;
	}
}
