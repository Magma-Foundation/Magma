// [Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType, VariadicType, AccessNode, Argument, Caller, ConstructionCaller, ConstructorHeader, InvokableNode, LambdaNode, NotNode, OperationNode, StringNode, SymbolNode, Value, Location, Platform, Source, Main, Lists, Console, Files, Characters, Strings, Actual, Namespace, Collector, EmptyHead, FlatMapHead, Head, HeadedQuery, MapHead, RangeHead, SingleHead, ZipHead, Joiner, List, ListCollector, Queries, Query, IOError, Path, None, Option, Some, Err, Ok, Result, Tuple2, Tuple2Impl, Type, CompileState, Definition, FunctionHeader, Parameter, FunctionSegment, ImmutableCompileState, Import, DivideState, Placeholder, Whitespace, ArrayType, BooleanType, FunctionType, PrimitiveType, SliceType, TemplateType]
import magma.api.{ Type };
import magma.api.collect.list.{ List };
import magma.app.{ Main };
import jvm.api.text.{ Strings };
export struct TemplateType implements Type {
	mut base: &[I8];
	mut args: List<&[I8]>;
	constructor (mut base: &[I8], mut args: List<&[I8]>) {
		this.base = base;
		this.args = args;
	}
	static def generateValueStrings(values: List<&[I8]>): &[I8] {
		return Main/*auto*/.generateAll(values/*List<&[I8]>*/, TemplateType/*auto*/.mergeValues);
	}
	static def mergeValues(cache: &[I8], element: &[I8]): &[I8] {
		if (Strings/*auto*/.isEmpty(cache/*&[I8]*/)) {
			return cache/*&[I8]*/ + element/*&[I8]*/;
		}
		return cache/*&[I8]*/ + ", " + element/*&[I8]*/;
	}
	def generate(): &[I8] {
		return this/*auto*/.base + "<" + TemplateType/*auto*/.generateValueStrings(this/*auto*/.args) + ">";
	}
	def isFunctional(): Bool {
		return false/*auto*/;
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
}
