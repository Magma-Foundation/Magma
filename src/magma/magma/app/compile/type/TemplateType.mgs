// [Lists, Lists, Lists, Console, Console, Console, Files, Files, Files, Characters, Characters, Characters, Strings, Strings, Strings, Actual, Actual, Actual, Namespace, Namespace, Namespace, Collector, Collector, Collector, EmptyHead, EmptyHead, EmptyHead, FlatMapHead, FlatMapHead, FlatMapHead, Head, Head, Head, HeadedQuery, HeadedQuery, HeadedQuery, MapHead, MapHead, MapHead, RangeHead, RangeHead, RangeHead, SingleHead, SingleHead, SingleHead, ZipHead, ZipHead, ZipHead, Joiner, Joiner, Joiner, List, List, List, ListCollector, ListCollector, ListCollector, Queries, Queries, Queries, Query, Query, Query, IOError, IOError, IOError, Path, Path, Path, None, None, None, Option, Option, Option, Some, Some, Some, Err, Err, Err, Ok, Ok, Ok, Result, Result, Result, Tuple2, Tuple2, Tuple2, Tuple2Impl, Tuple2Impl, Tuple2Impl, Type, Type, Type, CompileState, CompileState, CompileState, Definition, Definition, Definition, FunctionHeader, FunctionHeader, FunctionHeader, Parameter, Parameter, Parameter, FunctionSegment, FunctionSegment, FunctionSegment, ImmutableCompileState, ImmutableCompileState, ImmutableCompileState, Import, Import, Import, DivideState, DivideState, DivideState, Placeholder, Placeholder, Placeholder, Whitespace, Whitespace, Whitespace, ArrayType, ArrayType, ArrayType, BooleanType, BooleanType, BooleanType, FunctionType, FunctionType, FunctionType, PrimitiveType, PrimitiveType, PrimitiveType, SliceType, SliceType, SliceType, TemplateType, TemplateType]
import magma.api.{ Type };
import magma.api.collect.list.{ List };
import magma.app.{ Main };
import jvm.api.text.{ Strings };
export struct TemplateType implements Type {
	mut base: &[I8];
	mut args: List<&[I8]>;
	constructor (mut base: &[I8], mut args: List<&[I8]>) {
		this.base = base;
		this.args = args;
	}
	static def generateValueStrings(values: List<&[I8]>): &[I8] {
		return Main/*auto*/.generateAll(values/*List<&[I8]>*/, TemplateType/*auto*/.mergeValues);
	}
	static def mergeValues(cache: &[I8], element: &[I8]): &[I8] {
		if (Strings/*auto*/.isEmpty(cache/*&[I8]*/)) {
			return cache/*&[I8]*/ + element/*&[I8]*/;
		}
		return cache/*&[I8]*/ + ", " + element/*&[I8]*/;
	}
	def generate(): &[I8] {
		return this/*auto*/.base + "<" + TemplateType/*auto*/.generateValueStrings(this/*auto*/.args) + ">";
	}
	def isFunctional(): Bool {
		return false/*auto*/;
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
}
