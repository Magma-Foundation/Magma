/*[
	Actual, 
	ArrayType, 
	BooleanType, 
	Characters, 
	Collector, 
	CompileState, 
	Console, 
	Definition, 
	DivideState, 
	EmptyHead, 
	Err, 
	Files, 
	FlatMapHead, 
	FunctionHeader, 
	FunctionSegment, 
	FunctionType, 
	Head, 
	HeadedQuery, 
	IOError, 
	ImmutableCompileState, 
	Import, 
	Joiner, 
	List, 
	ListCollector, 
	Lists, 
	MapHead, 
	Namespace, 
	None, 
	Ok, 
	Option, 
	Parameter, 
	Path, 
	Placeholder, 
	Queries, 
	Query, 
	RangeHead, 
	Result, 
	SingleHead, 
	Some, 
	Strings, 
	Tuple2, 
	Tuple2Impl, 
	Type, 
	Whitespace, 
	ZipHead
]*/
import magma.api.{ Type, Tuple2 };
import magma.api.collect.list.{ List };
import magma.api.collect.{ Joiner };
export struct FunctionType implements Type {
	mut args: List<&[I8]>;
	mut returns: &[I8];
	constructor (mut args: List<&[I8]>, mut returns: &[I8]) {
		this.args = args;
		this.returns = returns;
	}
	def generate(): &[I8] {
		let joinedArguments = this/*auto*/.args.queryWithIndices(/*auto*/).map((mut tuple: Tuple2<I32, &[I8]>) => "arg" + tuple/*Tuple2<CompileState, Whitespace>*/.left(/*auto*/) + " : " + tuple/*Tuple2<CompileState, Whitespace>*/.right(/*auto*/)).collect(Joiner(", ")).orElse("");
		return "(" + joinedArguments/*auto*/ + ") => " + this/*auto*/.returns;
	}
	def isFunctional(): Bool {
		return true/*auto*/;
	}
	def isVar(): Bool {
		return false/*auto*/;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
}
