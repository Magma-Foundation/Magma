import magma.api.Type;
import magma.app.compile.CompileState;
import magma.app.Primitive;
import magma.app.Value;
import magma.api.option.Option;
import magma.api.option.Some;
import magma.api.option.None;
struct SymbolNode {
	mut value: &[I8];
	constructor (mut value: &[I8]) {
		this.value = value;
	}
	def generate(): &[I8] {
		return this.value;
	}
	def resolve(state: CompileState): Type {
		return state.resolve(this.value).orElse(Primitive.Unknown);
	}
	def toValue(): Option<Value> {
		return Some<Value>(this);
	}
	def findChild(): Option<Value> {
		return None<Value>();
	}
	def isFunctional(): Bool {
		return false;
	}
	def isVar(): Bool {
		return false;
	}
	def generateBeforeName(): &[I8] {
		return "";
	}
	def generateAsEnumValue(structureName: &[I8]): Option<&[I8]> {
		return None<&[I8]>();
	}
}
