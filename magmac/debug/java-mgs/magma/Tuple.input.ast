Optional[block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma", "api"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "function", "Function"]
			}
		},
		record = {
			modifiers : ["public"],
			name : symbol = {
				value : "Tuple<L, R>(L left, R right)"
			},
			child : block = {
				children : [
					method = {
						params : [
							definition = {
								name : "mapper",
								type : generic = {
									parent : symbol = {
										value : "Function"
									},
									children : [
										symbol = {
											value : "L"
										},
										symbol = {
											value : "T"
										}
									]
								}
							}
						],
						definition : definition = {
							name : "mapLeft",
							modifiers : ["public", "<T>"],
							type : generic = {
								parent : symbol = {
									value : "Tuple"
								},
								children : [
									symbol = {
										value : "T"
									},
									symbol = {
										value : "R"
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									child : constructor = {
										temp : ">",
										caller : symbol = {
											value : "Tuple"
										},
										arguments : [
											invocation = {
												arguments : [
													symbol = {
														value : "left"
													}
												],
												caller : access = {
													child : "apply",
													parent : symbol = {
														value : "mapper"
													}
												}
											},
											symbol = {
												value : "right"
											}
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
}]