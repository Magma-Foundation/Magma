Optional[block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma", "compile", "attribute"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "List"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		interface = {
			modifiers : ["/**", "*", "The", "Attribute"],
			name : symbol = {
				value : "provides methods to retrieve attribute values\n * as different types. This interface includes default methods to get\n * the attribute value as a string or a list of strings.\n */\npublic interface Attribute"
			},
			child : block = {
				children : [
					method = {
						params : [],
						definition : definition = {
							name : "asNode",
							modifiers : ["default"],
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									symbol = {
										value : "Node"
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									child : invocation = {
										arguments : [],
										caller : access = {
											child : "empty",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						}
					},
					method = {
						params : [],
						child : block = {
							children : [
								return = {
									child : invocation = {
										arguments : [],
										caller : access = {
											child : "empty",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						},
						definition : definition = {
							name : "asNodeList",
							modifiers : ["default"],
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									generic = {
										parent : symbol = {
											value : "List"
										},
										children : [
											symbol = {
												value : "Node"
											}
										]
									}
								]
							}
						}
					},
					method = {
						params : [],
						child : block = {
							children : [
								return = {
									child : invocation = {
										arguments : [],
										caller : access = {
											child : "empty",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						},
						definition : definition = {
							name : "asString",
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									symbol = {
										value : "String"
									}
								]
							},
							modifiers : ["/**", "*", "Retrieves", "the", "attribute", "value", "as", "a", "string.", "*", "*", "@return", "an", "Optional", "containing", "the", "string", "value", "if", "present,", "otherwise", "empty", "*/", "default"]
						}
					},
					method = {
						params : [],
						child : block = {
							children : [
								return = {
									child : invocation = {
										arguments : [],
										caller : access = {
											child : "empty",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						},
						definition : definition = {
							name : "asStringList",
							modifiers : ["/**", "*", "Retrieves", "the", "attribute", "value", "as", "a", "list", "of", "strings.", "*", "*", "@return", "an", "Optional", "containing", "the", "list", "of", "string", "values", "if", "present,", "otherwise", "empty", "*/", "default"],
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									generic = {
										parent : symbol = {
											value : "List"
										},
										children : [
											symbol = {
												value : "String"
											}
										]
									}
								]
							}
						}
					},
					method = {
						definition : definition = {
							name : "format",
							type : symbol = {
								value : "String"
							}
						},
						params : [
							definition = {
								name : "depth",
								type : symbol = {
									value : "int"
								}
							}
						]
					}
				]
			}
		}
	]
}]