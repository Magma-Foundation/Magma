Optional[block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma", "compile", "rule", "split"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rules"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		class = {
			modifiers : ["public", "final"],
			name : "FirstRule extends SplitOnceRule implements Rule",
			child : block = {
				children : [
					method = {
						definition : definition = {
							name : "FirstRule",
							type : symbol = {
								value : "public"
							}
						},
						params : [
							definition = {
								name : "leftRule",
								type : symbol = {
									value : "Rule"
								}
							},
							definition = {
								name : "slice",
								type : symbol = {
									value : "String"
								}
							},
							definition = {
								name : "rightRule",
								type : symbol = {
									value : "Rule"
								}
							}
						],
						child : block = {
							children : [
								invocation = {
									caller : symbol = {
										value : "super"
									},
									arguments : [
										symbol = {
											value : "leftRule"
										},
										symbol = {
											value : "slice"
										},
										symbol = {
											value : "rightRule"
										}
									]
								}
							]
						}
					},
					method = {
						params : [
							definition = {
								name : "input",
								type : symbol = {
									value : "String"
								}
							}
						],
						definition : definition = {
							name : "computeIndex",
							modifiers : ["@Override
", "", "", "", "protected"],
							type : symbol = {
								value : "Optional<Integer>"
							}
						},
						child : block = {
							children : [
								return = {
									child : invocation = {
										caller : access = {
											child : "wrapIndex",
											parent : symbol = {
												value : "Rules"
											}
										},
										arguments : [
											invocation = {
												arguments : [
													symbol = {
														value : "slice"
													}
												],
												caller : access = {
													child : "indexOf",
													parent : symbol = {
														value : "input"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
}]