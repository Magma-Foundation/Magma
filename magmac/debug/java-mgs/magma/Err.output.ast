block = {
	children : [
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		import = {
			leftRule-indent : "\n",
			external : namespace = {
				namespace : ["java", "util", "function", "Function"]
			}
		},
		record = {
			right-indent : "\n",
			leftRule-indent : "\n",
			modifiers : ["public"],
			name : symbol = {
				value : "Err<T, E>(E value)"
			},
			interface : generic = {
				child : "T, E",
				value : "Result"
			},
			child : block = {
				children : [
					function = {
						leftRule-indent : "\n\t",
						definition : definition = {
							params : [],
							name : "findValue",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									symbol = {
										value : "T"
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										arguments : [],
										caller : access = {
											child : "empty",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						}
					},
					function = {
						leftRule-indent : "\n\t",
						definition : definition = {
							params : [],
							name : "findErr",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Optional"
								},
								children : [
									symbol = {
										value : "E"
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										arguments : [
											symbol = {
												value : "value"
											}
										],
										caller : access = {
											child : "of",
											parent : symbol = {
												value : "Optional"
											}
										}
									}
								}
							]
						}
					},
					function = {
						leftRule-indent : "\n\t",
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : ">",
										caller : symbol = {
											value : "Err"
										},
										arguments : [
											symbol = {
												value : "value"
											}
										]
									}
								}
							]
						},
						definition : definition = {
							name : "flatMapValue",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Result"
								},
								children : [
									symbol = {
										value : "R"
									},
									symbol = {
										value : "E"
									}
								]
							},
							params : [
								definition = {
									name : "mapper",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "T"
											},
											generic = {
												parent : symbol = {
													value : "Result"
												},
												children : [
													symbol = {
														value : "R"
													},
													symbol = {
														value : "E"
													}
												]
											}
										]
									}
								}
							]
						}
					},
					function = {
						leftRule-indent : "\n\t",
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : ">",
										caller : symbol = {
											value : "Err"
										},
										arguments : [
											symbol = {
												value : "value"
											}
										]
									}
								}
							]
						},
						definition : definition = {
							name : "mapValue",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Result"
								},
								children : [
									symbol = {
										value : "R"
									},
									symbol = {
										value : "E"
									}
								]
							},
							params : [
								definition = {
									name : "mapper",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "R"
											}
										]
									}
								}
							]
						}
					},
					function = {
						leftRule-indent : "\n\t",
						definition : definition = {
							params : [],
							name : "isOk",
							modifiers : ["public", "def"],
							type : symbol = {
								value : "boolean"
							}
						},
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : symbol = {
										value : "false"
									}
								}
							]
						}
					},
					function = {
						leftRule-indent : "\n\t",
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : ">",
										caller : symbol = {
											value : "Err"
										},
										arguments : [
											invocation = {
												arguments : [
													symbol = {
														value : "value"
													}
												],
												caller : access = {
													child : "apply",
													parent : symbol = {
														value : "mapper"
													}
												}
											}
										]
									}
								}
							]
						},
						definition : definition = {
							name : "mapErr",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Result"
								},
								children : [
									symbol = {
										value : "T"
									},
									symbol = {
										value : "R"
									}
								]
							},
							params : [
								definition = {
									name : "mapper",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "E"
											},
											symbol = {
												value : "R"
											}
										]
									}
								}
							]
						}
					},
					function = {
						right-indent : "\n",
						leftRule-indent : "\n\t",
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										arguments : [
											symbol = {
												value : "value"
											}
										],
										caller : access = {
											child : "apply",
											parent : symbol = {
												value : "onErr"
											}
										}
									}
								}
							]
						},
						definition : definition = {
							name : "match",
							modifiers : ["public", "def"],
							type : symbol = {
								value : "R"
							},
							params : [
								definition = {
									name : "onOk",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "R"
											}
										]
									}
								},
								definition = {
									name : "onErr",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "E"
											},
											symbol = {
												value : "R"
											}
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
}