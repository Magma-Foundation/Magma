block = {
	children : [
		import = {
			external : namespace = {
				namespace : ["java", "util", "List"]
			}
		},
		import = {
			leftRule-indent : "\n",
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		function = {
			right-indent : "\n",
			leftRule-indent : "\n",
			modifiers : ["public"],
			name : symbol = {
				value : "Streams"
			},
			definition : definition = {
				params : [],
				name : "Streams",
				modifiers : ["export", "class", "def"]
			},
			child : block = {
				children : [
					function = {
						right-indent : "\n",
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "fromNativeList",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Stream"
								},
								children : [
									symbol = {
										value : "T"
									}
								]
							},
							params : [
								definition = {
									name : "list",
									type : generic = {
										parent : symbol = {
											value : "List"
										},
										children : [
											symbol = {
												value : "T"
											}
										]
									}
								}
							]
						},
						child : block = {
							children : [
								return = {
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : "T>",
										arguments : [],
										caller : symbol = {
											value : "AbstractStream"
										},
										children : [
											declaration = {
												modifiers : ["let"],
												value : number = {
													value : "0"
												},
												definition : definition = {
													name : "counter",
													modifiers : ["let"],
													type : symbol = {
														value : "int"
													}
												}
											},
											function = {
												definition : definition = {
													params : [],
													name : "head",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Optional"
														},
														children : [
															symbol = {
																value : "T"
															}
														]
													}
												},
												child : block = {
													children : [
														if = {
															leftRule-indent : "\n\t\t\t",
															value:scope : value:scope = {
																value : return = {
																	child : invocation = {
																		arguments : [],
																		caller : access = {
																			child : "empty",
																			parent : symbol = {
																				value : "Optional"
																			}
																		}
																	}
																}
															},
															condition:scope : condition:scope = {
																condition : invocation = {
																	arguments : [],
																	caller : access = {
																		child : "size",
																		parent : greater-than = {
																			right : symbol = {
																				value : "list"
																			},
																			leftRule : symbol = {
																				value : "counter"
																			}
																		}
																	}
																}
															}
														},
														declaration = {
															modifiers : ["let"],
															leftRule-indent : "\n\t\t\t",
															definition : definition = {
																name : "next",
																modifiers : ["let"]
															},
															value : invocation = {
																arguments : [
																	symbol = {
																		value : "counter"
																	}
																],
																caller : access = {
																	child : "get",
																	parent : symbol = {
																		value : "list"
																	}
																}
															}
														},
														post-increment = {
															leftRule-indent : "\n\t\t\t",
															value : symbol = {
																value : "counter"
															}
														},
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : invocation = {
																arguments : [
																	symbol = {
																		value : "next"
																	}
																],
																caller : access = {
																	child : "of",
																	parent : symbol = {
																		value : "Optional"
																	}
																}
															}
														}
													]
												}
											}
										]
									}
								},
								empty = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t"
								}
							]
						}
					}
				]
			}
		}
	]
}