Optional[block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma", "api"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		class = {
			modifiers : ["public"],
			name : symbol = {
				value : "Options"
			},
			child : block = {
				children : [
					method = {
						definition : definition = {
							name : "toTuple",
							modifiers : ["public", "static", "<C>"],
							type : generic = {
								parent : symbol = {
									value : "Tuple"
								},
								children : [
									symbol = {
										value : "Boolean"
									},
									symbol = {
										value : "C"
									}
								]
							}
						},
						params : [
							definition = {
								name : "optional",
								type : generic = {
									parent : symbol = {
										value : "Optional"
									},
									children : [
										symbol = {
											value : "C"
										}
									]
								}
							},
							definition = {
								name : "other",
								type : symbol = {
									value : "C"
								}
							}
						],
						child : block = {
							children : [
								return = {
									child : lambda = {
										param-name : "optional.map(value",
										child : constructor = {
											temp : ">(true, value)).orElse",
											caller : symbol = {
												value : "Tuple"
											},
											arguments : [
												constructor = {
													temp : ">",
													caller : symbol = {
														value : "Tuple"
													},
													arguments : [
														symbol = {
															value : "false"
														},
														symbol = {
															value : "other"
														}
													]
												}
											]
										}
									}
								}
							]
						}
					}
				]
			}
		}
	]
}]