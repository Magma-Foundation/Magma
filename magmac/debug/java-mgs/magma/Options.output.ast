block = {
	children : [
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		function = {
			right-indent : "\n",
			leftRule-indent : "\n",
			modifiers : ["public"],
			name : symbol = {
				value : "Options"
			},
			definition : definition = {
				params : [],
				name : "Options",
				modifiers : ["export", "class", "def"]
			},
			child : block = {
				children : [
					function = {
						right-indent : "\n",
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "toTuple",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Tuple"
								},
								children : [
									symbol = {
										value : "Boolean"
									},
									symbol = {
										value : "C"
									}
								]
							},
							params : [
								definition = {
									name : "optional",
									type : generic = {
										parent : symbol = {
											value : "Optional"
										},
										children : [
											symbol = {
												value : "C"
											}
										]
									}
								},
								definition = {
									name : "other",
									type : symbol = {
										value : "C"
									}
								}
							]
						},
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : function = {
										param-name : "optional.map(value",
										definition : definition = {
											modifiers : [],
											params : [
												definition = {
													name : "optional.map(value"
												}
											]
										},
										child : invocation = {
											temp : ">(true, value)).orElse",
											caller : symbol = {
												value : "Tuple"
											},
											arguments : [
												invocation = {
													temp : ">",
													caller : symbol = {
														value : "Tuple"
													},
													arguments : [
														symbol = {
															value : "false"
														},
														symbol = {
															value : "other"
														}
													]
												}
											]
										}
									}
								}
							]
						}
					}
				]
			}
		}
	]
}