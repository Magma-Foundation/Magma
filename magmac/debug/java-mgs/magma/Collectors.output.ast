block = {
	children : [
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		function = {
			right-indent : "\n",
			leftRule-indent : "\n",
			modifiers : ["public"],
			name : symbol = {
				value : "Collectors"
			},
			definition : definition = {
				params : [],
				name : "Collectors",
				modifiers : ["export", "class", "def"]
			},
			child : block = {
				children : [
					function = {
						leftRule-indent : "\n\t",
						child : block = {
							children : [
								return = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									child : invocation = {
										caller : symbol = {
											value : "joining"
										},
										arguments : [
											string = {
												value : ""
											}
										]
									}
								}
							]
						},
						definition : definition = {
							params : [],
							name : "joining",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Collector"
								},
								children : [
									symbol = {
										value : "String"
									},
									generic = {
										parent : symbol = {
											value : "Optional"
										},
										children : [
											symbol = {
												value : "String"
											}
										]
									}
								]
							}
						}
					},
					function = {
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "joining",
							modifiers : ["public", "def"],
							params : [
								definition = {
									name : "delimiter",
									modifiers : ["final"],
									type : symbol = {
										value : "String"
									}
								}
							],
							type : generic = {
								parent : symbol = {
									value : "Collector"
								},
								children : [
									symbol = {
										value : "String"
									},
									generic = {
										parent : symbol = {
											value : "Optional"
										},
										children : [
											symbol = {
												value : "String"
											}
										]
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : ">",
										arguments : [],
										caller : symbol = {
											value : "Collector"
										},
										children : [
											function = {
												definition : definition = {
													params : [],
													name : "createInitial",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Optional"
														},
														children : [
															symbol = {
																value : "String"
															}
														]
													}
												},
												child : block = {
													children : [
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : invocation = {
																arguments : [],
																caller : access = {
																	child : "empty",
																	parent : symbol = {
																		value : "Optional"
																	}
																}
															}
														}
													]
												}
											},
											function = {
												definition : definition = {
													name : "fold",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Optional"
														},
														children : [
															symbol = {
																value : "String"
															}
														]
													},
													params : [
														definition = {
															name : "current",
															type : generic = {
																parent : symbol = {
																	value : "Optional"
																},
																children : [
																	symbol = {
																		value : "String"
																	}
																]
															}
														},
														definition = {
															name : "next",
															type : symbol = {
																value : "String"
															}
														}
													]
												},
												child : block = {
													children : [
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : ternary = {
																condition : invocation = {
																	arguments : [],
																	caller : access = {
																		child : "isEmpty",
																		parent : symbol = {
																			value : "current"
																		}
																	}
																},
																true : invocation = {
																	arguments : [
																		symbol = {
																			value : "next"
																		}
																	],
																	caller : access = {
																		child : "of",
																		parent : symbol = {
																			value : "Optional"
																		}
																	}
																},
																false : invocation = {
																	caller : access = {
																		child : "map",
																		parent : symbol = {
																			value : "current"
																		}
																	},
																	arguments : [
																		function = {
																			param-name : "inner",
																			definition : definition = {
																				modifiers : [],
																				params : [
																					definition = {
																						name : "inner"
																					}
																				]
																			},
																			child : add = {
																				leftRule : symbol = {
																					value : "inner"
																				},
																				right : add = {
																					right : symbol = {
																						value : "next"
																					},
																					leftRule : symbol = {
																						value : "delimiter"
																					}
																				}
																			}
																		}
																	]
																}
															}
														}
													]
												}
											}
										]
									}
								},
								empty = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t"
								}
							]
						}
					},
					function = {
						right-indent : "\n",
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "exceptionally",
							modifiers : ["public", "def"],
							params : [
								definition = {
									name : "collector",
									type : generic = {
										parent : symbol = {
											value : "Collector"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "C"
											}
										]
									}
								}
							],
							type : generic = {
								parent : symbol = {
									value : "Collector"
								},
								children : [
									generic = {
										parent : symbol = {
											value : "Result"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "E"
											}
										]
									},
									generic = {
										parent : symbol = {
											value : "Result"
										},
										children : [
											symbol = {
												value : "C"
											},
											symbol = {
												value : "E"
											}
										]
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									leftRule-indent : "\n\t\t",
									child : invocation = {
										arguments : [],
										temp : "Result<T, E>, Result<C, E>>",
										caller : symbol = {
											value : "Collector"
										},
										children : [
											function = {
												definition : definition = {
													params : [],
													name : "createInitial",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Result"
														},
														children : [
															symbol = {
																value : "C"
															},
															symbol = {
																value : "E"
															}
														]
													}
												},
												child : block = {
													children : [
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : invocation = {
																temp : ">",
																caller : symbol = {
																	value : "Ok"
																},
																arguments : [
																	invocation = {
																		arguments : [],
																		caller : access = {
																			child : "createInitial",
																			parent : symbol = {
																				value : "collector"
																			}
																		}
																	}
																]
															}
														}
													]
												}
											},
											function = {
												definition : definition = {
													name : "fold",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Result"
														},
														children : [
															symbol = {
																value : "C"
															},
															symbol = {
																value : "E"
															}
														]
													},
													params : [
														definition = {
															name : "current",
															type : generic = {
																parent : symbol = {
																	value : "Result"
																},
																children : [
																	symbol = {
																		value : "C"
																	},
																	symbol = {
																		value : "E"
																	}
																]
															}
														},
														definition = {
															name : "next",
															type : generic = {
																parent : symbol = {
																	value : "Result"
																},
																children : [
																	symbol = {
																		value : "T"
																	},
																	symbol = {
																		value : "E"
																	}
																]
															}
														}
													]
												},
												child : block = {
													children : [
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : invocation = {
																caller : access = {
																	child : "flatMapValue",
																	parent : symbol = {
																		value : "current"
																	}
																},
																arguments : [
																	function = {
																		param-name : "inner",
																		definition : definition = {
																			modifiers : [],
																			params : [
																				definition = {
																					name : "inner"
																				}
																			]
																		},
																		child : invocation = {
																			caller : access = {
																				child : "mapValue",
																				parent : symbol = {
																					value : "next"
																				}
																			},
																			arguments : [
																				function = {
																					param-name : "inner0",
																					definition : definition = {
																						modifiers : [],
																						params : [
																							definition = {
																								name : "inner0"
																							}
																						]
																					},
																					child : invocation = {
																						caller : access = {
																							child : "fold",
																							parent : symbol = {
																								value : "collector"
																							}
																						},
																						arguments : [
																							symbol = {
																								value : "inner"
																							},
																							symbol = {
																								value : "inner0"
																							}
																						]
																					}
																				}
																			]
																		}
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								empty = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t"
								}
							]
						}
					}
				]
			}
		}
	]
}