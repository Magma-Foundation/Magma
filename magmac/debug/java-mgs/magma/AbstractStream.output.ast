block = {
	children : [
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		import = {
			leftRule-indent : "\n",
			external : namespace = {
				namespace : ["java", "util", "function", "Function"]
			}
		},
		function = {
			right-indent : "\n",
			leftRule-indent : "\n",
			modifiers : ["public", "abstract"],
			interface : generic = {
				child : "T",
				value : "Stream"
			},
			name : generic = {
				child : "T",
				value : "AbstractStream"
			},
			definition : definition = {
				params : [],
				name : "AbstractStream",
				modifiers : ["export", "class", "def"]
			},
			child : block = {
				children : [
					function = {
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "map",
							modifiers : ["public", "def"],
							type : generic = {
								parent : symbol = {
									value : "Stream"
								},
								children : [
									symbol = {
										value : "R"
									}
								]
							},
							params : [
								definition = {
									name : "mapper",
									type : generic = {
										parent : symbol = {
											value : "Function"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "R"
											}
										]
									}
								}
							]
						},
						child : block = {
							children : [
								return = {
									leftRule-indent : "\n\t\t",
									child : invocation = {
										temp : "R>",
										arguments : [],
										caller : symbol = {
											value : "AbstractStream"
										},
										children : [
											function = {
												definition : definition = {
													params : [],
													name : "head",
													modifiers : ["public", "def"],
													type : generic = {
														parent : symbol = {
															value : "Optional"
														},
														children : [
															symbol = {
																value : "R"
															}
														]
													}
												},
												child : block = {
													children : [
														return = {
															right-indent : "\n\t\t",
															leftRule-indent : "\n\t\t\t",
															child : invocation = {
																arguments : [
																	symbol = {
																		value : "mapper"
																	}
																],
																caller : access = {
																	child : "map",
																	parent : invocation = {
																		arguments : [],
																		caller : access = {
																			child : "head",
																			parent : access = {
																				child : "this",
																				parent : symbol = {
																					value : "AbstractStream"
																				}
																			}
																		}
																	}
																}
															}
														}
													]
												}
											}
										]
									}
								},
								empty = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t"
								}
							]
						}
					},
					function = {
						right-indent : "\n",
						leftRule-indent : "\n\t",
						definition : definition = {
							name : "collect",
							modifiers : ["public", "def"],
							type : symbol = {
								value : "C"
							},
							params : [
								definition = {
									name : "collector",
									type : generic = {
										parent : symbol = {
											value : "Collector"
										},
										children : [
											symbol = {
												value : "T"
											},
											symbol = {
												value : "C"
											}
										]
									}
								}
							]
						},
						child : block = {
							children : [
								declaration = {
									modifiers : ["let"],
									leftRule-indent : "\n\t\t",
									definition : definition = {
										name : "current",
										modifiers : ["let"]
									},
									value : invocation = {
										arguments : [],
										caller : access = {
											child : "createInitial",
											parent : symbol = {
												value : "collector"
											}
										}
									}
								},
								while = {
									right-indent : "\n\t",
									leftRule-indent : "\n\t\t",
									condition:scope : condition:scope = {
										condition : symbol = {
											value : "true"
										}
									},
									value:scope : value:scope = {
										value : block = {
											children : [
												declaration = {
													modifiers : ["let"],
													leftRule-indent : "\n\t\t\t",
													value : symbol = {
														value : "current"
													},
													definition : definition = {
														modifiers : ["let"],
														name : "finalCurrent",
														type : symbol = {
															value : "C"
														}
													}
												},
												declaration = {
													modifiers : ["let"],
													leftRule-indent : "\n\t\t\t",
													definition : definition = {
														name : "tuple",
														modifiers : ["let"]
													},
													value : invocation = {
														caller : access = {
															child : "toTuple",
															parent : symbol = {
																value : "Options"
															}
														},
														arguments : [
															invocation = {
																caller : access = {
																	child : "map",
																	parent : invocation = {
																		arguments : [],
																		caller : symbol = {
																			value : "head"
																		}
																	}
																},
																arguments : [
																	function = {
																		param-name : "head",
																		definition : definition = {
																			modifiers : [],
																			params : [
																				definition = {
																					name : "head"
																				}
																			]
																		},
																		child : invocation = {
																			caller : access = {
																				child : "fold",
																				parent : symbol = {
																					value : "collector"
																				}
																			},
																			arguments : [
																				symbol = {
																					value : "finalCurrent"
																				},
																				symbol = {
																					value : "head"
																				}
																			]
																		}
																	}
																]
															},
															symbol = {
																value : "current"
															}
														]
													}
												},
												if = {
													leftRule-indent : "\n\t\t\t",
													condition:scope : condition:scope = {
														condition : invocation = {
															arguments : [],
															caller : access = {
																child : "left",
																parent : symbol = {
																	value : "tuple"
																}
															}
														}
													},
													value:scope : value:scope = {
														value : block = {
															children : [
																assignment = {
																	right-indent : "\n\t\t\t",
																	leftRule-indent : "\n\t\t\t\t",
																	assignable : assignable-parent = {
																		reference : "current"
																	},
																	value : invocation = {
																		arguments : [],
																		caller : access = {
																			child : "right",
																			parent : symbol = {
																				value : "tuple"
																			}
																		}
																	}
																}
															]
														}
													}
												},
												else = {
													right-indent : "\n\t\t",
													leftRule-indent : "\n\t\t\t",
													child : block = {
														children : [
															return = {
																right-indent : "\n\t\t\t",
																leftRule-indent : "\n\t\t\t\t",
																child : symbol = {
																	value : "current"
																}
															}
														]
													}
												}
											]
										}
									}
								}
							]
						}
					}
				]
			}
		}
	]
}