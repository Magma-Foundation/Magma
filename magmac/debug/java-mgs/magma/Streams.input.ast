Optional[block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma", "api"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "List"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Optional"]
			}
		},
		class = {
			modifiers : ["public"],
			name : symbol = {
				value : "Streams"
			},
			child : block = {
				children : [
					method = {
						params : [
							definition = {
								name : "list",
								type : generic = {
									parent : symbol = {
										value : "List"
									},
									children : [
										symbol = {
											value : "T"
										}
									]
								}
							}
						],
						definition : definition = {
							name : "fromNativeList",
							modifiers : ["public", "static", "<T>"],
							type : generic = {
								parent : symbol = {
									value : "Stream"
								},
								children : [
									symbol = {
										value : "T"
									}
								]
							}
						},
						child : block = {
							children : [
								return = {
									child : constructor = {
										temp : "T>",
										arguments : [],
										caller : symbol = {
											value : "AbstractStream"
										},
										children : [
											declaration = {
												value : number = {
													value : "0"
												},
												definition : definition = {
													name : "counter",
													modifiers : ["private"],
													type : symbol = {
														value : "int"
													}
												}
											},
											method = {
												params : [],
												definition : definition = {
													name : "head",
													modifiers : ["@Override", "public"],
													type : generic = {
														parent : symbol = {
															value : "Optional"
														},
														children : [
															symbol = {
																value : "T"
															}
														]
													}
												},
												child : block = {
													children : [
														if = {
															value:scope : value:scope = {
																value : return = {
																	child : invocation = {
																		arguments : [],
																		caller : access = {
																			child : "empty",
																			parent : symbol = {
																				value : "Optional"
																			}
																		}
																	}
																}
															},
															condition:scope : condition:scope = {
																condition : invocation = {
																	arguments : [],
																	caller : access = {
																		child : "size",
																		parent : greater-than = {
																			right : symbol = {
																				value : "list"
																			},
																			leftRule : symbol = {
																				value : "counter"
																			}
																		}
																	}
																}
															}
														},
														declaration = {
															definition : definition = {
																name : "next",
																type : symbol = {
																	value : "var"
																}
															},
															value : invocation = {
																arguments : [
																	symbol = {
																		value : "counter"
																	}
																],
																caller : access = {
																	child : "get",
																	parent : symbol = {
																		value : "list"
																	}
																}
															}
														},
														post-increment = {
															value : symbol = {
																value : "counter"
															}
														},
														return = {
															child : invocation = {
																arguments : [
																	symbol = {
																		value : "next"
																	}
																],
																caller : access = {
																	child : "of",
																	parent : symbol = {
																		value : "Optional"
																	}
																}
															}
														}
													]
												}
											}
										]
									}
								},
								empty = {
								}
							]
						}
					}
				]
			}
		}
	]
}]