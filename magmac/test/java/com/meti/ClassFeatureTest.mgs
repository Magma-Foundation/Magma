extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;

export object ClassFeatureTest = {
	pub const TEST_BODY : String = "0";
}

export class def ClassFeatureTest() => {
	let @ValueSource(strings :  = {"First", "Second"};
	@
	def testSimpleClasses() : Void ? stSimpleClasses(String name) => {
        assertCompile(JavaLang.renderJavaClass(name, ""), Compiler.renderMagmaClass(name, ""));
    }
	@Test
	def testPublicKeyword() : Void => {
        assertCompile(Compiler.renderJavaClass(Compiler.PUBLIC_KEYWORD, FeatureTest.TEST_SYMBOL, ""), Compiler.renderMagmaClass("export ", FeatureTest.TEST_SYMBOL, ""));
    }
	@Test
	def testBody() : Void => {
        assertCompile(JavaLang.renderJavaClass(FeatureTest.TEST_SYMBOL, TEST_BODY),
                Compiler.renderMagmaClass(FeatureTest.TEST_SYMBOL, TEST_BODY));
    }
}