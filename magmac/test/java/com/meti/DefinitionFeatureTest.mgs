extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import com.meti.Compiler;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { renderDefinition } from com.meti.JavaLang;
extern import { renderJavaClass } from com.meti.JavaLang;

export object DefinitionFeatureTest = {
	pub const TEST_VALUE : String = "100";
}

export class def DefinitionFeatureTest() => {
	let @ValueSource(strings :  = {"first", "second"};
	@
	def testSimpleDefinition() : Void ? stSimpleDefinition(String name) => {
        FeatureTest.assertWithinClass(renderDefinition(name, INT), renderMagmaDefinition(name, I32));
    }
	let @ValueSource(ints :  = {2, 3};
	@
	def testMultipleDefinitions() : Void ? stMultipleDefinitions(int count) => {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, INT).repeat(count),
                renderMagmaDefinition(TEST_SYMBOL, I32).repeat(count));
    }
	@Test
	def testType() : Void => {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, LONG), renderMagmaDefinition(TEST_SYMBOL, I64));
    }
	@Test
	def testValue() : Void => {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, INT, TEST_VALUE), renderMagmaDefinition(TEST_SYMBOL, I32, TEST_VALUE));
    }
	@Test
	def testFinal() : Void => {
        FeatureTest.assertWithinClass(
                renderDefinition(FINAL_KEYWORD + " ", TEST_SYMBOL, INT, TEST_VALUE),
                renderMagmaDefinition("", CONST_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE));
    }
	let @ValueSource(strings :  = {TEST_SYMBOL, TEST_SYMBOL + "_more"};
	@
	def testStatic() : Void ? stStatic(String className) => {
        assertCompile(
                renderJavaClass(className, renderDefinition("static ", TEST_SYMBOL, INT, TEST_VALUE)),
                renderObject(className, renderMagmaDefinition("", LET_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE))
                + "\n\n"
                + renderMagmaClass(className, ""));
    }
	@Test
	def testPublic() : Void => {
        FeatureTest.assertWithinClass(
                renderDefinition("public ", TEST_SYMBOL, INT, TEST_VALUE),
                renderMagmaDefinition("pub ", LET_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE));
    }
}