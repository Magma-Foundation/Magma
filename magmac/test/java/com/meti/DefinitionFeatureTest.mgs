class def def DefinitionFeatureTest() =>() => {
	let : : @ValueSource(strings = {"first", "second"};
	let name) : stSimpleDefinition(String = > {
        FeatureTest.assertWithinClass(renderDefinition(name, INT), renderMagmaDefinition(name, I32));
    };
	let : : @ValueSource(ints = {2, 3};
	let count) : stMultipleDefinitions(int = > {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, INT).repeat(count),
                renderMagmaDefinition(TEST_SYMBOL, I32).repeat(count));
    };
	let Void : : = > {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, LONG), renderMagmaDefinition(TEST_SYMBOL, I64));
    };
	let Void : : = > {
        FeatureTest.assertWithinClass(renderDefinition(TEST_SYMBOL, INT, TEST_VALUE), renderMagmaDefinition(TEST_SYMBOL, I32, TEST_VALUE));
    };
	let Void : : = > {
        FeatureTest.assertWithinClass(
                renderDefinition(FINAL_KEYWORD + " ", TEST_SYMBOL, INT, TEST_VALUE),
                renderMagmaDefinition("", CONST_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE));
    };
	let : : @ValueSource(strings = {TEST_SYMBOL, TEST_SYMBOL + "_more"};
	let className) : stStatic(String = > {
        assertCompile(
                renderJavaClass(className, renderDefinition("static ", TEST_SYMBOL, INT, TEST_VALUE)),
                renderObject(className, renderMagmaDefinition("", LET_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE))
                + "\n\n"
                + renderMagmaClass(className, ""));
    };
	let Void : : = > {
        FeatureTest.assertWithinClass(
                renderDefinition("public ", TEST_SYMBOL, INT, TEST_VALUE),
                renderMagmaDefinition("pub ", LET_KEYWORD, TEST_SYMBOL, I32, TEST_VALUE));
    };
}