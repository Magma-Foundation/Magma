extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { assertWithinClass } from com.meti.FeatureTest;
extern import { renderJavaClass } from com.meti.JavaLang;

export object MethodFeatureTest = {
	def renderJavaMethod() : String => {
        return renderJavaMethod(prefix, "", name, "", content);
    }
	def renderJavaMethod() : String => {
        return annotations + "\n" + flagsString + "void " + name + "()" + throwsString + content;
    }
}

export class def MethodFeatureTest() => {
	@Test
	def testWithNoBody() : Void => {
        assertWithinClass(renderJavaMethod("", TEST_SYMBOL, ";"),
                new MagmaDefinitionHeader("", "", TEST_SYMBOL, "() => Void").render() + ";");
    }
	@ParameterizedTest
	@ValueSource(strings = ["first", "second"])
	def testSimpleMethod() : Void => {
        assertWithinClass(renderJavaMethod("", name, "{}"),
                new MagmaMethodBuilder().setPrefix("").setName(name).setType("Void").setContent("{}").setExceptionString("").createMagmaMethodNode().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testAnnotation() : Void => {
        assertWithinClass(renderJavaMethod(new Annotation(name, "").renderAnnotation(), TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().setPrefix(new Annotation(name, "").renderAnnotation()).setName(TEST_SYMBOL).setType("Void").setContent("{}").setExceptionString("").createMagmaMethodNode().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testException() : Void => {
        assertWithinClass(renderJavaMethod("", "", TEST_SYMBOL, " throws " + name + " ", "{}"),
                new MagmaMethodBuilder().setPrefix("").setName(TEST_SYMBOL).setType("Void").setContent("{}").setExceptionString(" ? " + name).createMagmaMethodNode().render());
    }
	@ParameterizedTest
	@ValueSource(ints = [2, 3])
	def testMultipleAnnotations() : Void => {
        var rendered = new Annotation("First", "").renderAnnotation().repeat(count);
        assertWithinClass(renderJavaMethod(rendered, TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().setPrefix(rendered).setName(TEST_SYMBOL).setType("Void").setContent("{}").setExceptionString("").createMagmaMethodNode().render());
    }
	@Test
	def testAnnotationWithValues() : Void => {
        assertWithinClass(renderJavaMethod(new Annotation("First", "(ints = {2, 3})").renderAnnotation(), TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().setPrefix(new Annotation("First", "(ints = [2, 3])").renderAnnotation()).setName(TEST_SYMBOL).setType("Void").setContent("{}").setExceptionString("").createMagmaMethodNode().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["Foo", "Bar"])
	def testStatic() : Void => {
        String content = new MagmaMethodBuilder().setPrefix("").setName(TEST_SYMBOL).setType("Void").setContent("{}").setExceptionString("").createMagmaMethodNode().render();
        assertCompile(
                renderJavaClass(className, renderJavaMethod("", "static ", TEST_SYMBOL, "", "{}")),
                new ObjectNode("", className, content).renderObject()
                + "\n\n"
                + new MagmaClassNodeBuilder().setPrefix("").setName(className).setContent("").createMagmaClassNode().render());
    }
}