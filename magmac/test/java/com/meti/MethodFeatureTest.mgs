extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { assertWithinClass } from com.meti.FeatureTest;

export class def MethodFeatureTest() => {
		def renderJavaMethod() : private static String => {
        return renderJavaMethod(prefix, name, "");
    }
		def renderJavaMethod() : private static String => {
        return prefix + "void " + name + "()" + throwsString + "{}";
    }
	let @ValueSource(strings :  = {"first", "second"})
    void testSimpleMethod(String name) {
        assertWithinClass(renderJavaMethod("", name),
                Compiler.renderMagmaMethodWithType("", name, "Void", "{}"));
    };
	let @ValueSource(strings :  = {"First", "Second"})
    void testAnnotation(String name) {
        assertWithinClass(renderJavaMethod(Compiler.renderAnnotation(name), TEST_SYMBOL),
                Compiler.renderMagmaMethodWithType(Compiler.renderAnnotation(name), TEST_SYMBOL, "Void", "{}"));
    };
	let @ValueSource(strings :  = {"First", "Second"})
    void testException(String name) {
        assertWithinClass(renderJavaMethod("", TEST_SYMBOL, " throws " + name + " "),
                Compiler.renderMagmaMethodWithException("", TEST_SYMBOL, "Void", "{}", name));
    };
}