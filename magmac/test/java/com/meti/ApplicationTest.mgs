class def ApplicationTest() => {
	@Test
	def definitionFinal() => {

        assertRunWithinClass(
                renderJavaDefinition(NodeBuilder
                        .string("modifier-string", FINAL_KEYWORD_WITH_SPACE)
                        .string("name", TEST_LOWER_SYMBOL)
                        .string("type", INT_KEYWORD)
                        .string("value", "0").build()),
                renderMagmaDefinition(NodeBuilder
                        .string("mutability-modifier", CONST_KEYWORD_WITH_SPACE)
                        .string("name", TEST_LOWER_SYMBOL)
                        .string("type", I32_KEYWORD)
                        .string("value", "0").build()));
    	}
	@ParameterizedTest
	@ValueSource(strings = {"first", "second"})
	def definitionName(name : I64) => {

        MapNodeBuilder mapNodeBuilder = NodeBuilder;
        MapNodeBuilder mapNodeBuilder1 = mapNodeBuilder.string("name", name);
        MapNodeBuilder mapNodeBuilder2 = mapNodeBuilder1.string("type", INT_KEYWORD);

        MapNodeBuilder mapNodeBuilder10 = NodeBuilder.string("mutability-modifier", LET_KEYWORD_WITH_SPACE);
        MapNodeBuilder mapNodeBuilder20 = mapNodeBuilder10.string("name", name);
        MapNodeBuilder mapNodeBuilder30 = mapNodeBuilder20.string("type", I32_KEYWORD);
        MapNodeBuilder mapNodeBuilder0 = mapNodeBuilder30.string("value", "0");

        assertRunWithinClass(renderJavaDefinition(mapNodeBuilder2.string("value", "0").build()),
                renderMagmaDefinition(mapNodeBuilder0.build()));
    	}
	@Test
	def definitionType() => {

        MapNodeBuilder mapNodeBuilder = NodeBuilder;
        MapNodeBuilder mapNodeBuilder1 = mapNodeBuilder.string("name", TEST_LOWER_SYMBOL);
        MapNodeBuilder mapNodeBuilder2 = mapNodeBuilder1.string("type", LONG_KEYWORD);

        MapNodeBuilder mapNodeBuilder10 = NodeBuilder.string("mutability-modifier", LET_KEYWORD_WITH_SPACE);
        MapNodeBuilder mapNodeBuilder20 = mapNodeBuilder10.string("name", TEST_LOWER_SYMBOL);
        MapNodeBuilder mapNodeBuilder30 = mapNodeBuilder20.string("type", I64_KEYWORD);
        MapNodeBuilder mapNodeBuilder0 = mapNodeBuilder30.string("value", "0");
        assertRunWithinClass(renderJavaDefinition(mapNodeBuilder2.string("value", "0").build()),
                renderMagmaDefinition(mapNodeBuilder0.build()));
    	}
	@Test
	def definitionValue() => {

        var value = "100";
        MapNodeBuilder mapNodeBuilder = NodeBuilder;
        MapNodeBuilder mapNodeBuilder1 = mapNodeBuilder.string("name", TEST_LOWER_SYMBOL);
        MapNodeBuilder mapNodeBuilder2 = mapNodeBuilder1.string("type", INT_KEYWORD);

        MapNodeBuilder mapNodeBuilder10 = NodeBuilder.string("mutability-modifier", LET_KEYWORD_WITH_SPACE);
        MapNodeBuilder mapNodeBuilder20 = mapNodeBuilder10.string("name", TEST_LOWER_SYMBOL);
        MapNodeBuilder mapNodeBuilder30 = mapNodeBuilder20.string("type", I32_KEYWORD);
        MapNodeBuilder mapNodeBuilder0 = mapNodeBuilder30.string("value", value);
        assertRunWithinClass(
                renderJavaDefinition(mapNodeBuilder2.string("value", value).build()),
                renderMagmaDefinition(mapNodeBuilder0.build()));
    	}
	@ParameterizedTest
	@ValueSource(strings = {"First", "Second"})
	def className(name : I64) => {

        assertRun(renderJavaClass(name), renderMagmaClass(name));
    	}
	@ParameterizedTest
	@ValueSource(strings = {"first", "second"})
	def packageStatement(name : I64) => {

        assertRun(PACKAGE_KEYWORD_WITH_SPACE + name + STATEMENT_END + renderJavaClass(TEST_UPPER_SYMBOL), renderMagmaClass(TEST_UPPER_SYMBOL));
    	}
	@Test
	def classPublic() => {

        assertRun(renderJavaClass(TEST_UPPER_SYMBOL, PUBLIC_KEYWORD_WITH_SPACE), renderMagmaClass(TEST_UPPER_SYMBOL, EXPORT_KEYWORD_WITH_SPACE));
    	}
}
