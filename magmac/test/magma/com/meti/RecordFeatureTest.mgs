extern import { RecordNodeBuilder } from com.meti.java;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;

export object RecordFeatureTest = {def RecordNodeBuilder() : new ? me(TEST_SYMBOL).withBody(" => {}
}

export class def RecordFeatureTest() => {
	MagmaClassNodeBuilder : () => Void;
	@Testdef oneParameter() : Void => {
        CompiledTest.assertCompile(DEFAULT_INPUT, DEFAULT_OUTPUT);
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])def testSimpleRecords(name : String) : Void => {
        CompiledTest.assertCompile(DEFAULT_INPUT.withName(name), DEFAULT_OUTPUT.withName(name));
    }
	@Testdef testPublicKeyword() : Void => {
        CompiledTest.assertCompile(DEFAULT_INPUT.withPrefix(Lang.PUBLIC_KEYWORD), DEFAULT_OUTPUT.withPrefix(Lang.EXPORT_KEYWORD_WITH_SPACE));
    }
	@Testdef testBody() : Void => {
        CompiledTest.assertCompile(DEFAULT_INPUT, DEFAULT_OUTPUT);
    }
}