extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MapNode } from com.meti.node;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;

export class def RecordFeatureTest() => {
	public static final MapNode.Builder DEFAULT_INPUT
	MagmaClassNodeBuilder : () => Void;
	static {
        DEFAULT_INPUT = MapNode.Builder("record")
                .string("name", TEST_SYMBOL)
                .string("body", "{}");
    }
	@Test
	def oneParameter() : Void => {
        assertCompile(DEFAULT_INPUT, DEFAULT_OUTPUT);
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testSimpleRecords() : Void => {
        assertCompile(DEFAULT_INPUT.string("name", name), DEFAULT_OUTPUT.withName(name));
    }
	@Test
	def testPublicKeyword() : Void => {
        assertCompile(DEFAULT_INPUT.string("prefix", Lang.PUBLIC_KEYWORD), DEFAULT_OUTPUT.withPrefix(Lang.EXPORT_KEYWORD_WITH_SPACE));
    }
	@Test
	def testBody() : Void => {
        assertCompile(DEFAULT_INPUT, DEFAULT_OUTPUT);
    }
	@Test
	def testParameter() : Void => {
        assertCompile(DEFAULT_INPUT.string("parameters", "int test"),
                DEFAULT_OUTPUT);
    }
}