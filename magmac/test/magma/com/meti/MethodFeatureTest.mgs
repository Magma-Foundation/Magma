extern import { JavaClassNodeBuilder } from com.meti.java;
extern import { RenderableBuilder } from com.meti.java;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MagmaDeclaration } from com.meti.magma;
extern import { MagmaMethodBuilder } from com.meti.magma;
extern import { ObjectNode } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { Collectors } from java.util.stream;
extern import { IntStream } from java.util.stream;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { assertWithinClass } from com.meti.FeatureTest;

export object MethodFeatureTest = {def JavaMethodBuilder() : new ? turnType("void")
            .withContent(" => {}
}

export class def MethodFeatureTest() => {
	@ParameterizedTest
	@ValueSource(ints = [1, 2, 3])
	def testParameters(count : I32) : Void => {
        var inputParameters = IntStream.range(0, count)
                .mapToObj(i -> "int value" + i)
                .collect(Collectors.joining(", "));

        var outputParameters = IntStream.range(0, count)
                .mapToObj(i -> "value" + i + " : I32")
                .collect(Collectors.joining(", "));

        assertWithinClass(DEFAULT_BUILDER.withName(TEST_SYMBOL)
                        .withParameters(inputParameters),
                new MagmaMethodBuilder()
                        .withName(TEST_SYMBOL)
                        .withType("Void")
                        .withContent("{}")
                        .withParameters(outputParameters));
    }
	@Test
	def testWithNoBody() : Void => {
        assertWithinClass(new JavaMethodBuilder().withReturnType("void")
                        .withName(TEST_SYMBOL)
                        .withContent(";")
                        .build()
                        .render(),
                new MagmaDeclaration("", "", TEST_SYMBOL, "() => Void").render() + ";");
    }
	@ParameterizedTest
	@ValueSource(strings = ["first", "second"])
	def testSimpleMethod(name : String) : Void => {
        assertWithinClass(DEFAULT_BUILDER.withName(name),
                new MagmaMethodBuilder()
                        .withName(name)
                        .withType("Void")
                        .withContent("{}"));
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testAnnotation(name : String) : Void => {
        String prefix = new Annotation(name, "").render();
        RenderableBuilder input = new JavaMethodBuilder()
                .withReturnType("void")
                .withName(TEST_SYMBOL)
                .withContent("{}");
        RenderableBuilder output = new MagmaMethodBuilder()
                .withName(TEST_SYMBOL)
                .withType("Void")
                .withContent("{}");
        assertWithinClass(prefix + "\n\t" + input.build().render(), prefix + "\n\t" + output.build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testException(name : String) : Void => {
        assertWithinClass(new JavaMethodBuilder().withReturnType("void")
                        .withName(TEST_SYMBOL)
                        .withThrows(" throws " + name + " ")
                        .withContent("{}"),
                new MagmaMethodBuilder()
                        .withName(TEST_SYMBOL)
                        .withType("Void")
                        .withContent("{}")
                        .withExceptionString(" ? " + name));
    }
	@ParameterizedTest
	@ValueSource(ints = [2, 3])
	def testMultipleAnnotations(count : I32) : Void => {
        var render = new Annotation("First", "").render();
        var rendered = IntStream.range(0, count)
                .mapToObj(i -> render + "\n\t")
                .collect(Collectors.joining());

        RenderableBuilder input = new JavaMethodBuilder().withReturnType("void")
                        .withAnnotations(rendered)
                        .withName(TEST_SYMBOL)
                        .withContent("{}");
        RenderableBuilder output = new MagmaMethodBuilder()
                .withPrefix(rendered)
                .withName(TEST_SYMBOL)
                .withType("Void")
                .withContent("{}");
        assertWithinClass(rendered + input.build().render(), output.build().render());
    }
	@Test
	def testAnnotationWithValues() : Void => {
        String prefix = new Annotation("First", "(ints = {2, 3})").render();
        RenderableBuilder input = new JavaMethodBuilder().withReturnType("void")
                .withAnnotations(prefix)
                .withName(TEST_SYMBOL)
                .withContent("{}");
        RenderableBuilder output = new MagmaMethodBuilder()
                .withName(TEST_SYMBOL)
                .withType("Void")
                .withContent("{}");
        assertWithinClass(prefix + "\n" + input.build().render(), new Annotation("First", "(ints = [2, 3])").render() + "\n\t" + output.build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["Foo", "Bar"])
	def testStatic(className : String) : Void => {
        var content = new MagmaMethodBuilder()
                .withName(TEST_SYMBOL).withType("Void").withContent("{}")
                .build()
                .render();

        var rendered = new JavaMethodBuilder().withReturnType("void")
                .withFlagsString("static ")
                .withName(TEST_SYMBOL)
                .withContent("{}")
                .build()
                .render();

        assertCompile(new JavaClassNodeBuilder()
                        .withName(className)
                        .withContent(rendered)
                        .build()
                        .render(),
                new ObjectNode("", className, content).render() + "\n\n"
                + new MagmaClassNodeBuilder().withName(className).withContent("").build().render());
    }
}