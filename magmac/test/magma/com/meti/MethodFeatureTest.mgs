extern import { JavaClassNodeBuilder } from com.meti.java;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MagmaDeclaration } from com.meti.magma;
extern import { MagmaMethodBuilder } from com.meti.magma;
extern import { ObjectNode } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { assertWithinClass } from com.meti.FeatureTest;

export object MethodFeatureTest = {
	def renderJavaMethod() : String => {
        return renderJavaMethod(prefix, "", name, "", content);
    }
	def renderJavaMethod() : String => {
        return annotations + "\n" + flagsString + "void " + name + "()" + throwsString + content;
    }
}

export class def MethodFeatureTest() => {
	@Test
	def testWithNoBody() : Void => {
        assertWithinClass(renderJavaMethod("", TEST_SYMBOL, ";"),
                new MagmaDeclaration("", "", TEST_SYMBOL, "() => Void").render() + ";");
    }
	@ParameterizedTest
	@ValueSource(strings = ["first", "second"])
	def testSimpleMethod() : Void => {
        assertWithinClass(renderJavaMethod("", name, "{}"),
                new MagmaMethodBuilder().withPrefix("").withName(name).withType("Void").withContent("{}").withExceptionString("").build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testAnnotation() : Void => {
        assertWithinClass(renderJavaMethod(new Annotation(name, "").renderAnnotation(), TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().withPrefix(new Annotation(name, "").renderAnnotation()).withName(TEST_SYMBOL).withType("Void").withContent("{}").withExceptionString("").build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testException() : Void => {
        assertWithinClass(renderJavaMethod("", "", TEST_SYMBOL, " throws " + name + " ", "{}"),
                new MagmaMethodBuilder().withPrefix("").withName(TEST_SYMBOL).withType("Void").withContent("{}").withExceptionString(" ? " + name).build().render());
    }
	@ParameterizedTest
	@ValueSource(ints = [2, 3])
	def testMultipleAnnotations() : Void => {
        var rendered = new Annotation("First", "").renderAnnotation().repeat(count);
        assertWithinClass(renderJavaMethod(rendered, TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().withPrefix(rendered).withName(TEST_SYMBOL).withType("Void").withContent("{}").withExceptionString("").build().render());
    }
	@Test
	def testAnnotationWithValues() : Void => {
        assertWithinClass(renderJavaMethod(new Annotation("First", "(ints = {2, 3})").renderAnnotation(), TEST_SYMBOL, "{}"),
                new MagmaMethodBuilder().withPrefix(new Annotation("First", "(ints = [2, 3])").renderAnnotation()).withName(TEST_SYMBOL).withType("Void").withContent("{}").withExceptionString("").build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = ["Foo", "Bar"])
	def testStatic() : Void => {
        String content = new MagmaMethodBuilder().withPrefix("").withName(TEST_SYMBOL).withType("Void").withContent("{}").withExceptionString("").build().render();
        assertCompile(
                new JavaClassNodeBuilder().withPrefix("").withName(className).withContent(renderJavaMethod("", "static ", TEST_SYMBOL, "", "{}")).build().render(),
                new ObjectNode("", className, content).render()
                + "\n\n"
                + new MagmaClassNodeBuilder().withPrefix("").withName(className).withContent("").build().render());
    }
}