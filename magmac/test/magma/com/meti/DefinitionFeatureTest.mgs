extern import { JavaClassNodeBuilder } from com.meti.java;
extern import { DeclarationNodeBuilder } from com.meti.magma;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MagmaDefinitionBuilder } from com.meti.magma;
extern import { ObjectNode } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;
extern import { assertWithinClass } from com.meti.FeatureTest;

export class def DefinitionFeatureTest() => {
    public static final String TEST_VALUE = "100"
	DeclarationNodeBuilder : () => Void;
	@Test
	def testNoValue() : Void => {
        assertWithinClass(new DeclarationNodeBuilder()
                .withName(TEST_SYMBOL)
                .withType(Lang.INT)
                .withName("first"), new MagmaDefinitionBuilder()
                .withMutability(Lang.LET_KEYWORD)
                .withName("first")
                .withType(Lang.I32));
    }
	@ParameterizedTest
	@ValueSource(strings = ["first", "second"])
	def testSimpleDefinition() : Void => {
        assertWithinClass(DEFAULT_INPUT.withName(name), new MagmaDefinitionBuilder()
                .withMutability(Lang.LET_KEYWORD)
                .withName(name)
                .withType(Lang.I32)
                .withValue("0"));
    }
	@ParameterizedTest
	@ValueSource(ints = [2, 3])
	def testMultipleDefinitions() : Void => {
        assertWithinClass(DEFAULT_INPUT.build().render().repeat(count), new MagmaDefinitionBuilder()
                .withMutability(Lang.LET_KEYWORD)
                .withName(TEST_SYMBOL)
                .withType(Lang.I32)
                .withValue("0")
                .build()
                .render()
                .repeat(count));
    }
	@Test
	def testType() : Void => {
        assertWithinClass(DEFAULT_INPUT.withType(Lang.LONG), new MagmaDefinitionBuilder()
                .withMutability(Lang.LET_KEYWORD)
                .withName(TEST_SYMBOL)
                .withType(Lang.I64)
                .withValue("0"));
    }
	@Test
	def testValue() : Void => {
        assertWithinClass(DEFAULT_INPUT.withValue(TEST_VALUE), new MagmaDefinitionBuilder()
                .withMutability(Lang.LET_KEYWORD)
                .withName(TEST_SYMBOL)
                .withType(Lang.I32)
                .withValue(TEST_VALUE));
    }
	@Test
	def testFinal() : Void => {
        assertWithinClass(DEFAULT_INPUT.withFlagString(Lang.FINAL_KEYWORD + " ").withValue(TEST_VALUE), new MagmaDefinitionBuilder()
                .withMutability(Lang.CONST_KEYWORD)
                .withName(TEST_SYMBOL)
                .withType(Lang.I32)
                .withValue(TEST_VALUE));
    }
	@ParameterizedTest
	@ValueSource(strings = [TEST_SYMBOL, TEST_SYMBOL + "_more"])
	def testStatic() : Void => {
        String content = new MagmaDefinitionBuilder().withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue(TEST_VALUE).build().render();
        String content1 = DEFAULT_INPUT
                .withValue(TEST_VALUE)
                .withFlagString("static ")
                .build()
                .render();

        assertCompile(new JavaClassNodeBuilder()
                        .withPrefix("")
                        .withName(className)
                        .withContent(content1)
                        .build()
                        .render(),
                new ObjectNode("", className, content).render()
                + "\n\n"
                + new MagmaClassNodeBuilder()
                        .withName(className)
                        .build()
                        .render());
    }
	@Test
	def testPublic() : Void => {
        assertWithinClass(DEFAULT_INPUT.withFlagString("public ").withValue(TEST_VALUE), new MagmaDefinitionBuilder()
                .withFlags("pub ")
                .withMutability(Lang.LET_KEYWORD)
                .withName(TEST_SYMBOL)
                .withType(Lang.I32)
                .withValue(TEST_VALUE));
    }
}