extern import { JavaClassNodeBuilder } from com.meti.java;
extern import { DeclarationNodeBuilder } from com.meti.magma;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MagmaDefinitionBuilder } from com.meti.magma;
extern import { ObjectNode } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;

export object DefinitionFeatureTest = {
	pub const TEST_VALUE : String = "100";
}

export class def DefinitionFeatureTest() => {
	DeclarationNodeBuilder : () => Void;
	@ParameterizedTest
	@ValueSource(strings = ["first", "second"])
	def testSimpleDefinition() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER
                .withName(name)
                .build()
                .render(), new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.LET_KEYWORD).withName(name).withType(Lang.I32).withValue("0").build().render());
    }
	@ParameterizedTest
	@ValueSource(ints = [2, 3])
	def testMultipleDefinitions() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER.build().render().repeat(count),
                new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue("0").build().render().repeat(count));
    }
	@Test
	def testType() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER
                .setType(Lang.LONG)
                .build()
                .render(), new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I64).withValue("0").build().render());
    }
	@Test
	def testValue() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER
                .withValue(TEST_VALUE)
                .build()
                .render(), new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue(TEST_VALUE).build().render());
    }
	@Test
	def testFinal() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER
                .withFlagString(Lang.FINAL_KEYWORD + " ")
                .withValue(TEST_VALUE)
                .build()
                .render(), new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.CONST_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue(TEST_VALUE).build().render());
    }
	@ParameterizedTest
	@ValueSource(strings = [TEST_SYMBOL, TEST_SYMBOL + "_more"])
	def testStatic() : Void => {
        String content = new MagmaDefinitionBuilder().withFlags("").withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue(TEST_VALUE).build().render();
        String content1 = DEFAULT_BUILDER
                        .withValue(TEST_VALUE)
                        .withFlagString("static ")
                        .build()
                        .render();
        assertCompile(new JavaClassNodeBuilder().setPrefix("").setName(className).setContent(content1).createJavaClassNode().renderJavaClass(),
                new ObjectNode("", className, content).render()
                + "\n\n"
                + new MagmaClassNodeBuilder().withPrefix("").withName(className).withContent("").build().render());
    }
	@Test
	def testPublic() : Void => {
        FeatureTest.assertWithinClass(DEFAULT_BUILDER.withFlagString("public ")
                        .withValue(TEST_VALUE)
                        .build()
                        .render(),
                new MagmaDefinitionBuilder().withFlags("pub ").withMutability(Lang.LET_KEYWORD).withName(TEST_SYMBOL).withType(Lang.I32).withValue(TEST_VALUE).build().render());
    }
}