extern import { RenderableBuilder } from com.meti.java;
extern import { Optional } from java.util;

export class def JavaMethodBuilder implements RenderableBuilder() => {
	const annotations : String;
	const flagsString : String;
	const name : String;
	const throwsString : String;
	const content : String;
	const parameterString : String;
	const returnType : Optional<String>;
	def JavaMethodBuilder() : public => {
        this("", "", "", Optional.empty(), "", "", "");
    }
	def JavaMethodBuilder(let annotations : String;, let flagsString : String;, let name : String;, let returnType : Optional<String>;, let throwsString : String;, let content : String;) : public => {
        this.annotations = annotations;
        this.flagsString = flagsString;
        this.name = name;
        this.throwsString = throwsString;
        this.content = content;
        this.returnType = returnType;
        this.parameterString = parameterString;
    }
	def withAnnotations() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def withFlagsString() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def withName() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def withThrows() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def withContent() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def build() : JavaMethod => {
        return new JavaMethod(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
	def withReturnType() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, Optional.of(returnType), throwsString, content, parameterString);
    }
	def withParameters() : JavaMethodBuilder => {
        return new JavaMethodBuilder(annotations, flagsString, name, returnType, throwsString, content, parameterString);
    }
}