extern import { Renderable } from com.meti.node;
extern import { Objects } from java.util;
extern import { Optional } from java.util;

export class def JavaMethod implements Renderable() => {
	const annotations : String;
	const flagsString : String;
	const name : String;
	const throwsString : String;
	const content : String;
	const returnType : Optional<String>;
	const parameterString : String;
	def JavaMethod(let annotations : String;, let flagsString : String;, let name : String;, let returnType : Optional<String>;, let throwsString : String;, let content : String;) : public => {
        this.annotations = annotations;
        this.flagsString = flagsString;
        this.name = name;
        this.throwsString = throwsString;
        this.content = content;
        this.returnType = returnType;
        this.parameterString = parameterString;
    }
	@Override
	def render() : String => {
        var returnsString = returnType.map(value -> value + " ").orElse("");
        return flagsString() + returnsString + name() + "(" + parameterString + ")" + throwsString() + content();
    }
	def flagsString() : String => {
        return flagsString;
    }
	def name() : String => {
        return name;
    }
	def throwsString() : String => {
        return throwsString;
    }
	def content() : String => {
        return content;
    }
	@Override
	def equals() : Bool => {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (JavaMethod) obj;
        return Objects.equals(this.annotations, that.annotations) && Objects.equals(this.flagsString, that.flagsString) && Objects.equals(this.name, that.name) && Objects.equals(this.throwsString, that.throwsString) && Objects.equals(this.content, that.content);
    }
	@Override
	def hashCode() : I32 => {
        return Objects.hash(annotations, flagsString, name, throwsString, content);
    }
	@Override
	def toString() : String => {
        return "JavaMethod[" + "annotations=" + annotations + ", " + "flagsString=" + flagsString + ", " + "name=" + name + ", " + "throwsString=" + throwsString + ", " + "content=" + content + ']';
    }
}