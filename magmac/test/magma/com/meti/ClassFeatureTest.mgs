extern import { JavaClassNodeBuilder } from com.meti.java;
extern import { MagmaClassNodeBuilder } from com.meti.magma;
extern import { MagmaMethodBuilder } from com.meti.magma;
extern import { Test } from org.junit.jupiter.api;
extern import { ParameterizedTest } from org.junit.jupiter.params;
extern import { ValueSource } from org.junit.jupiter.params.provider;
extern import { Collectors } from java.util.stream;
extern import { IntStream } from java.util.stream;
extern import { assertCompile } from com.meti.CompiledTest;
extern import { TEST_SYMBOL } from com.meti.FeatureTest;

export class 
	def ClassFeatureTest() => {
    public static final String TEST_BODY = "0"
	@ParameterizedTest
	@ValueSource(ints = [1, 2, 3])
	def testConstructorParameter(count : I32) : Void => {
        var inputParams = IntStream.range(0, count).mapToObj(i -> "int value" + i).collect(Collectors.joining(", "));

        var outputParams = IntStream.range(0, count).mapToObj(i -> "value" + i + " : I32").collect(Collectors.joining(", "));

        assertCompile(new JavaClassNodeBuilder().withName(TEST_SYMBOL).withContent(new JavaMethodBuilder().withName(TEST_SYMBOL).withContent("{}").withParameters(inputParams)), new MagmaMethodBuilder().withPrefix("class ").withName(TEST_SYMBOL).withParameters(outputParams).withContent("{\n}"));
    }
	@Test
	def testConstructor() : Void => {
        assertCompile(new JavaClassNodeBuilder().withName(TEST_SYMBOL).withContent(TEST_SYMBOL + "(){}"), new MagmaClassNodeBuilder().withName(TEST_SYMBOL));
    }
	@ParameterizedTest
	@ValueSource(strings = ["First", "Second"])
	def testSimpleClasses(name : String) : Void => {
        assertCompile(new JavaClassNodeBuilder().withName(name), new MagmaClassNodeBuilder().withName(name));
    }
	@Test
	def testPublicKeyword() : Void => {
        assertCompile(new JavaClassNodeBuilder().withPrefix(Lang.PUBLIC_KEYWORD).withName(TEST_SYMBOL), new MagmaClassNodeBuilder().withPrefix("export ").withName(TEST_SYMBOL));
    }
	@Test
	def testBody() : Void => {
        assertCompile(new JavaClassNodeBuilder().withName(TEST_SYMBOL).withContent(TEST_BODY), new MagmaClassNodeBuilder().withName(TEST_SYMBOL).withContent(TEST_BODY));
    }
}