import { Test } from org.junit.jupiter.api;

export object Bug1 extends CompiledTest = {
	
	@Test
	def call0() : Void ? CompileException => {
		assertCompile("""
                map(result -> {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                });""", """
                map(result => {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                })""");
	}
	
	@Test
	def call1() : Void ? CompileException => {
		assertCompile("""
                run().map(result -> {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                });""", """
                run().map(result => {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                })""");
	}
	
	@Test
	def call2() : Void ? CompileException => {
		assertCompile("""
                new Application(new Source(SOURCE)).run().map(result -> {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                });""", """
                Application(Source(SOURCE)).run().map(result => {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                })""");
	}
	
	@Test
	def root() : Void ? CompileException => {
		assertCompile("""
                return new Application(new Source(SOURCE)).run().map(result -> {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                });""", """
                return Application(Source(SOURCE)).run().map(result => {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                })""");
	}
	
	@Test
	def lambda_block() : Void ? CompileException => {
		assertCompile("""
                try {
                    return result.$();
                } catch (CompileException e) {
                    return fail(e);
                }""", """
                try {
                \treturn result.$();
                }catch (CompileException e){
                \treturn fail(e);
                }""");
	}
	
	@Test
	def lambda() : Void ? CompileException => {
		assertCompile("""
                result -> {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                }""", """
                result => {
                    try {
                        return result.$();
                    } catch (CompileException e) {
                        return fail(e);
                    }
                }""");
	}
	
	@Test
	def no_lambda() : Void ? CompileException => {
		assertCompile("return new Application(new Source(SOURCE)).run()", "return Application(Source(SOURCE)).run()");
	}
}