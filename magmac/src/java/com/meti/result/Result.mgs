import { Optional } from java.util;
import { Function } from java.util.function;
export class def Result<T, E extends Throwable>() => {
	def $(): T => ;
	def mapValue(mapper : Function<T, R>): Result<R, E> => ;
	def into(mapper : Function<Result<T, E>, R>): R => {
		return mapper.apply(this);
	}
	def match(valueMapper : Function<T, R>, errMapper : Function<E, R>): R => ;
	def mapErr(mapper : Function<E, R>): Result<T, R> => ;
	def findValue(): Optional<T> => ;
}
