import { RootCompiler } from com.meti.compile;
import { * } from com.meti.compile;
import { Err } from com.meti.result;
import { Optional } from java.util;
import { Stream } from java.util.stream;
export class def Application() => 
export object Application {
	def compile(input : String): String => {
		let lines = Strings.splitMembers(input);
		let output = StringBuilder();
		for (Ok[value=let line] :  lines) {
			output.append(compileRoot(line));
		}
		return output.toString();
	}
	private def compileRoot(line : String): String => {
		let stripped = line.strip();
		if (stripped.isEmpty() || stripped.startsWith("package ")) 		return "";
		return streamCompilers(stripped).map(RootCompiler.compile).flatMap(Optional.stream).findFirst().orElseGet(() => Err(CompileException(line))
).$();
	}
	private def streamCompilers(stripped : String): Stream<RootCompiler> => {
		return Stream.of(ImportCompiler(stripped), Optional[Ok[value=ClassCompiler(stripped)]], Optional[Ok[value=RecordCompiler(stripped)]], Optional[Ok[value=InterfaceCompiler(stripped)]]);
	}
}