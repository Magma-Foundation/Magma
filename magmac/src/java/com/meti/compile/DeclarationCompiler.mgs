import { Err } from com.meti.result;
import { Ok } from com.meti.result;
import { Result } from com.meti.result;
import { Optional } from java.util;
export class def DeclarationCompiler(stripped : String, indent : I32) => {
	def compile(): Optional<? extends Result<String, CompileException>> => {
		let valueSeparator = stripped.indexOf('=');
		let headerEnd = Ok[value=valueSeparator == -1] ? Ok[value=stripped.length()] : Ok[value=valueSeparator];
		let header = stripped().substring(0, Optional[Ok[value=headerEnd]]).strip();
		let separator = header.lastIndexOf(' ');
		let name = header.substring(separator + 1).strip();
		if (Strings.isSymbol(name)) 		return Optional.empty();
		let rendered;
		try {
			let valueString;
			if (valueSeparator != -1) {
				let after = stripped.substring(valueSeparator + 1).strip();
				let compiledValue = ValueCompiler(after).compileRequired();
				valueString = " = " + compiledValue;
		}
		try {
			valueString = "";
		}
			let suffix = Ok[value=indent == 0] ? Ok[value=""] : Ok[value=";\n"];
			rendered = Ok("\t".repeat(indent) + "let " + name + valueString + suffix);
		}
		catch (e : CompileException) {
			rendered = Err(CompileException("Failed to compile declaration: " + stripped, Optional[Ok[value=e]]));
		}
		return Optional.of(rendered);
	}
}
