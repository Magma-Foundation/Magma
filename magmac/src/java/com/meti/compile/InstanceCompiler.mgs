import { Err } from com.meti.result;
import { Ok } from com.meti.result;
import { Result } from com.meti.result;
import { Results } from com.meti.result;
import { ArrayList } from java.util;
import { Collections } from java.util;
import { List } from java.util;
import { Optional } from java.util;
export class def InstanceCompiler implements RootCompiler() => let input	def InstanceCompiler(input : String): public => {
		this.input = input;
	}
	def computeKeyword(): String => ;
	def compile(): Optional<Result<String, CompileException>> => {
		let classIndex = input.indexOf(computeKeyword());
		if (classIndex == -1) 		return Optional.empty();
		let classEnd = classIndex + computeKeyword().length();
		let contentStart = input.indexOf('{', Optional[Ok[value=classEnd]]);
		if (contentStart == -1) 		return Optional.empty();
		let name = input.substring(classEnd, Optional[Ok[value=computeNameEnd(input, Optional[Ok[value=contentStart]])]]).strip();
		let modifierString = Ok[value=input.startsWith("public ")] ? Ok[value="export "] : Ok[value=""];
		let contentEnd = input.lastIndexOf('}');
		if (contentEnd == -1) 		return Optional.empty();
		let content = input.substring(contentStart + 1, Optional[Ok[value=contentEnd]]).strip();
		let inputContent = Strings.splitMembers(content);
		let paramString = computeParamString(input);
		if (paramString.isEmpty()) 		return Optional.empty();
		return compileClassMembers(inputContent).mapErr(() => 		let format = "Failed to compile %s body: %s";
		let message = format.formatted(computeKeyword(), Optional[Ok[value=input]]);
		return CompileException(message, Optional[Ok[value=err]]);

).mapValue(() => Optional.of(MagmaLang.renderClass(modifierString, Optional[Ok[value=name]], Optional[Ok[value=output]], Optional[Ok[value=paramString.get()]]))
).into(Results.unwrapOptional);
	}
	def computeNameEnd(input : String, contentStart : int): int => ;
	def computeParamString(input : String): Optional<String> => ;

export object InstanceCompiler implements RootCompiler {
	def compileClassMembers(inputContent : List<String>): Result<ClassMemberResult, CompileException> => {
		let instanceContent = ArrayList();
		let staticContent = ArrayList();
		for (Ok[value=let input] :  inputContent) {
			if (input.isBlank()) let continue		try {
			let result = compileClassMember(input).$();
			instanceContent.addAll(result.instanceMembers());
			staticContent.addAll(result.staticMembers());
		}
		catch (e : CompileException) {
		return Err(e);
		}
		}
		return Ok(ClassMemberResult(instanceContent, Optional[Ok[value=staticContent]]));
	}
	private def compileClassMember(input : String): Result<ClassMemberResult, CompileException> => {
		return MethodCompiler(input).compile().or(() => 		return DeclarationCompiler(input, Optional[Ok[value=0]]).compile().map(() => 		return result.mapValue(() => 		return ClassMemberResult(List.of(value), Optional[Ok[value=Collections.emptyList()]]);

);

);

).orElseGet(() => Err(CompileException("Unknown class member: " + input))
);
	}
}