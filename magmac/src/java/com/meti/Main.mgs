import { IOException } from java.io;
import { Files } from java.nio.file;
import { Paths } from java.nio.file;
import { ArrayList } from java.util;
import { Arrays } from java.util;
import { List } from java.util;
import { Optional } from java.util;
import { Collectors } from java.util.stream;
export class def Main() => {
}
export object Main {
	private def compileImport(stripped : String): Optional<String> => {
		if (!stripped.startsWith("import ")) return Optional.empty();
		let segments = stripped.substring("import ".length());
		let separator = segments.lastIndexOf('.');
		let parent = segments.substring(0, separator);
		let child = segments.substring(separator + 1);
		let rendered = "import { " + child + " };
		from " + parent + ";
		\n";
		return Optional.of(rendered);
	}

	def main(args : String[]): void => {
		try {
            var source = Paths.get(".", "magmac", "src", "java", "com", "meti", "Main.java");
            var target = source.resolveSibling("Main.mgs");
            var input = Files.readString(source);
            var lines = split(input);

            var outputLines = new ArrayList<String>();
            for (var line : lines) {
                var stripped = line.strip();
                if (stripped.startsWith("package ")) continue;
                outputLines.add(compileImport(stripped)
                        .or(() -> compileClass(stripped))
                        .orElse(stripped));
            }

            var output = String.join("", outputLines);
            Files.writeString(target, output);
        };
		catch (IOException e) {
            throw new RuntimeException(e);
        };
	}

	private def compileClass(stripped : String): Optional<String> => {
		let index = stripped.indexOf("class");
		if (index == -1) return Optional.empty();
		let after = stripped.substring(index + "class".length());
		let braceStart = after.indexOf('{');
		let name = after.substring(0, braceStart).strip();
		let inputContent = split(after.substring(braceStart + 1, after.lastIndexOf('}')));
		let instanceMembers = new ArrayList<String>();
		let staticMembers = new ArrayList<String>();
		for (var line : inputContent) {
            var result = compileMethod(line)
                    .orElse(new InstanceResult(line));

            result.instanceValue().ifPresent(instanceMembers::add);
            result.staticValue().ifPresent(staticMembers::add);
        };
		let instanceOutput = renderMagmaFunction(name, renderBlock(instanceMembers, 0), "export class ", 0, "", "");
		let renderedObject = staticMembers.isEmpty() ? "" : "export object " + name + " " + renderBlock(staticMembers, 0);
		return Optional.of(instanceOutput + renderedObject);
	}

	private def renderBlock(indent : ArrayList<String> members, int): String => {
		let blockString = members.stream()
                .map(member -> "\t".repeat(indent + 1) + member + "\n")
                .collect(Collectors.joining());
		return "{\n" + blockString + "\t".repeat(indent) + "};
		\n";
	}

	private def compileMethod(input : String): Optional<Result> => {
		let paramStart = input.indexOf('(');
		if (paramStart == -1) return Optional.empty();
		let paramEnd = input.indexOf(')');
		if (paramEnd == -1) return Optional.empty();
		let inputParamString = input.substring(paramStart + 1, paramEnd);
		String outputParamString;
		if (input.isBlank()) {
            outputParamString = inputParamString;
        };
		else {
            var space = inputParamString.lastIndexOf(' ');
            var type = inputParamString.substring(0, space);
            var name = inputParamString.substring(space + 1);
            outputParamString = name + " : " + type;
        };
		let before = input.substring(0, paramStart);
		let separator = before.lastIndexOf(' ');
		if (separator == -1) return Optional.empty();
		let flagsAndType = before.substring(0, separator);
		let typeSeparator = flagsAndType.lastIndexOf(' ');
		if (typeSeparator == -1) return Optional.empty();
		let modifiers = Arrays.asList(flagsAndType.substring(0, typeSeparator).strip().split(" "));
		let type = flagsAndType.substring(typeSeparator + 1);
		let name = before.substring(separator + 1);
		let contentStart = input.indexOf('{');
		if (contentStart == -1) return Optional.empty();
		let contentEnd = input.lastIndexOf('}');
		if (contentEnd == -1) return Optional.empty();
		let inputContent = input.substring(contentStart + 1, contentEnd);
		let inputContentLines = split(inputContent);
		let output = new ArrayList<String>();
		for (var inputContentLine : inputContentLines) {
            var line = inputContentLine.strip();
            if (!line.isEmpty()) {
                String methodOutput;
                if (!line.startsWith("var ")) {
                    methodOutput = line + ";";
                } else {
                    var valueSeparator = line.indexOf('=');
                    var definitionName = line.substring("var ".length(), valueSeparator).strip();
                    var value = line.substring(valueSeparator + 1).strip();

                    methodOutput = "let " + definitionName + " = " + value + ";";
                }
                output.add(methodOutput);
            }
        };
		let outputContent = renderBlock(output, 1);
		let modifierString = modifiers.contains("private") ? "private " : "";
		let rendered = renderMagmaFunction(name, outputContent, modifierString, 1, ": " + type, outputParamString);
		Result result;
		if (modifiers.contains("static")) {
            result = new StaticResult(rendered);
        };
		else {
            result = new InstanceResult(rendered);
        };
		return Optional.of(result);
	}

	private def renderMagmaFunction(paramString : String name, String content, String modifiers, int indent, String typeString, String): String => {
		return modifiers + "def " + name + "(" + paramString + ")" + typeString + " => " + content;
	}

	def split(input : String): List<String> => {
		let lines = new ArrayList<String>();
		let builder = new StringBuilder();
		let depth = 0;
		let inQuotes = false;
		let wasEscaped = false;
		for (int i = 0; i < input.length(); i++) {
            var c = input.charAt(i);
            if (c == '\'') {
                if (!wasEscaped) {
                    inQuotes = !inQuotes;
                }
            }

            if (inQuotes) {
                builder.append(c);

                if (c == '\\') {
                    wasEscaped = true;
                }
            } else {
                if (c == ';' && depth == 0) {
                    lines.add(builder.toString());
                    builder = new StringBuilder();
                } else if (c == '}' && depth == 1) {
                    depth = 0;
                    builder.append('}');

                    lines.add(builder.toString());
                    builder = new StringBuilder();
                } else {
                    if (c == '{' || c == '(') depth++;
                    if (c == '}' || c == ')') depth--;
                    builder.append(c);
                }
            }
        }

        lines.add(builder.toString());
        lines.removeIf(String::isEmpty);
        return lines;
    }

    interface Result {
        Optional<String> staticValue();

        Optional<String> instanceValue();
    }

    record StaticResult(String value) implements Result {
        @Override
        public Optional<String> staticValue() {
            return Optional.of(value);
        }

        @Override
        public Optional<String> instanceValue() {
            return Optional.empty();
        }
    }

    record InstanceResult(String value) implements Result {
        @Override
        public Optional<String> staticValue() {
            return Optional.empty();
        }

        @Override
        public Optional<String> instanceValue() {
            return Optional.of(value);
        };
	}

}
