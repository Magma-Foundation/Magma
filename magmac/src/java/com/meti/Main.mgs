import { IOException } from java.io;
import { Files } from java.nio.file;
import { Paths } from java.nio.file;
import { * } from java.util;
import { Collectors } from java.util.stream;
export class def Main() => {
	struct Result {
		List<String> staticValue()
		List<String> instanceValue()
	}
	class def MultipleResult(let instanceMembers : List<String>, let staticMembers : List<String>) => {
		@Override
		def staticValue(): List<String> => {
		let staticMembers : return;
	}
		@Override
		def instanceValue(): List<String> => {
		let instanceMembers : return;
	}
	}
	class def Definition(let name : String, let type : Optional<String>, let value : Optional<String>) => {
		String render() {
            var typeString = type.map(type -> " : " + type).orElse("");
            var valueString = value.map(value -> " = " + value).orElse("");
            return "let " + name + typeString + valueString;
        }
	}
	class def StaticResult(let value : List<String>) => {
		StaticResult(String value) {
            this(Collections.singletonList(value));
        }
		@Override
		def staticValue(): List<String> => {
		let value : return;
	}
		@Override
		def instanceValue(): List<String> => {
		return Collections.emptyList();
	}
	}
	class def InstanceResult(let value : List<String>) => {
		InstanceResult(String value) {
            this(Collections.singletonList(value));
        }
		InstanceResult(List<String> value) {
            this.value = value;
        }
		@Override
		def staticValue(): List<String> => {
		return Collections.emptyList();
	}
		@Override
		def instanceValue(): List<String> => {
		let value : return;
	}
	}
}
export object Main {
	
	private def compileImport(let stripped : String): Optional<String> => {
		if (!stripped.startsWith("import ")) return Optional.empty();
		let segments = stripped.substring("import ".length());
		let separator = segments.lastIndexOf('.');
		let parent = segments.substring(0, separator);
		let child = segments.substring(separator + 1);
		let rendered = "import { " + child + " } from " + parent + ";\n";
		return Optional.of(rendered);
	}
	
	def main(): void => {
		try {
		let source = Paths.get(".", "magmac", "src", "java", "com", "meti", "Main.java");
		let target = source.resolveSibling("Main.mgs");
		let input = Files.readString(source);
		let lines = Strings.split(input);
		let outputLines = ArrayList<String>();
		for (let __temp__ = 0; i < lines.size(); i++){
			let line = lines.get(__temp__)
			let stripped = line.strip();
			if (stripped.startsWith("package ")) continue;
			outputLines.add(compileImport(stripped)
                        .or(() -> compileClass(stripped))
                        .orElse(stripped));
		}
		let output = String.join("", outputLines);
		Files.writeString(target, output);
	}
		catch (let e : IOException){
		throw new RuntimeException(e);
	}
	}
	
	private def compileClass(let stripped : String): Optional<String> => {
		let index = stripped.indexOf("class");
		if (index == -1) return Optional.empty();
		let after = stripped.substring(index + "class".length());
		let braceStart = after.indexOf('{');
		let name = after.substring(0, braceStart).strip();
		let inputContent = Strings.split(after.substring(braceStart + 1, after.lastIndexOf('}')));
		let members = getMultipleResult(inputContent, 0);
		let instanceOutput = renderMagmaFunction(name, "export class ", "", "", " => " + renderBlock(members.instanceMembers, 0), "");
		let renderedObject = members.staticMembers.isEmpty() ? "" : "\nexport object " + name + " " + renderBlock(members.staticMembers, 0);
		return Optional.of(instanceOutput + renderedObject);
	}
	
	private def getMultipleResult(let inputContent : List<String>, let indent : I32): MultipleResult => {
		let members = MultipleResult(new ArrayList<>(), new ArrayList<>());
		for (let __temp__ = 0; i < inputContent.size(); i++){
		let line = inputContent.get(__temp__)
		let result = compileInterface(line, indent)
                    .or(() -> compileRecord(line, indent))
                    .or(() -> compileMethod(line, indent))
                    .orElse(new InstanceResult(Collections.singletonList(line)));
		members.instanceMembers.addAll(result.instanceValue());
		members.staticMembers.addAll(result.staticValue());
	}
		let members : return;
	}
	
	private def compileRecord(let line : String, let indent : I32): Result> => {
		if (!line.startsWith("record ")) return Optional.empty();
		let name = line.substring("record ".length(), line.indexOf('('));
		let paramString = line.substring(line.indexOf('(') + 1, line.indexOf(')'));
		let compiledParameters = compileParamString(paramString);
		let split = Strings.split(line.substring(line.indexOf('{') + 1, line.lastIndexOf('}')));
		let results = getMultipleResult(split, indent);
		let renderedContent = renderBlock(results.instanceMembers, indent + 1);
		return Optional.of(new InstanceResult(renderMagmaFunction(name, "class ", "", compiledParameters, " => " + renderedContent, "")));
	}
	
	private def renderBlock(let members : List<String>, let indent : I32): String => {
		let blockString = members.stream()
                .map(member -> "\t".repeat(indent + 1) + member + "\n")
                .collect(Collectors.joining());
		return "{\n" + blockString + "\t".repeat(indent) + "}";
	}
	
	private def compileMethod(let input : String, let indent : I32): Optional<Result> => {
		let paramStart = input.indexOf('(');
		if (paramStart == -1) return Optional.empty();
		let paramEnd = input.indexOf(')');
		if (paramEnd == -1) return Optional.empty();
		let inputParamString = input.substring(paramStart + 1, paramEnd);
		let outputParamString = compileParamString(inputParamString);
		let before = input.substring(0, paramStart);
		let annotationsSeparator = before.indexOf('\n');
		let before1 = annotationsSeparator == -1 ? before : before.substring(annotationsSeparator + 1).strip();
		let annotationsString = annotationsSeparator == -1 ? "" : before.substring(0, annotationsSeparator).strip();
		let separator = before1.lastIndexOf(' ');
		if (separator == -1) return Optional.empty();
		let flagsAndType = before1.substring(0, separator);
		let typeSeparator = flagsAndType.lastIndexOf(' ');
		if (typeSeparator == -1) return Optional.empty();
		let modifiers = Arrays.asList(flagsAndType.substring(0, typeSeparator).strip().split(" "));
		let type = flagsAndType.substring(typeSeparator + 1);
		let name = before1.substring(separator + 1);
		let contentStart = input.indexOf('{');
		let contentEnd = input.lastIndexOf('}');
		if (contentStart == -1 && contentEnd == -1){
		let modifierString = modifiers.contains("private") ? "private " : "";
		let rendered = renderMagmaFunction(name, modifierString, ": " + type, outputParamString, ";", "");
		let result : Result;
		if (modifiers.contains("static"){
		result = new StaticResult(rendered);
	}
		else {
		result = new InstanceResult(rendered);
	}
		return Optional.of(result);
	}
		else {
		let inputContent = input.substring(contentStart + 1, contentEnd);
		let inputContentLines = Strings.split(inputContent);
		let output = ArrayList<String>();
		for (let __temp__ = 0; i < inputContentLines.size(); i++){
			let inputContentLine = inputContentLines.get(__temp__)
			let line = inputContentLine.strip();
			if (!line.isEmpty(){
			let methodOutput = compileStatement(line, indent + 1);
			output.add(methodOutput);
		}
		}
		let outputContent = renderBlock(output, indent + 1);
		let modifierString = modifiers.contains("private") ? "private " : "";
		let rendered = List.of(
                    annotationsString,
                    renderMagmaFunction(name, modifierString, ": " + type, outputParamString, " => " + outputContent, annotationsString)
            );
		let result : Result;
		if (modifiers.contains("static"){
			result = new StaticResult(rendered);
		}
		else {
			result = new InstanceResult(rendered);
		}
		return Optional.of(result);
	}
		else {
		return Optional.empty();
	}
	}
	
	private def compileParamString(let inputParamString : String): String => {
		let lines = inputParamString.split(",");
		return Arrays.stream(lines)
                .map(String::strip)
                .filter(value -> !value.isEmpty())
                .map(Main::compileDeclaration)
                .flatMap(Optional::stream)
                .map(Definition::render)
                .collect(Collectors.joining(", "));
	}
	
	private def compileStatement(let line : String, let indent : I32): String => {
		return compileIf(line, indent)
                .or(() -> compileElse(line, indent))
                .or(() -> compileFor(line, indent))
                .or(() -> compileTry(line, indent))
                .or(() -> compileDeclaration(line)
                        .map(Definition::render)
                        .map(value -> value + ";"))
                .or(() -> compileCatch(line, indent))
                .orElse(line + ";");
	}
	
	private def compileInterface(let line : String, let indent : I32): Optional<Result> => {
		if (!line.startsWith("interface ")) return Optional.empty();
		let start = line.indexOf('{');
		let end = line.lastIndexOf('}');
		let name = line.substring("interface ".length(), start).strip();
		let content = Strings.split(line.substring(start + 1, end));
		let members = getMultipleResult(content, indent);
		return Optional.of(new InstanceResult("struct " + name + " " + renderBlock(members.instanceMembers, indent + 1)));
	}
	
	private def compileFor(let line : String, let indent : I32): Optional<String> => {
		if (!line.startsWith("for ")) return Optional.empty();
		let paramString = line.substring(line.indexOf('(') + 1, line.indexOf(')'));
		let content : String = line.substring(line.indexOf('{') + 1, line.lastIndexOf('}'));
		let splitContent = Strings.split(content);
		let cache = ArrayList<String>();
		for (let __temp__ = 0; i < splitContent.size(); i++){
		let s = splitContent.get(__temp__)
		let statement = compileStatement(s, indent);
		cache.add(statement);
	}
		let separator = paramString.indexOf(':');
		if (separator == -1){
		let statements = renderBlock(cache, indent);
		return Optional.of("for (" + paramString + ")" + statements);
	}
		let substring = paramString.substring(0, separator);
		let declaration = compileDeclaration(substring);
		if (declaration.isEmpty()) return Optional.empty();
		let container = paramString.substring(separator + 1).strip();
		let generatedName = "__temp__";
		cache.add(0, new Definition(declaration.get().name, Optional.empty(), Optional.of(container + ".get(" + generatedName + ")")).render());
		let statements = renderBlock(cache, indent);
		return Optional.of("for (let " + generatedName + " = 0; i < " + container + ".size(); i++)" + statements);
	}
	
	private def compileIf(let line : String, let indent : I32): Optional<String> => {
		if (!line.startsWith("if")) return Optional.empty();
		let substring = line.substring(line.indexOf('(') + 1, line.indexOf(')'));
		let compiled = compileValue(substring);
		let start = line.indexOf('{');
		let end = line.lastIndexOf('}');
		if (end == -1){
		let value = line.substring(line.indexOf(')') + 1);
		let compiledValue = compileValue(value);
		return Optional.of("if (" + compiled + ")" + compiledValue + ";");
	}
		let content = line.substring(start + 1, end);
		let rendered = compileStatements(content, indent);
		return Optional.of("if (" + compiled + ")" + rendered);
	}
	
	private def compileCatch(let line : String, let indent : I32): Optional<String> => {
		if (!line.startsWith("catch ")) return Optional.empty();
		let substring = line.substring(line.indexOf('(') + 1, line.indexOf(')'));
		let compiled = compileDeclaration(substring)
                .map(Definition::render)
                .orElse(substring);
		let content = line.substring(line.indexOf('{') + 1, line.lastIndexOf('}'));
		let rendered = compileStatements(content, indent);
		return Optional.of("catch (" + compiled + ")" + rendered);
	}
	
	private def compileStatements(let content : String, let indent : I32): String => {
		let splitContent = Strings.split(content);
		let builder = ArrayList<String>();
		for (let __temp__ = 0; i < splitContent.size(); i++){
		let s = splitContent.get(__temp__)
		let statement = compileStatement(s, indent);
		builder.add(statement);
	}
		return renderBlock(builder, indent);
	}
	
	private def compileElse(let line : String, let indent : I32): Optional<String> => {
		if (!line.startsWith("else ")) return Optional.empty();
		let blockStart = line.indexOf('{');
		let blockEnd = line.lastIndexOf('}');
		if (blockEnd == -1){
		let value = line.substring("else ".length());
		let compiledValue = compileValue(value);
		return Optional.of("else " + compiledValue);
	}
		let content = line.substring(blockStart + 1, blockEnd);
		let splitContent = Strings.split(content);
		let builder = ArrayList<String>();
		for (let __temp__ = 0; i < splitContent.size(); i++){
		let s = splitContent.get(__temp__)
		let statement = compileStatement(s, indent + 1);
		builder.add(statement);
	}
		return Optional.of("else " + renderBlock(builder, indent));
	}
	
	private def compileTry(let line : String, let indent : I32): Optional<String> => {
		if (!line.startsWith("try ")) return Optional.empty();
		let content = line.substring(line.indexOf('{') + 1, line.lastIndexOf('}'));
		let splitContent = Strings.split(content);
		let builder = ArrayList<String>();
		for (let __temp__ = 0; i < splitContent.size(); i++){
		let s = splitContent.get(__temp__)
		let statement = compileStatement(s, indent + 1);
		builder.add(statement);
	}
		return Optional.of("try " + renderBlock(builder, indent));
	}
	
	private def compileDeclaration(let line : String): Optional<Definition> => {
		let valueSeparator = line.indexOf('=');
		let before = line.substring(0, valueSeparator == -1 ? line.length() : valueSeparator).strip();
		let lastSpace = before.lastIndexOf(' ');
		if (lastSpace == -1){
		return Optional.empty();
	}
		let type = before.substring(0, lastSpace).strip();
		let definitionName = before.substring(lastSpace).strip();
		if (!isAlphaNumeric(definitionName)) return Optional.empty();
		let typeString : Optional<String>;
		if (type.equals("var")) typeString = Optional.empty();
		else {
		typeString = compileType(type);
		if (typeString.isEmpty()) return Optional.empty();
	}
		let value : Optional<String>;
		if (valueSeparator != -1){
		let stripped = line.substring(valueSeparator + 1).strip();
		value = Optional.of(compileValue(stripped));
	}
		else {
		value = Optional.empty();
	}
		return Optional.of(new Definition(definitionName, typeString, value));
	}
	
	private def compileValue(let stripped : String): String => {
		let outputValue : String;
		if (stripped.startsWith("new "){
		outputValue = stripped.substring("new ".length());
	}
		else {
		outputValue = stripped;
	}
		let outputValue : return;
	}
	
	private def isAlphaNumeric(let definitionName : String): boolean => {
		for (int i = 0; i < definitionName.length(){
		let c = definitionName.charAt(i);
		if (!Character.isAlphabetic(c) && !Character.isDigit(c)) return false;
	}
		let true : return;
	}
	
	private def compileType(let type : String): Optional<String> => {
		let genStart = type.indexOf('<');
		let genEnd = type.lastIndexOf('>');
		if (genStart != -1 && genEnd != -1){
		let parent = type.substring(0, genStart).strip();
		let substring = type.substring(genStart + 1, genEnd).strip();
		let parentType = compileType(parent);
		if (parentType.isEmpty()) return Optional.empty();
		return Optional.of(parentType.get() + "<" + substring + ">");
	}
		if (type.equals("int")) return Optional.of("I32");
		if (!isAlphaNumeric(type)) return Optional.empty();
		else return Optional.of(type)
	}
	
	private def renderMagmaFunction(let name : String, let modifiers : String, let typeString : String, let paramString : String, let contentString : String, let annotationsString : String): String => {
		return modifiers + "def " + name + "(" + paramString + ")" + typeString + contentString;
	}
}