import { Attribute } from com.meti.node;
import { IOException } from java.io;
import { Files } from java.nio.file;
import { Paths } from java.nio.file;
import { Collections } from java.util;
import { List } from java.util;
import { Optional } from java.util;
import { Collectors } from java.util.stream;
import { JAVA_ROOT } from com.meti.lang.JavaLang;
import { MAGMA_ROOT } from com.meti.lang.MagmaLang;
class def Main() => {
	def main(args : String[]): void => {
        var source = Paths.get(".", "magmac", "src", "java", "com", "meti", "Main.java");
        try {
            var input = Files.readString(source);
            var target = source.resolveSibling("Main.mgs");
            var outputContent = compile(input);
            var output = String.join("", outputContent);
            Files.writeString(target, output);
        } catch (IOException e) {
            throw new RuntimeException(source.toAbsolutePath().toString(), e);
        }
    }
	def compile(input : String): List<String> => {
        var nodes = JAVA_ROOT.fromString(input)
                .map(Tuple::left)
                .flatMap(tuple -> tuple.apply("roots"))
                .flatMap(Attribute::asListOfNodes)
                .orElse(Collections.emptyList());

        return nodes.stream()
                .map(MAGMA_ROOT::toString)
                .flatMap(Optional::stream)
                .collect(Collectors.toList());
    }
}