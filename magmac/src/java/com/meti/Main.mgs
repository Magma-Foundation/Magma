import { MapNode } from com.meti.node;
import { StringAttribute } from com.meti.node;
import { None } from com.meti.util;
import { Option } from com.meti.util;
import { Some } from com.meti.util;
import { IOException } from java.io;
import { Files } from java.nio.file;
import { Paths } from java.nio.file;
import { ArrayList } from java.util;
import { Collections } from java.util;
import { List } from java.util;
import { Optional } from java.util;
import { Collectors } from java.util.stream;
import { JAVA_ROOT } from com.meti.lang.JavaLang;
import { MAGMA_ROOT } from com.meti.lang.MagmaLang;
import { NodeFactory } from com.meti.node.NodeAttribute;
import { NodeListFactory } from com.meti.node.NodeListAttribute;
import { toNative } from com.meti.util.Options;
class def Main() => {
	def main(args : String[]): void => {
		let source : var = Paths.get(".", "magmac", "src", "java", "com", "meti", "Main.java");
		try {
		let input : var = Files.readString(source);
		let target : var = source.resolveSibling("Main.mgs");
		let outputContent : var = compile(input);
		let output : var = String.join("", outputContent);

            Files.writeString(target, output)
	}
 catch (IOException e) {
            throw new RuntimeException(source.toAbsolutePath().toString(), e);
        }
	}
	def compile(input : String): List<String> => {
		let inputAST : var = JAVA_ROOT.fromString(input)
                .map(Tuple::left)
                .flatMap(tuple -> toNative(tuple.apply("roots")))
                .flatMap(attribute -> toNative(attribute.asListOfNodes()))
                .orElse(Collections.emptyList());
		let outputAST : var = visitChildren(inputAST, new State())
                .map(Tuple::left)
                .orElse(Collections.emptyList());


        return outputAST.stream()
                .map(MAGMA_ROOT::toString)
                .flatMap(Optional::stream)
                .collect(Collectors.toList())
	}
	def transformAST(child, State state : MapNode): State> => {

        System.out.println("\t".repeat(state.depth) + child.type())		let preVisited : var = transformPreVisit(child, state).orElse(new Tuple<>(child, state));
		let withNodes : var = preVisited.left().map(NodeFactory, (node, state1) -> visitChild(state1, node), preVisited.right());
		let withNodeLists : var = withNodes.left().map(NodeListFactory, (node, state1) -> visitChildren(state1, node), withNodes.right());
		let tuple : var = transformPostVisit(withNodeLists.left(), withNodeLists.right()).orElse(withNodeLists);


        System.out.println("\t".repeat(state.depth) + child.type())
        return tuple
	}
	def transformPostVisit(child, State state : MapNode): State>> => {

        if (child.is("block")) {
            return new Some<>(new Tuple<>(child, state.exit()));
        }

        return new None<>()
	}
	def transformPreVisit(child, State state : MapNode): State>> => {

        if (child.is("block")) {
            return new Some<>(new Tuple<>(child, state.enter()));
        }

        if (child.is("method")) {
            return new Some<>(new Tuple<>(child.with("indent", new StringAttribute("\t")), state));
        }

        if (child.is("declaration")) {
            return new Some<>(new Tuple<>(child.with("indent", new StringAttribute("\t\t")), state));
        }

        return new None<>()
	}
	def visitChildren(mapNodes, State state : List<MapNode>): State>> => {
		let list : var = new ArrayList<MapNode>();
		let current : var = state;
		let (MapNode child : mapNodes) {
            var tuple : for = transformAST(child, state);
            list.add(tuple.left());
            current = tuple.right();
        };


        return new Some<>(new Tuple<>(list, current))
	}
	def visitChild(node, State state : MapNode): State>> => {

        return new Some<>(transformAST(node, state))
	}
	def State(depth : int): record => {

        public State() {
            this(0);
        }

        public State enter() {
            return new State(depth + 1);
        }

        public State exit() {
            return new State(depth - 1);
        }
	}
}