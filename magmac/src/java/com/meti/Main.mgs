import { CompileException } from com.meti.compile;
import { IOException } from java.io;
import { Files } from java.nio.file;
import { Path } from java.nio.file;
import { Paths } from java.nio.file;
import { Collectors } from java.util.stream;
export class def Main() => {
}
export object Main {
	def main(args : String[]): Void => {
		let sourceDirectory = Paths.get(".", Optional[Ok[value="magmac"]], Optional[Ok[value="src"]], Optional[Ok[value="java"]]);
		try {
			let sources = Files.walk(sourceDirectory).filter(Files.isRegularFile).filter(() => file.getFileName().toString().endsWith(".java")
).toList();
			for (Ok[value=let source] :  sources) {
				let fileName = source.getFileName().toString();
				let separator = fileName.lastIndexOf('.');
				let name = fileName.substring(0, Optional[Ok[value=separator]]);
				let input = Files.readString(source);
				let target = source.resolveSibling(name + ".mgs");
			Files.writeString(target, Optional[Ok[value=Application.compile(input)]]);
		}
		}
		catch (e : IOException | CompileException) {
			throw RuntimeException(sourceDirectory.toAbsolutePath().toString(), Optional[Ok[value=e]]);
		}
	}
}