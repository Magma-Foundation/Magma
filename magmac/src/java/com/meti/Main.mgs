import { IOException } from java.io;
import { Files } from java.nio.file;
import { Paths } from java.nio.file;
import { ArrayList } from java.util;
import { Arrays } from java.util;
import { List } from java.util;
import { Optional } from java.util;
import { Collectors } from java.util.stream;
export class def Main() => {
}
export object Main {
	private def compileImport(stripped : String): Optional<String> => {
		if (!stripped.startsWith("import ")) return Optional.empty();
		let segments = stripped.substring("import ".length());
		let separator = segments.lastIndexOf('.');
		let parent = segments.substring(0, separator);
		let child = segments.substring(separator + 1);
		let rendered = "import { " + child + " } from " + parent + ";\n";
		return Optional.of(rendered);
	}

	def main(args : String[]): void => {
		try {
			let source = Paths.get(".", "magmac", "src", "java", "com", "meti", "Main.java");
			let target = source.resolveSibling("Main.mgs");
			let input = Files.readString(source);
			let lines = split(input);
			let outputLines = new ArrayList<String>();
			for (var line : lines) {
                var stripped = line.strip();
                if (stripped.startsWith("package ")) continue;
                outputLines.add(compileImport(stripped)
                        .or(() -> compileClass(stripped))
                        .orElse(stripped));
            };
			let output = String.join("", outputLines);
			Files.writeString(target, output);
		}

		catch (let e: IOException){
			throw new RuntimeException(e);
		}

	}

	private def compileClass(stripped : String): Optional<String> => {
		let index = stripped.indexOf("class");
		if (index == -1) return Optional.empty();
		let after = stripped.substring(index + "class".length());
		let braceStart = after.indexOf('{');
		let name = after.substring(0, braceStart).strip();
		let inputContent = split(after.substring(braceStart + 1, after.lastIndexOf('}')));
		let instanceMembers = new ArrayList<String>();
		let staticMembers = new ArrayList<String>();
		for (var line : inputContent) {
            var result = compileMethod(line)
                    .orElse(new InstanceResult(line));

            result.instanceValue().ifPresent(instanceMembers::add);
            result.staticValue().ifPresent(staticMembers::add);
        };
		let instanceOutput = renderMagmaFunction(name, renderBlock(instanceMembers, 0), "export class ", "", "");
		let renderedObject = staticMembers.isEmpty() ? "" : "export object " + name + " " + renderBlock(staticMembers, 0);
		return Optional.of(instanceOutput + renderedObject);
	}

	private def renderBlock(indent : ArrayList<String> members, int): String => {
		let blockString = members.stream()
                .map(member -> "\t".repeat(indent + 1) + member + "\n")
                .collect(Collectors.joining());
		return "{\n" + blockString + "\t".repeat(indent) + "}\n";
	}

	private def compileMethod(input : String): Optional<Result> => {
		let paramStart = input.indexOf('(');
		if (paramStart == -1) return Optional.empty();
		let paramEnd = input.indexOf(')');
		if (paramEnd == -1) return Optional.empty();
		let inputParamString = input.substring(paramStart + 1, paramEnd);
		let outputParamString: String
		if (input.isBlank()) {
            outputParamString = inputParamString;
        };
		else {
            var space = inputParamString.lastIndexOf(' ');
            var type = inputParamString.substring(0, space);
            var name = inputParamString.substring(space + 1);
            outputParamString = name + " : " + type;
        };
		let before = input.substring(0, paramStart);
		let separator = before.lastIndexOf(' ');
		if (separator == -1) return Optional.empty();
		let flagsAndType = before.substring(0, separator);
		let typeSeparator = flagsAndType.lastIndexOf(' ');
		if (typeSeparator == -1) return Optional.empty();
		let modifiers = Arrays.asList(flagsAndType.substring(0, typeSeparator).strip().split(" "));
		let type = flagsAndType.substring(typeSeparator + 1);
		let name = before.substring(separator + 1);
		let contentStart = input.indexOf('{');
		if (contentStart == -1) return Optional.empty();
		let contentEnd = input.lastIndexOf('}');
		if (contentEnd == -1) return Optional.empty();
		let inputContent = input.substring(contentStart + 1, contentEnd);
		let inputContentLines = split(inputContent);
		let output = new ArrayList<String>();
		for (var inputContentLine : inputContentLines) {
            var line = inputContentLine.strip();
            if (!line.isEmpty()) {
                var methodOutput = compileStatement(line, 2);
                output.add(methodOutput);
            }
        };
		let outputContent = renderBlock(output, 1);
		let modifierString = modifiers.contains("private") ? "private " : "";
		let rendered = renderMagmaFunction(name, outputContent, modifierString, ": " + type, outputParamString);
		let result: Result
		if (modifiers.contains("static")) {
            result = new StaticResult(rendered);
        };
		else {
            result = new InstanceResult(rendered);
        };
		return Optional.of(result);
	}

	private def compileStatement(indent : String line, int): String => {
		return compileTry(line, indent)
                .or(() -> compileDeclaration(line))
                .or(() -> compileCatch(line, indent))
                .orElse(line + ";");
	}

	private def compileCatch(indent : String line, int): Optional<String> => {
		if (!line.startsWith("catch ")) return Optional.empty();
		let substring = line.substring(line.indexOf('(') + 1, line.indexOf(')'));
		let compiled = compileDeclaration(substring).orElse(substring);
		let content = line.substring(line.indexOf('{') + 1, line.lastIndexOf('}'));
		let splitContent = split(content);
		let builder = new ArrayList<String>();
		for (String s : splitContent) {
            var statement = compileStatement(s, 0);
            builder.add(statement);
        };
		return Optional.of("catch (" + compiled + ")" + renderBlock(builder, indent));
	}

	private def compileTry(indent : String line, int): Optional<String> => {
		if (!line.startsWith("try ")) return Optional.empty();
		let content = line.substring(line.indexOf('{') + 1, line.lastIndexOf('}'));
		let splitContent = split(content);
		let builder = new ArrayList<String>();
		for (String s : splitContent) {
            var statement = compileStatement(s, 0);
            builder.add(statement);
        };
		return Optional.of("try " + renderBlock(builder, indent));
	}

	private def compileDeclaration(line : String): Optional<String> => {
		let valueSeparator = line.indexOf('=');
		let before = line.substring(0, valueSeparator == -1 ? line.length() : valueSeparator).strip();
		let lastSpace = before.lastIndexOf(' ');
		let type = before.substring(0, lastSpace).strip();
		let definitionName = before.substring(lastSpace).strip();
		if(!isAlphaNumeric(definitionName)) return Optional.empty();
		let typeString: String
		if (type.equals("var")) typeString = "";
		else {
            var compiledType = compileType(type);
            if (compiledType.isPresent()) {
                typeString = ": " + compiledType.get();
            } else {
                return Optional.empty();
            }
        };
		let value: String
		let rendered: String
		if (valueSeparator != -1) {
            value = line.substring(valueSeparator + 1).strip();
            rendered = " = " + value + ";";
        };
		else {
            rendered = "";
        };
		return Optional.of("let " + definitionName + typeString + rendered);
	}

	private def isAlphaNumeric(definitionName : String): boolean => {
		for (int i = 0; i < definitionName.length(); i++) {
            var c = definitionName.charAt(i);
            if (!Character.isAlphabetic(c) && !Character.isDigit(c)) return false;
        };
		let true: return
	}

	private def compileType(type : String): Optional<String> => {
		if(!isAlphaNumeric(type)) return Optional.empty();
		else return Optional.of(type);
	}

	private def renderMagmaFunction(paramString : String name, String content, String modifiers, String typeString, String): String => {
		return modifiers + "def " + name + "(" + paramString + ")" + typeString + " => " + content;
	}

	def split(input : String): List<String> => {
		let lines = new ArrayList<String>();
		let builder = new StringBuilder();
		let depth = 0;
		let inSingleQuotes = false;
		let inDoubleQuotes = false;
		for (int i = 0; i < input.length(); i++) {
            var c = input.charAt(i);
            if (c == '\'') {
                inSingleQuotes = !inSingleQuotes;
            }

            if (c == '\"') {
                inDoubleQuotes = !inDoubleQuotes;
            }

            if (inSingleQuotes) {
                builder.append(c);
            } else if (inDoubleQuotes) {
                builder.append(c);
            } else {
                if (c == ';' && depth == 0) {
                    lines.add(builder.toString());
                    builder = new StringBuilder();
                } else if (c == '}' && depth == 1) {
                    depth = 0;
                    builder.append('}');

                    lines.add(builder.toString());
                    builder = new StringBuilder();
                } else {
                    if (c == '{' || c == '(') {
                        depth++;
                    }
                    if (c == '}' || c == ')') {
                        depth--;
                    }
                    builder.append(c);
                }
            }
        }

        lines.add(builder.toString());
        return lines.stream()
                .map(String::strip)
                .filter(value -> !value.isEmpty())
                .collect(Collectors.toList());
    }

    interface Result {
        Optional<String> staticValue();

        Optional<String> instanceValue();
    }

    record StaticResult(String value) implements Result {
        @Override
        public Optional<String> staticValue() {
            return Optional.of(value);
        }

        @Override
        public Optional<String> instanceValue() {
            return Optional.empty();
        }
    }

    record InstanceResult(String value) implements Result {
        @Override
        public Optional<String> staticValue() {
            return Optional.empty();
        }

        @Override
        public Optional<String> instanceValue() {
            return Optional.of(value);
        };
	}

}
