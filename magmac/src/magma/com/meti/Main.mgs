extern import { DirectorySourceSet } from com.meti.io;
extern import { SourceSet } from com.meti.io;
extern import { IOException } from java.io;
extern import { Files } from java.nio.file;
extern import { Path } from java.nio.file;
extern import { Paths } from java.nio.file;

export object Main = {def main(args : Array<String>) : Void => {
        try {
            run(new DirectorySourceSet(Paths.get("./magmac/src/java")), Paths.get("./magmac/src/magma"));
            run(new DirectorySourceSet(Paths.get("./magmac/test/java")), Paths.get("./magmac/test/magma"));
        } catch (IOException e) {
            //noinspection CallToPrintStackTrace
            e.printStackTrace();
        }
    }def run(sourceSet : SourceSet, targetDirectory : Path) : Void ? IOException => {
        var set = sourceSet.collect();

        for (var source : set) {
            var namespace = source.findNamespace();
            var name = source.findName();

            var input = source.read();
            var output = Compiler.compile(input);

            var parent = namespace.stream().reduce(targetDirectory, Path::resolve, (path, path2) -> path2);
            if(!Files.exists(parent)) Files.createDirectories(parent);

            var target = parent.resolve(name + ".mgs");
            Files.writeString(target, output);
        }
    }
}

export class def Main() => {
}