extern import { RenderableBuilder } from com.meti.java;
extern import { Optional } from java.util;

export class def MagmaMethodBuilder implements RenderableBuilder() => {
	let prefix : String;
	let name : String;
	let type : Optional<String>;
	let content : String;
	let exceptionString : String;
	let parametersString : String;
	def MagmaMethodBuilder() : public => {
        this("", "", Optional.empty(), "", "", "");
    }
	def MagmaMethodBuilder(let prefix : String;, let name : String;, let type : Optional<String>;, let content : String;, let exceptionString : String;) : public => {
        this.prefix = prefix;
        this.name = name;
        this.type = type;
        this.content = content;
        this.exceptionString = exceptionString;
        this.parametersString = parametersString;
    }
	def withPrefix() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, type, content, exceptionString, parametersString);
    }
	def withName() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, type, content, exceptionString, parametersString);
    }
	def withType() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, Optional.of(type), content, exceptionString, parametersString);
    }
	def withContent() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, type, content, exceptionString, parametersString);
    }
	def withExceptionString() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, type, content, exceptionString, parametersString);
    }
	def build() : MagmaMethodNode => {
        return new MagmaMethodNode(prefix, name, parametersString, type, content, exceptionString);
    }
	def withParameters() : MagmaMethodBuilder => {
        return new MagmaMethodBuilder(prefix, name, type, content, exceptionString, parametersString);
    }
}