extern import { Lang } from com.meti;
extern import { Renderable } from com.meti.node;
extern import { Objects } from java.util;

export class def MagmaClassNode implements Renderable() => {
	const prefix : String;
	const name : String;
	const content : String;
	def MagmaClassNode(prefix : String, name : String, content : String) : public => {
        this.prefix = prefix;
        this.name = name;
        this.content = content;
    }
	@Override
	def render() : String => {
        return prefix() + Lang.CLASS_KEYWORD_WITH_SPACE + "def " + name() + "() " + "=> {" + content() + "\n}";
    }
	def prefix() : String => {
        return prefix;
    }
	def name() : String => {
        return name;
    }
	def content() : String => {
        return content;
    }
	@Override
	def equals(obj : Object) : Bool => {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (MagmaClassNode) obj;
        return Objects.equals(this.prefix, that.prefix) &&
               Objects.equals(this.name, that.name) &&
               Objects.equals(this.content, that.content);
    }
	@Override
	def hashCode() : I32 => {
        return Objects.hash(prefix, name, content);
    }
	@Override
	def toString() : String => {
        return "MagmaClassNode[" +
               "prefix=" + prefix + ", " +
               "name=" + name + ", " +
               "content=" + content + ']';
    }
}