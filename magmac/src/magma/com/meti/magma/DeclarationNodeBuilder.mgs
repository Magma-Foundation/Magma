extern import { RenderableBuilder } from com.meti.java;
extern import { Renderable } from com.meti.node;
extern import { Optional } from java.util;

export class def DeclarationNodeBuilder() => {
	def DeclarationNodeBuilder() : public => {
        this("", "", "", Optional.empty());
    }
	def withFlagString() : DeclarationNodeBuilder => {
        return new DeclarationNodeBuilder(flagString, name, type, value);
    }
	def withName() : DeclarationNodeBuilder => {
        return new DeclarationNodeBuilder(flagString, name, type, value);
    }
	def withType() : DeclarationNodeBuilder => {
        return new DeclarationNodeBuilder(flagString, name, type, value);
    }
	def withValue() : DeclarationNodeBuilder => {
        return new DeclarationNodeBuilder(flagString, name, type, Optional.of(value));
    }
	@Override
	def build() : Renderable => {
        return new DeclarationNode(flagString, name, type, value);
    }
}