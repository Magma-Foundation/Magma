extern import { Renderable } from com.meti.node;
extern import { Objects } from java.util;

export class def RecordNode implements com.meti.node.Renderable() => {
	const prefix : String;
	const name : String;
	const body : String;
	def RecordNode() : public => {
        this.prefix = prefix;
        this.name = name;
        this.body = body;
    }
	@Override
	def render() : String => {
        return prefix() + "record " + name() + "()" + body();
    }
	def prefix() : String => {
        return prefix;
    }
	def name() : String => {
        return name;
    }
	def body() : String => {
        return body;
    }
	@Override
	def equals() : Bool => {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (RecordNode) obj;
        return Objects.equals(this.prefix, that.prefix) &&
               Objects.equals(this.name, that.name) &&
               Objects.equals(this.body, that.body);
    }
	@Override
	def hashCode() : I32 => {
        return Objects.hash(prefix, name, body);
    }
	@Override
	def toString() : String => {
        return "RecordNode[" +
               "prefix=" + prefix + ", " +
               "name=" + name + ", " +
               "body=" + body + ']';
    }
}