
import magma.compile.Error_;
import magma.compile.lang.ClassSplitter;
import magma.compile.lang.Generator;
import magma.compile.lang.JavaLang;
import magma.compile.lang.JavaNormalizer;
import magma.compile.lang.MagmaFormatter;
import magma.compile.lang.MagmaGenerator;
import magma.compile.lang.MagmaLang;
import magma.compile.lang.PackageRemover;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;

export def Main => {
	
	export def main : void => {
		try 
		{
			
			let source;
			
			let input;
			
			let target;
			
			let parseResult;
			
			let parseError;
			?()
			
			let root;
			?()
			
			let generated;
			?()
			
			let rule : Rule;
			
			let generateResult;
			
			let generateError;
			?()
			?()}
		catch (let e : IOException){
			//noinspection CallToPrintStackTrace
			?()}}
	
	def print : void => {
		
		let actualContext;
		
		let index;
		
		let context;
		
		let message;
		?()
		
		let causes;
		if
		(?){
			return
			;}
		if
		(?){
			for
			(
			cause : Error_ in 
			?){
				?()}}
		else
		{
			?()}}
	
	def generate : Node => {
		
		let list;
		
		let acc : Node;
		for
		(
		generator : Generator in 
		?){
			
			acc=
			?;}
		return
		;}}