block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "Error_"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ClassSplitter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaFormatter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MethodMigrator"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "Modifier"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ModifierAttacher"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "RootTypeRemover"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "io", "IOException"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Files"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Paths"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Arrays"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Collections"]
			}
		},
		class = {
			name : "Main",
			modifiers : ["public"],
			child : block = {
				children : [
					declaration = {
						name : "CLASS_KEYWORD_WITH_SPACE",
						modifiers : ["public", "static", "final"],
						type : symbol = {
							value : "String"
						},
						value : string = {
							value : "class "
						}
					},
					method = {
						name : "main",
						modifiers : ["public", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "args",
							type : array = {
								child : symbol = {
									value : "String"
								}
							}
						},
						child : block = {
							children : [
								try = {
									child : block = {
										children : [
											declaration = {
												name : "source",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "Paths.get(".", "magmac", "src", "magma", "Main.java")"
												}
											},
											declaration = {
												name : "input",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "Files.readString(source)"
												}
											},
											declaration = {
												name : "target",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "source.resolveSibling("Main.mgs")"
												}
											},
											declaration = {
												name : "parseResult",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "JavaLang.createRootRule().toNode(input)"
												}
											},
											declaration = {
												name : "parseError",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "parseResult.findError()"
												}
											},
											any = {
												value : "parseError.ifPresent(error -> print(error, 0));"
											},
											declaration = {
												name : "root",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "parseResult.create().orElseThrow()"
												}
											},
											any = {
												value : "Files.writeString(source.resolveSibling("Main.input.ast"), root.toString());"
											},
											declaration = {
												name : "generated",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "generate(root)"
												}
											},
											any = {
												value : "Files.writeString(source.resolveSibling("Main.output.ast"), generated.toString());"
											},
											declaration = {
												name : "rule",
												type : symbol = {
													value : "Rule"
												},
												value : any = {
													value : "MagmaLang.createRootRule()"
												}
											},
											declaration = {
												name : "generateResult",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "rule.fromNode(generated)"
												}
											},
											declaration = {
												name : "generateError",
												type : symbol = {
													value : "var"
												},
												value : any = {
													value : "generateResult.findErr()"
												}
											},
											any = {
												value : "generateError.ifPresent(error -> print(error, 0));"
											},
											any = {
												value : "Files.writeString(target, generateResult.findValue().orElseThrow());"
											},
											any = {
												value : ""
											}]
									}
								},
								any = {
									value : "catch (IOException e) {
            //noinspection CallToPrintStackTrace
            e.printStackTrace();
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "print",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "depth",
							modifiers : ["Error_", "e,"],
							type : symbol = {
								value : "int"
							}
						},
						child : block = {
							children : [
								declaration = {
									name : "actualContext",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "e.findContext().orElse("")"
									}
								},
								declaration = {
									name : "index",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "actualContext.indexOf('\n')"
									}
								},
								declaration = {
									name : "context",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "index == -1 ? actualContext : actualContext.substring(0, index)"
									}
								},
								declaration = {
									name : "message",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "e.findMessage()"
									}
								},
								declaration = {
									name : """,
									type : symbol = {
										value : "+"
									},
									value : any = {
										value : "" + s + " " + context))"
									},
									modifiers : ["message.ifPresent(s", "->", "System.err.println("\t".repeat(depth)", "+", "depth"]
								},
								declaration = {
									name : "causes",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "e.findCauses().orElse(Collections.emptyList())"
									}
								},
								any = {
									value : "if (causes.isEmpty()) {
            return;
        }"
								},
								any = {
									value : "if (causes.size() > 1) {
            for (Error_ cause : causes) {
                print(cause, depth);
            }
        }"
								},
								any = {
									value : "else {
            print(causes.get(0), depth + 1);
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "generate",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "Node"
						},
						params : definition = {
							name : "root",
							type : symbol = {
								value : "Node"
							}
						},
						child : block = {
							children : [
								declaration = {
									name : "list",
									type : symbol = {
										value : "var"
									},
									value : any = {
										value : "Arrays.asList(
                new RootTypeRemover("package"),
                new RootTypeRemover("whitespace"),
                new MethodMigrator(),
                new ModifierAttacher(),
                new ClassSplitter(),
                new MagmaFormatter()
        )"
									}
								},
								declaration = {
									name : "acc",
									value : any = {
										value : "root"
									},
									type : symbol = {
										value : "Node"
									}
								},
								any = {
									value : "for (Modifier modifier : list) {
            acc = modifier.generate(acc);
        }"
								},
								any = {
									value : "return acc;"
								},
								any = {
									value : ""
								}]
						}
					},
					any = {
						value : ""
					}]
			}
		},
		any = {
			value : ""
		}]
}