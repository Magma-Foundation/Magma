block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "Error_"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ClassSplitter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaFormatter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MethodMigrator"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "Modifier"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ModifierAttacher"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "RootTypeRemover"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "io", "IOException"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Files"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Paths"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Arrays"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Collections"]
			}
		},
		class = {
			name : "Main",
			modifiers : ["public"],
			child : block = {
				children : [
					declaration = {
						name : "CLASS_KEYWORD_WITH_SPACE",
						modifiers : ["public", "static", "final"],
						type : symbol = {
							value : "String"
						},
						value : string = {
							value : "class "
						}
					},
					method = {
						name : "main",
						modifiers : ["public", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "args",
							type : array = {
								child : symbol = {
									value : "String"
								}
							}
						},
						child : block = {
							children : [
								try = {
									child : block = {
										children : [
											declaration = {
												name : "source",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "".", "magmac", "src", "magma", "Main.java"",
													caller : access = {
														child : "get",
														parent : reference = {
															value : "Paths"
														}
													}
												}
											},
											declaration = {
												name : "input",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "source",
													caller : access = {
														child : "readString",
														parent : reference = {
															value : "Files"
														}
													}
												}
											},
											declaration = {
												name : "target",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : ""Main.mgs"",
													caller : access = {
														child : "resolveSibling",
														parent : reference = {
															value : "source"
														}
													}
												}
											},
											declaration = {
												name : "parseResult",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : ").toNode(input",
													caller : access = {
														child : "createRootRule",
														parent : reference = {
															value : "JavaLang"
														}
													}
												}
											},
											declaration = {
												name : "parseError",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "",
													caller : access = {
														child : "findError",
														parent : reference = {
															value : "parseResult"
														}
													}
												}
											},
											any = {
												value : "parseError.ifPresent(error -> print(error, 0));"
											},
											declaration = {
												name : "root",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : ").orElseThrow(",
													caller : access = {
														child : "create",
														parent : reference = {
															value : "parseResult"
														}
													}
												}
											},
											any = {
												value : "Files.writeString(source.resolveSibling("Main.input.ast"), root.toString());"
											},
											declaration = {
												name : "generated",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "root",
													caller : reference = {
														value : "generate"
													}
												}
											},
											any = {
												value : "Files.writeString(source.resolveSibling("Main.output.ast"), generated.toString());"
											},
											declaration = {
												name : "rule",
												type : symbol = {
													value : "Rule"
												},
												value : invocation = {
													arguments : "",
													caller : access = {
														child : "createRootRule",
														parent : reference = {
															value : "MagmaLang"
														}
													}
												}
											},
											declaration = {
												name : "generateResult",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "generated",
													caller : access = {
														child : "fromNode",
														parent : reference = {
															value : "rule"
														}
													}
												}
											},
											declaration = {
												name : "generateError",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : "",
													caller : access = {
														child : "findErr",
														parent : reference = {
															value : "generateResult"
														}
													}
												}
											},
											any = {
												value : "generateError.ifPresent(error -> print(error, 0));"
											},
											any = {
												value : "Files.writeString(target, generateResult.findValue().orElseThrow());"
											},
											any = {
												value : ""
											}]
									}
								},
								any = {
									value : "catch (IOException e) {
            //noinspection CallToPrintStackTrace
            e.printStackTrace();
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "print",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "depth",
							modifiers : ["Error_", "e,"],
							type : symbol = {
								value : "int"
							}
						},
						child : block = {
							children : [
								declaration = {
									name : "actualContext",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : ").orElse(""",
										caller : access = {
											child : "findContext",
											parent : reference = {
												value : "e"
											}
										}
									}
								},
								declaration = {
									name : "index",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : "'\n'",
										caller : access = {
											child : "indexOf",
											parent : reference = {
												value : "actualContext"
											}
										}
									}
								},
								declaration = {
									name : "context",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : "0, index",
										caller : access = {
											child : "substring",
											parent : reference = {
												value : "index == -1 ? actualContext : actualContext"
											}
										}
									}
								},
								declaration = {
									name : "message",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : "",
										caller : access = {
											child : "findMessage",
											parent : reference = {
												value : "e"
											}
										}
									}
								},
								declaration = {
									name : """,
									type : symbol = {
										value : "+"
									},
									value : reference = {
										value : "" + s + " " + context))"
									},
									modifiers : ["message.ifPresent(s", "->", "System.err.println("\t".repeat(depth)", "+", "depth"]
								},
								declaration = {
									name : "causes",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : ").orElse(Collections.emptyList()",
										caller : access = {
											child : "findCauses",
											parent : reference = {
												value : "e"
											}
										}
									}
								},
								any = {
									value : "if (causes.isEmpty()) {
            return;
        }"
								},
								any = {
									value : "if (causes.size() > 1) {
            for (Error_ cause : causes) {
                print(cause, depth);
            }
        }"
								},
								any = {
									value : "else {
            print(causes.get(0), depth + 1);
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "generate",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "Node"
						},
						params : definition = {
							name : "root",
							type : symbol = {
								value : "Node"
							}
						},
						child : block = {
							children : [
								declaration = {
									name : "list",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										caller : access = {
											child : "asList",
											parent : reference = {
												value : "Arrays"
											}
										},
										arguments : "
                new RootTypeRemover("package"),
                new RootTypeRemover("whitespace"),
                new MethodMigrator(),
                new ModifierAttacher(),
                new ClassSplitter(),
                new MagmaFormatter()
        "
									}
								},
								declaration = {
									name : "acc",
									type : symbol = {
										value : "Node"
									},
									value : reference = {
										value : "root"
									}
								},
								any = {
									value : "for (Modifier modifier : list) {
            acc = modifier.generate(acc);
        }"
								},
								any = {
									value : "return acc;"
								},
								any = {
									value : ""
								}]
						}
					},
					any = {
						value : ""
					}]
			}
		},
		any = {
			value : ""
		}]
}