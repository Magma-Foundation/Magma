block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "Error_"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ClassSplitter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaFormatter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MethodMigrator"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "Modifier"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ModifierAttacher"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "RootTypeRemover"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "io", "IOException"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Files"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Paths"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Arrays"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Collections"]
			}
		},
		class = {
			name : "Main",
			modifiers : ["public"],
			child : block = {
				children : [
					declaration = {
						name : "CLASS_KEYWORD_WITH_SPACE",
						modifiers : ["public", "static", "final"],
						type : symbol = {
							value : "String"
						},
						value : string = {
							value : "class "
						}
					},
					method = {
						name : "main",
						modifiers : ["public", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "args",
							type : array = {
								child : symbol = {
									value : "String"
								}
							}
						},
						child : block = {
							children : [
								any = {
									value : "try {
            var source = Paths.get(".", "magmac", "src", "magma", "Main.java");
            var input = Files.readString(source);
            var target = source.resolveSibling("Main.mgs");

            var parseResult = JavaLang.createRootRule().toNode(input);
            var parseError = parseResult.findError();
            parseError.ifPresent(error -> print(error, 0));

            var root = parseResult.create().orElseThrow();

            Files.writeString(source.resolveSibling("Main.input.ast"), root.toString());
            var generated = generate(root);
            Files.writeString(source.resolveSibling("Main.output.ast"), generated.toString());

            Rule rule = MagmaLang.createRootRule();
            var generateResult = rule.fromNode(generated);
            var generateError = generateResult.findErr();
            generateError.ifPresent(error -> print(error, 0));

            Files.writeString(target, generateResult.findValue().orElseThrow());
        }"
								},
								any = {
									value : "catch (IOException e) {
            //noinspection CallToPrintStackTrace
            e.printStackTrace();
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "print",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "void"
						},
						params : definition = {
							name : "depth",
							modifiers : ["Error_", "e,"],
							type : symbol = {
								value : "int"
							}
						},
						child : block = {
							children : [
								any = {
									value : "var actualContext = e.findContext().orElse("");"
								},
								any = {
									value : "var index = actualContext.indexOf('\n');"
								},
								any = {
									value : "var context = index == -1 ? actualContext : actualContext.substring(0, index);"
								},
								any = {
									value : "var message = e.findMessage();"
								},
								any = {
									value : "message.ifPresent(s -> System.err.println("\t".repeat(depth) + depth + " = " + s + " " + context));"
								},
								any = {
									value : "var causes = e.findCauses().orElse(Collections.emptyList());"
								},
								any = {
									value : "if (causes.isEmpty()) {
            return;
        }"
								},
								any = {
									value : "if (causes.size() > 1) {
            for (Error_ cause : causes) {
                print(cause, depth);
            }
        }"
								},
								any = {
									value : "else {
            print(causes.get(0), depth + 1);
        }"
								},
								any = {
									value : ""
								}]
						}
					},
					method = {
						name : "generate",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "Node"
						},
						params : definition = {
							name : "root",
							type : symbol = {
								value : "Node"
							}
						},
						child : block = {
							children : [
								any = {
									value : "var list = Arrays.asList(
                new RootTypeRemover("package"),
                new RootTypeRemover("whitespace"),
                new MethodMigrator(),
                new ModifierAttacher(),
                new ClassSplitter(),
                new MagmaFormatter()
        );"
								},
								any = {
									value : "Node acc = root;"
								},
								any = {
									value : "for (Modifier modifier : list) {
            acc = modifier.generate(acc);
        }"
								},
								any = {
									value : "return acc;"
								},
								any = {
									value : ""
								}]
						}
					},
					any = {
						value : ""
					}]
			}
		},
		any = {
			value : ""
		}]
}