block = {
	children : [
		package = {
			internal : namespace = {
				namespace : ["magma"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "Error_"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ClassSplitter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaFormatter"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaLang"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MethodMigrator"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "Modifier"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ModifierAttacher"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "lang", "RootTypeRemover"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "io", "IOException"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Files"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "nio", "file", "Paths"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Arrays"]
			}
		},
		import = {
			external : namespace = {
				namespace : ["java", "util", "Collections"]
			}
		},
		class = {
			name : "Main",
			modifiers : ["public"],
			child : block = {
				children : [
					declaration = {
						name : "CLASS_KEYWORD_WITH_SPACE",
						modifiers : ["public", "static", "final"],
						type : symbol = {
							value : "String"
						},
						value : string = {
							value : "class "
						}
					},
					method = {
						name : "main",
						modifiers : ["public", "static"],
						type : symbol = {
							value : "void"
						},
						params : [
							definition = {
								name : "args",
								type : array = {
									child : symbol = {
										value : "String"
									}
								}
							}
						],
						child : block = {
							children : [
								try = {
									child : block = {
										children : [
											declaration = {
												name : "source",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													caller : access = {
														child : "get",
														parent : symbol = {
															value : "Paths"
														}
													},
													arguments : [
														string = {
															value : "."
														},
														string = {
															value : "magmac"
														},
														string = {
															value : "src"
														},
														string = {
															value : "magma"
														},
														string = {
															value : "Main.java"
														}
													]
												}
											},
											declaration = {
												name : "input",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "source"
														}
													],
													caller : access = {
														child : "readString",
														parent : symbol = {
															value : "Files"
														}
													}
												}
											},
											declaration = {
												name : "target",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : [
														string = {
															value : "Main.mgs"
														}
													],
													caller : access = {
														child : "resolveSibling",
														parent : symbol = {
															value : "source"
														}
													}
												}
											},
											declaration = {
												name : "parseResult",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "input"
														}
													],
													caller : access = {
														child : "toNode",
														parent : invocation = {
															caller : access = {
																child : "createRootRule",
																parent : symbol = {
																	value : "JavaLang"
																}
															}
														}
													}
												}
											},
											declaration = {
												name : "parseError",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													caller : access = {
														child : "findError",
														parent : symbol = {
															value : "parseResult"
														}
													}
												}
											},
											invocation = {
												caller : access = {
													child : "ifPresent",
													parent : symbol = {
														value : "parseError"
													}
												},
												arguments : [
													lambda = {
														param-name : "error",
														value : invocation = {
															caller : symbol = {
																value : "print"
															},
															arguments : [
																symbol = {
																	value : "error"
																},
																number = {
																	value : "0"
																}
															]
														}
													}
												]
											},
											declaration = {
												name : "root",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													caller : access = {
														child : "orElseThrow",
														parent : invocation = {
															caller : access = {
																child : "create",
																parent : symbol = {
																	value : "parseResult"
																}
															}
														}
													}
												}
											},
											invocation = {
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													invocation = {
														arguments : [
															string = {
																value : "Main.input.ast"
															}
														],
														caller : access = {
															child : "resolveSibling",
															parent : symbol = {
																value : "source"
															}
														}
													},
													invocation = {
														caller : access = {
															child : "toString",
															parent : symbol = {
																value : "root"
															}
														}
													}
												]
											},
											declaration = {
												name : "generated",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													caller : symbol = {
														value : "generate"
													},
													arguments : [
														symbol = {
															value : "root"
														}
													]
												}
											},
											invocation = {
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													invocation = {
														arguments : [
															string = {
																value : "Main.output.ast"
															}
														],
														caller : access = {
															child : "resolveSibling",
															parent : symbol = {
																value : "source"
															}
														}
													},
													invocation = {
														caller : access = {
															child : "toString",
															parent : symbol = {
																value : "generated"
															}
														}
													}
												]
											},
											declaration = {
												name : "rule",
												type : symbol = {
													value : "Rule"
												},
												value : invocation = {
													caller : access = {
														child : "createRootRule",
														parent : symbol = {
															value : "MagmaLang"
														}
													}
												}
											},
											declaration = {
												name : "generateResult",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "generated"
														}
													],
													caller : access = {
														child : "fromNode",
														parent : symbol = {
															value : "rule"
														}
													}
												}
											},
											declaration = {
												name : "generateError",
												type : symbol = {
													value : "var"
												},
												value : invocation = {
													caller : access = {
														child : "findErr",
														parent : symbol = {
															value : "generateResult"
														}
													}
												}
											},
											invocation = {
												caller : access = {
													child : "ifPresent",
													parent : symbol = {
														value : "generateError"
													}
												},
												arguments : [
													lambda = {
														param-name : "error",
														value : invocation = {
															caller : symbol = {
																value : "print"
															},
															arguments : [
																symbol = {
																	value : "error"
																},
																number = {
																	value : "0"
																}
															]
														}
													}
												]
											},
											invocation = {
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													symbol = {
														value : "target"
													},
													invocation = {
														caller : access = {
															child : "orElseThrow",
															parent : invocation = {
																caller : access = {
																	child : "findValue",
																	parent : symbol = {
																		value : "generateResult"
																	}
																}
															}
														}
													}
												]
											}
										]
									}
								},
								catch = {
									definition : definition = {
										name : "e",
										type : symbol = {
											value : "IOException"
										}
									},
									child : block = {
										children : [
											comment = {
												value : "noinspection CallToPrintStackTrace"
											},
											invocation = {
												caller : access = {
													child : "printStackTrace",
													parent : symbol = {
														value : "e"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					method = {
						name : "print",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "void"
						},
						params : [
							definition = {
								name : "e",
								type : symbol = {
									value : "Error_"
								}
							},
							definition = {
								name : "depth",
								type : symbol = {
									value : "int"
								}
							}
						],
						child : block = {
							children : [
								declaration = {
									name : "actualContext",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : [
											string = {
												value : ""
											}
										],
										caller : access = {
											child : "orElse",
											parent : invocation = {
												caller : access = {
													child : "findContext",
													parent : symbol = {
														value : "e"
													}
												}
											}
										}
									}
								},
								declaration = {
									name : "index",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : [
											any = {
												value : "'\n'"
											}
										],
										caller : access = {
											child : "indexOf",
											parent : symbol = {
												value : "actualContext"
											}
										}
									}
								},
								declaration = {
									name : "context",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : [
											number = {
												value : "0"
											},
											symbol = {
												value : "index"
											}
										],
										caller : access = {
											child : "substring",
											parent : any = {
												value : "index == -1 ? actualContext : actualContext"
											}
										}
									}
								},
								declaration = {
									name : "message",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										caller : access = {
											child : "findMessage",
											parent : symbol = {
												value : "e"
											}
										}
									}
								},
								declaration = {
									name : """,
									type : symbol = {
										value : "+"
									},
									value : any = {
										value : "" + s + " " + context))"
									},
									modifiers : ["message.ifPresent(s", "->", "System.err.println("\t".repeat(depth)", "+", "depth"]
								},
								declaration = {
									name : "causes",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										arguments : [
											invocation = {
												caller : access = {
													child : "emptyList",
													parent : symbol = {
														value : "Collections"
													}
												}
											}
										],
										caller : access = {
											child : "orElse",
											parent : invocation = {
												caller : access = {
													child : "findCauses",
													parent : symbol = {
														value : "e"
													}
												}
											}
										}
									}
								},
								any = {
									value : "if (causes.isEmpty()) {
            return;
        }"
								},
								any = {
									value : "if (causes.size() > 1) {
            for (Error_ cause : causes) {
                print(cause, depth);
            }
        }"
								},
								any = {
									value : "else {
            print(causes.get(0), depth + 1);
        }"
								}
							]
						}
					},
					method = {
						name : "generate",
						modifiers : ["private", "static"],
						type : symbol = {
							value : "Node"
						},
						params : [
							definition = {
								name : "root",
								type : symbol = {
									value : "Node"
								}
							}
						],
						child : block = {
							children : [
								declaration = {
									name : "list",
									type : symbol = {
										value : "var"
									},
									value : invocation = {
										caller : access = {
											child : "asList",
											parent : symbol = {
												value : "Arrays"
											}
										},
										arguments : [
											invocation = {
												caller : any = {
													value : "new RootTypeRemover"
												},
												arguments : [
													string = {
														value : "package"
													}
												]
											},
											invocation = {
												caller : any = {
													value : "new RootTypeRemover"
												},
												arguments : [
													string = {
														value : "whitespace"
													}
												]
											},
											invocation = {
												caller : any = {
													value : "new MethodMigrator"
												}
											},
											invocation = {
												caller : any = {
													value : "new ModifierAttacher"
												}
											},
											invocation = {
												caller : any = {
													value : "new ClassSplitter"
												}
											},
											invocation = {
												caller : any = {
													value : "new MagmaFormatter"
												}
											}
										]
									}
								},
								declaration = {
									name : "acc",
									type : symbol = {
										value : "Node"
									},
									value : symbol = {
										value : "root"
									}
								},
								any = {
									value : "for (Modifier modifier : list) {
            acc = modifier.generate(acc);
        }"
								},
								any = {
									value : "return acc;"
								}
							]
						}
					}
				]
			}
		}
	]
}