block = {
	children : [
		package = {
			namespace : []
		},
		import = {
			value : "magma.api.Results;"
		},
		import = {
			value : "magma.compile.CompileException;"
		},
		import = {
			value : "magma.compile.lang.ClassSplitter;"
		},
		import = {
			value : "magma.compile.lang.JavaLang;"
		},
		import = {
			value : "magma.compile.lang.MagmaLang;"
		},
		import = {
			value : "magma.compile.lang.MethodRenamer;"
		},
		import = {
			value : "magma.compile.lang.Modifier;"
		},
		import = {
			value : "magma.compile.lang.RootTypeRemover;"
		},
		import = {
			value : "magma.compile.rule.Node;"
		},
		import = {
			value : "magma.compile.rule.Rule;"
		},
		import = {
			value : "java.io.IOException;"
		},
		import = {
			value : "java.nio.file.Files;"
		},
		import = {
			value : "java.nio.file.Paths;"
		},
		import = {
			value : "java.util.Arrays;"
		},
		class = {
			name : "Main",
			modifiers : ["public"],
			content : block = {
				children : [
					declaration = {
						name : "CLASS_KEYWORD_WITH_SPACE",
						type : "String",
						modifiers : ["public","static","final"],
						value : ""class ";"
					},
					method = {
						name : "main",
						params : "String[] args",
						type : "void",
						modifiers : ["public","static"],
						content : block = {
							children : [
								any = {
									content : "try {
            var source = Paths.get(".", "magmac", "src", "magma", "Main.java");
            var input = Files.readString(source);
            var target = source.resolveSibling("Main.mgs");
            var root = JavaLang.createRootRule().toNode(input).create().orElseThrow();

            Files.writeString(source.resolveSibling("Main.input.ast"), root.toString());
            var generated = generate(root);
            Files.writeString(source.resolveSibling("Main.output.ast"), generated.toString());

            Rule rule = MagmaLang.createRootRule();
            Files.writeString(target, Results.unwrap(rule.fromNode(generated)));
        } catch (IOException e) {
            //noinspection CallToPrintStackTrace
            e.printStackTrace();
        } catch (CompileException e) {
            print(e, 0);
        }
    }

    private static void print(CompileException e, int depth) {
        var message = e.getMessage();"
								},
								any = {
									content : "System.err.println("\t".repeat(depth) + message);"
								},
								any = {
									content : "var cause = e.getCause();"
								},
								any = {
									content : "if (cause == null) {
            System.err.println("\n---\n" + e.content + "\n---\n");
        } else {
            if (cause instanceof CompileException cast) {
                print(cast, depth + 1);
            } else {
                cause.printStackTrace();
            }
        }
    }

    private static Node generate(Node root) {
        var list = Arrays.asList(
                new RootTypeRemover("package"),
                new RootTypeRemover("whitespace"),
                new MethodRenamer(),
                new ClassSplitter()
        );"
								},
								any = {
									content : "Node acc = root;"
								},
								any = {
									content : "for (Modifier modifier : list) {
            acc = modifier.generate(acc);
        }
        return acc;"
								},
								any = {
									content : ""
								}]
						}
					}]
			}
		}]
}