import magma.api.collect.Map;
import magma.api.option.Option;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileException;
import magma.java.JavaMap;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import static magma.java.JavaResults.$;
import static magma.java.JavaResults.$Void;
export class def Main() => {
	public static final let CONFIG_PATH : Path = Paths.get(".", "config.json");
	public static def main(this, args : String[]) : void => {
		let mut result : var = run();
		if(result.isPresent())
		{
			//noinspection CallToPrintStackTrace
			result.orElsePanic().printStackTrace();
		}
	}
	private static def run(this) : Option<CompileException> => {
		return $Void(() => {
			let mut configuration : var = $(buildConfiguration().mapErr(CompileException.new));
			$(Application(configuration).run());
		});
	}
	private static def buildConfiguration(this) : Result<Configuration, IOException> => {
		return readConfiguration().mapValue(() => {
			let mut sourceDirectory : var = Paths.get(map.get("sources").orElsePanic());
			let mut debugDirectory : var = Paths.get(map.get("debug").orElsePanic());
			let mut targetDirectory : var = Paths.get(map.get("targets").orElsePanic());
			return Configuration(sourceDirectory, targetDirectory, debugDirectory);
		});
	}
	private static def readConfiguration(this) : Result<Map<String, String>, IOException> => {
		try 
		{
			let mut absolutePath : var = CONFIG_PATH.toAbsolutePath();
			if(Files.exists(CONFIG_PATH))
			{
				System.out.println("Found configuration file at '" + absolutePath + "'.");
			}
			else
			{
				System.out.printf("Configuration file did not exist and will be created at '%s'.%n", absolutePath);
				Files.writeString(CONFIG_PATH, "{}");
			}
			let mut configurationString : var = Files.readString(CONFIG_PATH);
			return Ok(parseConfigurationFromJSON(configurationString));
		}
		catch (e : IOException){
			return Err(e);
		}
	}
	private static def parseConfigurationFromJSON(this, configurationJSON : String) : Map<String, String> => {
		let mut map : var = HashMap();
		let mut stripped : var = configurationJSON.strip();
		let mut lines : var = stripped.substring(1, stripped.length()-1).split(",");
		for(line : String in lines){
			let mut separator : var = line.indexOf(":");
			let mut left : var = line.substring(0, separator).strip();
			let mut right : var = line.substring(separator+1).strip();
			let mut propertyName : var = left.substring(1, left.length()-1);
			let mut propertyValue : var = right.substring(1, right.length()-1);
			map.put(propertyName, propertyValue);
		}
		System.out.println("Parsed configuration.");
		System.out.println(map);
		return JavaMap(map);
	}
}
