import magma.api.json.CompoundJSONParser;
import magma.api.json.JSONArrayParser;
import magma.api.json.JSONObjectParser;
import magma.api.json.JSONStringParser;
import magma.api.json.JSONValue;
import magma.api.json.LazyJSONParser;
import magma.api.option.Option;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileException;
import magma.java.JavaList;
import magma.java.JavaResults;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import static magma.java.JavaResults.$Void;
export object Main {
	public let CONFIG_PATH : Path = Paths.get(".", "config.json");
	public def main(args : String[]) => {
		let mut result = run();
		if(result.isPresent())
		{
			//noinspection CallToPrintStackTrace
			result.orElsePanic().printStackTrace();
		}
	}
	def run() => $Void(() => {
		let mut configuration = JavaResults.$Result(buildConfiguration().mapErr(CompileException.new));
		JavaResults.$Option(Application(configuration).run());
	});
	def buildConfiguration() => {
		try 
		{
			let mut absolutePath = CONFIG_PATH.toAbsolutePath();
			if(Files.exists(CONFIG_PATH))
			{
				System.out.printf("Found configuration file at '%s'.%n", absolutePath);
			}
			else
			{
				System.out.printf("Configuration file did not exist and will be created at '%s'.%n", absolutePath);
				Files.writeString(CONFIG_PATH, "{}");
			}
			let mut configurationString = Files.readString(CONFIG_PATH);
			let mut valueParser = LazyJSONParser();
			valueParser.setValue(CompoundJSONParser(JavaList(List.of(JSONStringParser(), JSONArrayParser(valueParser), JSONObjectParser(valueParser)))));
			let mut parsedOption = valueParser.parse(configurationString);
			if(parsedOption.isEmpty())
			{
				return Err(IOException("Failed to parse configuration: "+configurationString));
			}
			let mut parsed = parsedOption.orElsePanic();
			System.out.println("Parsed configuration.");
			System.out.println(parsed);
			let mut builds = parsed.find("builds").orElsePanic();
			let mut map = builds.stream().orElsePanic().map(() => {
				let mut sources = buildSet(build, "sources");
				let mut targets = buildSet(build, "targets");
				let mut debug = Path.of(build.find("debug").orElsePanic().findValue().orElsePanic());
				return Build(sources, targets, debug);
			}).collect(JavaList.collecting());
			return Ok(Configuration(map));
		}
		catch (e : IOException){
			return Err(e);
		}
	}
	def buildSet(build : JSONValue, key : String) => {
		let mut root = build.find(key).orElsePanic();
		let mut location = root.find("location").orElsePanic().findValue().orElsePanic();
		let mut platform = root.find("platform").orElsePanic().findValue().orElsePanic();
		return BuildSet(Path.of(location), platform);
	}
}