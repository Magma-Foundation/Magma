
import magma.compile.rule.ContextRule;
import magma.compile.rule.EmptyRule;
import magma.compile.rule.LazyRule;
import magma.compile.rule.OptionalRule;
import magma.compile.rule.OrRule;
import magma.compile.rule.Rule;
import magma.compile.rule.SymbolRule;
import magma.compile.rule.TypeRule;
import magma.compile.rule.split.FirstRule;
import magma.compile.rule.split.LastRule;
import magma.compile.rule.split.ParamSplitter;
import magma.compile.rule.split.SplitMultipleRule;
import magma.compile.rule.split.Splitter;
import magma.compile.rule.text.LeftRule;
import magma.compile.rule.text.RightRule;
import magma.compile.rule.text.StripRule;
import magma.compile.rule.text.extract.ExtractNodeRule;
import magma.compile.rule.text.extract.ExtractStringRule;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
public class def JavaLang() => {
	public static def createRootRule() : Rule => {
		return Lang.createBlock(createRootMemberRule());
	}
	private static def createRootMemberRule() : OrRule => {
		namespace = Lang.createNamespaceRule();
		importRule = Lang.createImportRule(namespace);
		member = LazyRule();
		statement = LazyRule();
		definition = JavaDefinitionHeaderFactory.createDefinitionHeaderRule();
		value = createValueRule(member, statement);
		initStatements(definition, statement, member, value);
		contents = LazyRule();
		initContentMember(member, contents, definition, statement, value);
		contents.setRule(OrRule(List.of(createContentRule("class", member, Lang.createTypeRule(), definition), createContentRule("record", member, Lang.createTypeRule(), definition), createContentRule("interface", member, Lang.createTypeRule(), definition))));
		return OrRule(List.of(TypeRule("package", LeftRule("package ", RightRule(ExtractNodeRule("internal", namespace), ";"))), importRule, contents, Lang.createBlockCommentRule()));
	}
	private static def initContentMember(contentMember : LazyRule, contents : Rule, definition : Rule, statement : Rule, value : Rule) : void => {
		content = StripRule(RightRule(ExtractNodeRule("child", Lang.createBlock(statement)), "}"));
		withoutThrows = ContextRule("No throws statement present.", StripRule(RightRule(Lang.createParamsRule(definition), ")")));
		thrownValues = SplitMultipleRule(SplitThrows(), ", ", "thrown", StripRule(Lang.createTypeRule()));
		withThrows = ContextRule("Throws statement present.", LastRule(withoutThrows, "throws ", thrownValues));
		maybeThrows = OrRule(List.of(withThrows, withoutThrows));
		withValue = ContextRule("Value present.", FirstRule(maybeThrows, "{", content));
		withoutValue = ContextRule("No value present.", RightRule(maybeThrows, ";"));
		maybeValue = OrRule(List.of(withValue, withoutValue));
		definitionNode = ExtractNodeRule("definition", TypeRule("definition", definition));
		methodRule = TypeRule("method", FirstRule(definitionNode, "(", maybeValue));
		contentMember.setRule(OrRule(List.of(Lang.createEmptyStatementRule(), Lang.createBlockCommentRule(), methodRule, Lang.createDeclarationRule(definition, value), Lang.createDefinitionRule(definition), contents)));
	}
	private static def initStatements(definition : Rule, statement : LazyRule, classMember : LazyRule, value : LazyRule) : void => {
		rules = List.of(Lang.createBlockCommentRule(), Lang.createCommentRule(), Lang.createKeywordRule("break"), Lang.createKeywordRule("continue"), Lang.createReturnRule(value), Lang.createIfRule("if", value, statement), Lang.createElseRule(statement), Lang.createIfRule("while", value, statement), Lang.createForRule(definition, value, statement, ":"), Lang.createTryRule(statement), Lang.createCatchRule(definition, statement), Lang.createThrowRule(value), Lang.createDeclarationRule(definition, value), Lang.createAssignmentRule(value), TypeRule("invocation", RightRule(Lang.createInvocationRule(value), ";")), Lang.createEmptyStatementRule(), Lang.createPostIncrementRule(value), Lang.createPostDecrementRule(value));
		copy = ArrayList(rules);
		copy.add(TypeRule("constructor", RightRule(createConstructorRule(value, classMember), ";")));
		statement.setRule(OrRule(copy));
	}
	private static def createContentRule(keyword : String, classMember : LazyRule, type : LazyRule, definition : Rule) : TypeRule => {
		modifiers = Lang.createModifiersRule();
		block = ExtractNodeRule("child", Lang.createBlock(classMember));
		name = StripRule(SymbolRule(ExtractStringRule("name")));
		typeParam = TypeRule("type-param", StripRule(SymbolRule(ExtractStringRule("value"))));
		typeParams = SplitMultipleRule(ParamSplitter(), ", ", "type-params", typeParam);
		withTypeParams = StripRule(FirstRule(name, "<", RightRule(typeParams, ">")));
		maybeTypeParams = OptionalRule("type-params", withTypeParams, name);
		params = Lang.createParamsRule(definition);
		withParams = FirstRule(maybeTypeParams, "(", StripRule(RightRule(params, ")")));
		maybeParams = OptionalRule("params", withParams, maybeTypeParams);
		withExtends = FirstRule(maybeParams, " extends ", StripRule(ExtractStringRule("superclass")));
		maybeExtends = OptionalRule("extends", withExtends, maybeParams);
		withImplements = FirstRule(maybeExtends, " implements ", ExtractNodeRule("interface", type));
		maybeImplements = OptionalRule("implements", withImplements, maybeExtends);
		withoutModifiers = FirstRule(maybeImplements, "{", RightRule(block, "}"));
		return TypeRule(keyword, FirstRule(modifiers, keyword+" ", withoutModifiers));
	}
	private static def createValueRule(classMember : LazyRule, statement : Rule) : LazyRule => {
		value = LazyRule();
		value.setRule(OrRule(List.of(Lang.createStringRule(), Lang.createCharRule(), Lang.createSymbolRule(), Lang.createNumberRule(), createLambdaRule(value, statement), createConstructorRule(value, classMember), Lang.createTernaryRule(value), Lang.createInvocationRule(value), Lang.createAccessRule("access", ".", value), Lang.createAccessRule("method-reference", "::", value), Lang.createOperatorRule("and", "&&", value), Lang.createOperatorRule("equals", "==", value), Lang.createOperatorRule("not-equals", "!=", value), Lang.createOperatorRule("add", "+", value), Lang.createOperatorRule("subtract", "-", value), Lang.createOperatorRule("greater-than-or-equals", ">=", value), Lang.createOperatorRule("greater-than", ">", value), Lang.createOperatorRule("or", "||", value), Lang.createOperatorRule("less-than", "<", value), Lang.createNotRule(value))));
		return value;
	}
	private static def createLambdaRule(value : Rule, statement : Rule) : Rule => {
		child = SymbolRule(ExtractStringRule("param-name"));
		left = StripRule(OrRule(List.of(LeftRule("()", EmptyRule("param-name")), child)));
		maybeValue = OrRule(List.of(StripRule(LeftRule("{", RightRule(Lang.createBlock(statement), "}"))), value));
		right = StripRule(ExtractNodeRule("child", maybeValue));
		return TypeRule("lambda", FirstRule(left, "->", right));
	}
	private static def createConstructorRule(value : Rule, classMember : Rule) : Rule => {
		arguments = OrRule(List.of(SplitMultipleRule(ParamSplitter(), ", ", "arguments", StripRule(value))));
		caller = ExtractNodeRule("caller", value);
		withGenerics = OrRule(List.of(FirstRule(caller, "<", ExtractStringRule("temp")), caller));
		before = RightRule(InvocationStartRule(withGenerics, arguments), ")");
		child = OrRule(List.of(FirstRule(StripRule(before), "{", RightRule(Lang.createBlock(classMember), "}")), before));
		return TypeRule("constructor", StripRule(LeftRule("new ", child)));
	}
	private static class def SplitThrows() => {
		public def split(input : String) : List<String> => {
			return Arrays.asList(input.split(","));
		}
	}
}
