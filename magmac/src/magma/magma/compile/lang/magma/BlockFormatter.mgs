import magma.api.Tuple;
import magma.api.contain.List;
import magma.api.contain.stream.Streams;
import magma.api.option.Options;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.compile.rule.text.StripRule;
import magma.java.JavaList;
export object BlockFormatter {
	def indentChildren(children : List<Node>, state : State) => Streams.rangeTo(children.size()).extend(children.get).map(Options.invertRight).flatMap(Streams.fromOption).map(() => attachAfterChild(child, state)).collect(JavaList.collecting());
	def attachAfterChild(child : Tuple<Integer, Node>, state : State) => {
		let mut depth = state.computeDepth();
		let mut childIndent = "\n" + "\t".repeat(depth-1);
		let mut index = child.left();
		if(index==0&&depth==1)
		return child.right();
		return child.right().withString(StripRule.DEFAULT_LEFT, childIndent);
	}
	def attachAfterChildren(node : Node, depth : int) => {
		if(depth<=1)
		return node;
		let mut count = depth-2;
		let mut endIndent = "\n" + "\t".repeat(count);
		return node.withString("after-children", endIndent);
	}
}
export class def BlockFormatter() => {
	public def preVisit(node : Node, state : State) => Ok(Tuple(node, state.enter()));
	public def postVisit(node : Node, state : State) => {
		let mut withChildren = node.mapNodes("children", () => indentChildren(children, state));
		let mut exited = state.exit();
		let mut depth = state.computeDepth();
		let mut withAfterChildren = attachAfterChildren(withChildren, depth);
		let mut tuple = Tuple(withAfterChildren, exited);
		return Ok(tuple);
	}
	implements Visitor;
}