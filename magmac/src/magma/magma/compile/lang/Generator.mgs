import magma.api.Tuple;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.Attributes;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.rule.Node;
import java.util.ArrayList;
export class def Generator() => {
	def generateAttribute(attribute : Attribute, depth : int) : Tuple<Attribute, Integer> => {
		nodeList : var =attribute.asNodeList();
		if(nodeList.isPresent()){
			list : var =ArrayList();
			current : var =depth;
			for(node : var in nodeList.get()){
				nodeIntegerTuple : Tuple<Node, Integer> =generateWithDepth(node, current);
				list.add(nodeIntegerTuple.left());
				current=nodeIntegerTuple.right();
			}
			return Tuple(NodeListAttribute(list), current);
		}
		return;
	}
	def getAttributeIntegerTuple(depth : int, value : Node) : Tuple<Attribute, Integer> => {
		return generateWithDepth(value, depth).mapLeft(NodeAttribute.new);
	}
	public def generate(node : Node, state : int) : Node => {
		return generateWithDepth(node, state).left();
	}
	def generateWithDepth(node : Node, depth : int) : Tuple<Node, Integer> => {
		preVisited : var =preVisit(node, depth);
		oldAttributes : var =preVisited.left().attributes();
		newAttributes : Attributes =MapAttributes();
		current : var =preVisited.right();
		for(oldTUple : Tuple<String, Attribute> in oldAttributes.streamEntries().toList()){
			key : var =oldTUple.left();
			value : var =oldTUple.right();
			newTuple : var =generateAttribute(value, current);
			newAttributes=newAttributes.with(key, newTuple.left());
			current=newTuple.right();
		}
		return postVisit(node.withAttributes(newAttributes), current);
	}
	def preVisit(node : Node, depth : int) : Tuple<Node, Integer> => {
		return Tuple(node, depth);
	}
	def postVisit(node : Node, depth : int) : Tuple<Node, Integer> => {
		return Tuple(node, depth);
	}
}
