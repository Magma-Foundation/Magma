
import magma.api.Tuple;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.Attributes;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.rule.Node;
import java.util.ArrayList;
import java.util.List;
public class def Generator() => {
	private def generateAttribute(attribute : Attribute, depth : int) : Tuple<Attribute, Integer> => {
		let mut nodeList = attribute.asNodeList();
		if(nodeList.isPresent())
		{
			let mut list = ArrayList();
			let mut current = depth;
			for(node : var in nodeList.get()){
				let mut nodeIntegerTuple : Tuple<Node, Integer> = generateWithDepth(node, current);
				list.add(nodeIntegerTuple.left());
				current=nodeIntegerTuple.right();
			}
			return Tuple(NodeListAttribute(list), current);
		}
		return attribute.asNode().map(() => getAttributeIntegerTuple(depth, value)).orElseGet(() => Tuple(attribute, depth));
	}
	private def getAttributeIntegerTuple(depth : int, value : Node) : Tuple<Attribute, Integer> => {
		return generateWithDepth(value, depth).mapLeft(NodeAttribute.new);
	}
	public def generate(node : Node, state : int) : Node => {
		return generateWithDepth(node, state).left();
	}
	private def generateWithDepth(node : Node, depth : int) : Tuple<Node, Integer> => {
		let mut preVisitedTuple = preVisit(node, depth);
		let mut preVisited = preVisitedTuple.left();
		let mut preVisitedAttributes = preVisited.attributes().streamEntries().toList();
		let mut newAttributes : Attributes = MapAttributes();
		let mut current = preVisitedTuple.right();
		for(preVisitedAttribute : Tuple<String, Attribute> in preVisitedAttributes){
			let mut key = preVisitedAttribute.left();
			let mut value = preVisitedAttribute.right();
			let mut newTuple = generateAttribute(value, current);
			newAttributes=newAttributes.with(key, newTuple.left());
			current=newTuple.right();
		}
		return postVisit(preVisited.withAttributes(newAttributes), current);
	}
	protected def preVisit(node : Node, depth : int) : Tuple<Node, Integer> => {
		return Tuple(node, depth);
	}
	protected def postVisit(node : Node, depth : int) : Tuple<Node, Integer> => {
		return Tuple(node, depth);
	}
}
