import magma.api.Tuple;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.rule.Node;
export class def MagmaAnnotator() => {
	protected def preVisit(this, node : Node, state : State) : Result<Tuple<Node, State>, Error_> => {
		if(node.is("block"))
		{
			let mut entered : var = state.enter();
			let mut depth : var = entered.computeDepth();
			let mut withDepth : var = node.withString("depth", String.valueOf(depth));
			return Ok(Tuple(withDepth, entered));
		}
		return Ok(Tuple(node, state));
	}
	protected def postVisit(this, node : Node, state : State) : Result<Tuple<Node, State>, Error_> => {
		if(node.is("block"))
		{
			return Ok(Tuple(node, state.exit()));
		}
		return Ok(Tuple(node, state));
	}
}
