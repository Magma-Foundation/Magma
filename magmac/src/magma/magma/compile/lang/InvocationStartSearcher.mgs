import magma.api.Tuple;import magma.compile.rule.split.Searcher;import java.util.LinkedList;import java.util.Optional;import java.util.stream.Collectors;import java.util.stream.IntStream;class def InvocationStartSearcher() => {public def search(this, input : String) : Optional<Integer> => {let mut depth : var = 0;let mut queue : var = IntStream.range(0, input.length()).map(() => input.length()-i-1).mapToObj(() => Tuple(i, input.charAt(i))).collect(Collectors.toCollection(LinkedList.new));while(!queue.isEmpty()){let mut pop : var = queue.pop();let mut i : var = pop.left();let mut c : var = pop.right();if(c=='\"'){while(!queue.isEmpty()){let mut next : var = queue.pop().right();if(next=='\"'){if(!queue.isEmpty()){let mut after : var = queue.peek().right();if(after=='\\'){continue;}}}if(next=='\"'){break;}}}if(c=='('&&depth==0)return Optional.of(i);else if(c==')')depth++;else if(c=='(')depth--;}return Optional.empty();}}