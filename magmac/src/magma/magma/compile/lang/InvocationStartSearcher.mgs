import magma.api.Tuple;
import magma.compile.rule.split.Searcher;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
default class def InvocationStartSearcher() => {
	public def search(this : Self, input : String) => {
		
		depth : var=
		
		0;
		
		queue : var=
		
		IntStream.range(0, input.length()).map(() => input.length()-i-1).mapToObj(() => Tuple(i, input.charAt(i))).collect(Collectors.toCollection(LinkedList.new));
		while
		(!queue.isEmpty())
		{
			
			pop : var=
			
			queue.pop();
			
			i : var=
			
			pop.left();
			
			c : var=
			
			pop.right();
			if
			(c=='\"')
			{
				while
				(!queue.isEmpty())
				{
					
					next : var=
					
					queue.pop().right();
					if
					(next=='\"')
					{
						if
						(!queue.isEmpty())
						{
							
							after : var=
							
							queue.peek().right();
							if
							(after=='\\')
							{
								continue
								;
							}
						}
					}
					if
					(next=='\"')
					{
						break
						;
					}
				}
			}
			if
			(c=='('&&depth==0)
			return Optional.of(i);
			else if(c==')')depth++;
			else if(c=='(')depth--;
		}
		return Optional.empty();
	}
	implements Searcher;
}