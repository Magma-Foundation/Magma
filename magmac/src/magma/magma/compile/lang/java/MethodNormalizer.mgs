import magma.api.Tuple;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.java.JavaList;
import magma.java.JavaOptionals;
import java.util.ArrayList;
export default class def MethodNormalizer() => {
	def attachSelfReference(this : Self, oldParams : magma.api.collect.List<Node>, node : Node) => {
		
		selfType : var=
		
		node.clear("reference").withString("value", "Self");
		
		selfReference : var=
		
		node.clear("definition").withString("name", "this").withNode("type", selfType);
		return Ok(oldParams.addFirst(selfReference));
	}
	public def preVisit(this : Self, node : Node, state : State) => {
		
		renamed : var=
		
		node.retype("function");
		
		oldParams : var=
		
		node.findNodeList("params").orElse(JavaList.empty());
		
		newParamsResult : var=
		
		attachSelfReference(oldParams, node);
		
		err : var=
		
		newParamsResult.findErr();
		if
		(err.isPresent())
		{
			return Err(err.orElsePanic());
		}
		
		newParams : var=
		
		newParamsResult.findValue().orElsePanic();
		
		definitionOptional : var=
		
		JavaOptionals.toNative(node.findNode("definition"));
		if
		(definitionOptional.isEmpty())
		{
			return Err(CompileError("No definition present.", node.toString()));
		}
		
		definition : var=
		
		definitionOptional.orElseThrow().mapStringList("modifiers", () => {
			
			newModifiers : var=
			
			oldModifiers.contains("public")?JavaList.of("public"):JavaList.empty();
			return newModifiers.addLast("def");
		});
		if
		(node.has("child"))
		{
			
			withParams : var=
			
			definition.withNodeList("params", newParams);
			return Ok(Tuple(renamed.withNode("definition", withParams), state));
		}
		else
		{
			
			returnsOptional : var=
			
			JavaOptionals.toNative(definition.findNode("type"));
			if
			(returnsOptional.isEmpty())
			{
				return Err(CompileError("No return type present.", node.toString()));
			}
			
			returns : var=
			
			returnsOptional.orElseThrow();
			
			paramTypes : var=
			
			ArrayList();
			for(param : Node in JavaList.toNative(newParams)){
				
				paramTypeOptional : var=
				
				JavaOptionals.toNative(param.findNode("type"));
				if
				(paramTypeOptional.isEmpty())
				{
					return Err(CompileError("No parameter type present.", node.toString()));
				}
				
				type : var=
				
				paramTypeOptional.orElseThrow();
				paramTypes.add(type);
			}
			
			node1 : Node=
			
			node.clear("function-type");
			
			functionType : var=
			
			node1.withNodeList("params", JavaList.fromNative(paramTypes)).withNode("returns", returns);
			
			withType : var=
			
			definition.withNode("type", functionType);
			return Ok(Tuple(withType, state));
		}
	}
	implements Visitor;
}