import magma.api.Tuple;
import magma.api.collect.List;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.java.JavaList;
import magma.java.JavaOptionals;
import java.util.ArrayList;
export object MethodNormalizer {
	def transpose(oldModifiers : List<String>, newModifiers : List<String>, input : String, output : String) => oldModifiers.contains(input) ? newModifiers.addLast(output) : newModifiers;
}
export class def MethodNormalizer() => {
	public def preVisit(node : Node, state : State) => {
		let mut renamed = node.retype("function");
		let mut params = node.findNodeList("params").orElse(JavaList.empty());
		let mut definitionOptional = JavaOptionals.toNative(node.findNode("definition"));
		if(definitionOptional.isEmpty())
		{
			return Err(CompileError("No definition present.", node.toString()));
		}
		let mut definition = definitionOptional.orElseThrow().mapStringList("modifiers", () => {
			let mut withPublic = transpose(oldModifiers, JavaList.empty(), "public", "public");
			let mut withStatic = transpose(oldModifiers, withPublic, "static", "static");
			return withStatic.addLast("def");
		});
		if(node.has("child"))
		{
			let mut withParams = definition.withNodeList("params", params);
			return Ok(Tuple(renamed.withNode("definition", withParams), state));
		}
		else
		{
			let mut returnsOptional = JavaOptionals.toNative(definition.findNode("type"));
			if(returnsOptional.isEmpty())
			{
				return Err(CompileError("No return type present.", node.toString()));
			}
			let mut returns = returnsOptional.orElseThrow();
			let mut paramTypes = ArrayList();
			for(param : Node in JavaList.toNative(params)){
				let mut paramTypeOptional = JavaOptionals.toNative(param.findNode("type"));
				if(paramTypeOptional.isEmpty())
				{
					return Err(CompileError("No parameter type present.", node.toString()));
				}
				let mut type = paramTypeOptional.orElseThrow();
				paramTypes.add(type);
			}
			let mut node1 : Node = node.clear("function-type");
			let mut functionType = node1.withNodeList("params", JavaList.fromNative(paramTypes)).withNode("returns", returns);
			let mut withType = definition.withNode("type", functionType);
			return Ok(Tuple(withType, state));
		}
	}
	implements Visitor;
}