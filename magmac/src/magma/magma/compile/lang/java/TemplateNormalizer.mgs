import magma.api.Tuple;
import magma.api.collect.List;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.java.JavaList;
export object TemplateNormalizer {
	def computeNewModifiers(node : Node) => {
		let mut oldModifiers = node.findStringList("modifiers").orElse(JavaList.empty());
		let mut newModifiers = JavaList.empty();
		return oldModifiers.contains("public")?newModifiers.addLast("export"):newModifiers;
	}
	def generateDefinition(name : String, node : Node, state : State) => {
		let mut classModifiers = JavaList.of("class", "def");
		let mut stringList = computeNewModifiers(node).addAll(classModifiers);
		let mut params = node.findNodeList("params").orElse(JavaList.empty());
		let mut definition = node.clear("definition").withString("name", name).withStringList("modifiers", stringList).withNodeList("params", params);
		let mut withTypeParams = node.findNodeList("type-params").map(() => definition.withNodeList("type-params", typeParams)).orElse(definition);
		let mut function = node.retype("function").withNode("definition", withTypeParams);
		let mut withImplements = function.findNode("interface").map(() => moveImplements(function, interfaceType)).orElse(function);
		let mut tuple = Tuple(withImplements, state);
		return Ok(tuple);
	}
	def moveImplements(function : Node, interfaceType : Node) => {
		let mut implementsStatement = function.clear("implements").withNode("type", interfaceType);
		return function.withNode("child", function.findNode("child").map(() => child.mapNodes("children", () => children.addLast(implementsStatement))).orElse(implementsStatement));
	}
}
export class def TemplateNormalizer() => {
	public def preVisit(node : Node, state : State) => node.findString("name").map(() => generateDefinition(name, node, state)).orElseGet(() => Err(CompileError("No name present.", node.toString())));
	implements Visitor;
}