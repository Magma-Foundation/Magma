import magma.api.Tuple;
import magma.api.collect.List;
import magma.api.collect.stream.ExceptionalCollector;
import magma.api.collect.stream.ResultStream;
import magma.api.collect.stream.Stream;
import magma.api.collect.stream.Streams;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.java.JavaList;
object BlockNormalizer {
	def removeFromChildren(this : Self, children : List<Node>) => children.stream().filter(() => !child.is("package")).collect(JavaList.collecting());
	def flattenChild(this : Self, flattening : Flattening, node : Node) => {
		if
		(!node.is("function"))
		return Ok(flattening.withInstanceMember(node));
		
		definitionOptional : var=
		
		node.findNode("definition");
		if
		(definitionOptional.isEmpty())
		return Ok(flattening.withInstanceMember(node));
		
		definition : var=
		
		definitionOptional.orElsePanic();
		
		modifiers : var=
		
		definition.findStringList("modifiers").orElse(JavaList.empty());
		
		withNewModifiers : var=
		
		definition.withStringList("modifiers", modifiers.remove("static"));
		
		withNewDefinition : var=
		
		node.withNode("definition", withNewModifiers);
		if
		(modifiers.contains("static"))
		{
			return Ok(flattening.withStaticMember(withNewDefinition));
		}
		else
		{
			return Ok(flattening.withInstanceMember(withNewDefinition));
		}
	}
	def splitIntoObject(this : Self, node : Node, flattening : Flattening, name : String) => {
		
		staticMembers : var=
		
		flattening.staticMembers;
		
		instanceMembers : var=
		
		flattening.instanceMembers;
		if
		(staticMembers.isEmpty())
		{
			return Streams.of(createFunction(node, instanceMembers));
		}
		else if(instanceMembers.isEmpty()){
			return Streams.of(createObject(node, name, staticMembers));
		}
		else
		{
			
			object : var=
			
			createObject(node, name, staticMembers);
			
			withChild : var=
			
			createFunction(node, instanceMembers);
			return Streams.of(object, withChild);
		}
	}
	def createFunction(this : Self, node : Node, instanceMembers : List<Node>) => {
		
		instanceBlock : var=
		
		node.clear("block").withNodeList("children", instanceMembers);
		return node.withNode("child", instanceBlock);
	}
	def createObject(this : Self, node : Node, name : String, staticMembers : List<Node>) => {
		
		staticBlock : var=
		
		node.clear("block").withNodeList("children", staticMembers);
		return node.clear("object").withString("name", name).withNode("child", staticBlock);
	}
}
export default class def BlockNormalizer() => {
	public def postVisit(this : Self, node : Node, state : State) => {
		
		childrenOptional : var=
		
		node.findNodeList("children");
		if
		(childrenOptional.isEmpty())
		return Ok(Tuple(node, state));
		return flattenChildren(childrenOptional.orElsePanic()).mapValue(() => Tuple(node.withNodeList("children", children), state));
	}
	def flattenChildren(this : Self, nodeList : List<Node>) => nodeList.stream().map(this.flattenChild).into(ResultStream.new).flatMapValue(() => value).collect(ExceptionalCollector(JavaList.collecting()));
	def flattenChild(this : Self, node : Node) => {
		if
		(!node.is("function"))
		return Ok(Streams.of(node));
		
		definitionOptional : var=
		
		node.findNode("definition");
		if
		(definitionOptional.isEmpty())
		return Ok(Streams.of(node));
		
		definition : var=
		
		definitionOptional.orElsePanic();
		
		nameOptional : var=
		
		definition.findString("name");
		if
		(nameOptional.isEmpty())
		return Ok(Streams.of(node));
		
		name : var=
		
		nameOptional.orElsePanic();
		
		childOptional : var=
		
		node.findNode("child");
		if
		(childOptional.isEmpty())
		return Ok(Streams.of(node));
		
		child : var=
		
		childOptional.orElsePanic();
		if
		(!child.is("block"))
		return Ok(Streams.of(node));
		return child.findNodeList("children").orElse(JavaList.empty()).stream().foldLeftToResult(Flattening(JavaList.empty(), JavaList.empty()), BlockNormalizer.flattenChild).mapValue(() => splitIntoObject(node, flattening, name));
	}
	public def preVisit(this : Self, node : Node, state : State) => Ok(Tuple(node.mapNodes("children", BlockNormalizer.removeFromChildren), state));
	() => {
		public def withStaticMember(this : Self, staticMember : Node) => Flattening(instanceMembers, staticMembers.addLast(staticMember));
		public def withInstanceMember(this : Self, instanceMember : Node) => Flattening(instanceMembers.addLast(instanceMember), staticMembers);
	}
	implements Visitor;
}