import magma.api.Tuple;
import magma.api.collect.List;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.Error_;
import magma.compile.annotate.State;
import magma.compile.lang.Visitor;
import magma.compile.rule.Node;
import magma.java.JavaList;
export default class def InterfaceNormalizer() => {
	public preVisit(node : Node, state : State) : Result<Tuple<Node, State>, Error_> => {
		
		struct : var=
		
		node.retype("struct").mapStringList("modifiers", InterfaceNormalizer.normalizeModifiers);
		return Ok(Tuple(struct, state));
	}
	private static normalizeModifiers(oldModifiers : List<String>) : List<String> => return oldModifiers.contains("public")?JavaList.of("export"):JavaList.empty();
}