
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.ContextRule;
import magma.compile.rule.OrRule;
import magma.compile.rule.Rule;
import magma.compile.rule.TypeRule;
import magma.compile.rule.split.BackwardsRule;
import magma.compile.rule.split.LastRule;
import magma.compile.rule.split.SplitMultipleRule;
import magma.compile.rule.split.Splitter;
import magma.compile.rule.text.LeftRule;
import magma.compile.rule.text.RightRule;
import magma.compile.rule.text.StripRule;
import magma.compile.rule.text.extract.ExtractNodeRule;
import magma.compile.rule.text.extract.ExtractStringListRule;
import magma.compile.rule.text.extract.ExtractStringRule;
import magma.compile.rule.text.extract.SimpleExtractStringListRule;
import java.util.List;
import java.util.Optional;
public class def JavaDefinitionHeaderFactory() => {
	static def createDefinitionHeaderRule() : Rule => {
		let mut type = ExtractNodeRule("type", Lang.createTypeRule());
		let mut name = ExtractStringRule("name");
		let mut generics = LeftRule("<", RightRule(SimpleExtractStringListRule("type-params", ","), ">"));
		let mut withGenerics = ContextRule("With generics.", StripRule(BackwardsRule(generics, " ", type)));
		let mut withoutGenerics = ContextRule("Without generics.", type);
		let mut maybeGenerics = OrRule(List.of(withGenerics, withoutGenerics));
		let mut modifiers = ModifiersRule();
		let mut withModifiers = ContextRule("With modifiers.", BackwardsRule(modifiers, " ", maybeGenerics));
		let mut withoutModifiers = ContextRule("Without modifiers.", maybeGenerics);
		let mut maybeModifiers = OrRule(List.of(withModifiers, withoutModifiers));
		let mut annotation = TypeRule("annotation", LeftRule("@", ExtractStringRule("value")));
		let mut annotations = SplitMultipleRule(SimpleSplitter(), ", ", "annotations", annotation);
		let mut withAnnotations = ContextRule("With annotations.", LastRule(annotations, "\n", maybeModifiers));
		let mut withoutAnnotations = ContextRule("Without annotations.", maybeModifiers);
		let mut maybeAnnotations = OrRule(List.of(withAnnotations, withoutAnnotations));
		let mut beforeName = ContextRule("Cannot parse before name.", maybeAnnotations);
		return TypeRule("definition", StripRule(LastRule(beforeName, " ", name)));
	}
	private static class def ModifiersRule() => {
		let MODIFIERS : List<String> = List.of("public", "static", "final", "private", "default", "protected", "abstract");
		def ModifiersRule() : public => {
			super("modifiers", " ");
		}
		protected def qualify(child : String) : Optional<Error_> => {
			if
			(MODIFIERS.contains(child))
			{
				return Optional.empty();
			}
			else
			{
				return Optional.of(CompileError("Invalid modifier.", child));
			}
		}
	}
	private static class def SimpleSplitter() => {
		public def split(input : String) : List<String> => {
			return List.of(input.split("\n"));
		}
	}
}
