
import magma.compile.rule.ContextRule;
import magma.compile.rule.EmptyRule;
import magma.compile.rule.LazyRule;
import magma.compile.rule.OptionalRule;
import magma.compile.rule.OrRule;
import magma.compile.rule.Rule;
import magma.compile.rule.TypeRule;
import magma.compile.rule.split.FirstRule;
import magma.compile.rule.split.LastRule;
import magma.compile.rule.text.LeftRule;
import magma.compile.rule.text.RightRule;
import magma.compile.rule.text.StripRule;
import magma.compile.rule.text.extract.ExtractNodeRule;
import magma.compile.rule.text.extract.ExtractStringRule;
import magma.compile.rule.text.extract.SimpleExtractStringListRule;
import java.util.List;
public class def MagmaLang() => {
	public static def createRootRule() : Rule => {
		let mut statement = LazyRule();
		let mut value = LazyRule();
		let mut definition = createDefinitionRule();
		value.setRule(ContextRule("Not a value.", OrRule(List.of(createFunctionRule(statement, value), Lang.createCharRule(), Lang.createStringRule(), Lang.createInvocationRule(value), Lang.createAccessRule("access", ".", value), Lang.createSymbolRule(), Lang.createTernaryRule(value), Lang.createNumberRule(), Lang.createOperatorRule("equals", "==", value), Lang.createOperatorRule("not-equals", "!=", value), Lang.createOperatorRule("add", "+", value), Lang.createOperatorRule("greater-than", ">", value), Lang.createOperatorRule("or", "||", value), Lang.createOperatorRule("and", "&&", value), Lang.createOperatorRule("subtract", "-", value), Lang.createOperatorRule("less-than", "<", value), Lang.createOperatorRule("greater-than-or-equals", ">=", value), Lang.createNotRule(value), TypeRule("quantity", StripRule(LeftRule("(", RightRule(ExtractNodeRule("value", value), ")")))), createConstructionRule(statement)))));
		statement.setRule(ContextRule("Not a statement.", OrRule(List.of(Lang.createBlockCommentRule(), Lang.createCommentRule(), Lang.createTryRule(statement), Lang.createCatchRule(definition, statement), Lang.createConditionRule("if", value, statement), Lang.createConditionRule("while", value, statement), Lang.createElseRule(statement), Lang.createReturnRule(value), Lang.createAssignmentRule(value), Lang.createForRule(definition, value, statement, " in "), createFunctionRule(statement, value), Lang.createDefinitionRule(definition), Lang.createDeclarationRule(definition, value), TypeRule("invocation", RightRule(Lang.createInvocationRule(value), ";")), Lang.createEmptyStatementRule(), createStructRule(definition), Lang.createThrowRule(value), Lang.createPostIncrementRule(value), Lang.createPostDecrementRule(value), Lang.createKeywordRule("break"), Lang.createKeywordRule("continue"), TypeRule("implements", LeftRule("implements ", RightRule(ExtractNodeRule("type", Lang.createTypeRule()), ";")))))));
		return Lang.createBlock(OrRule(List.of(Lang.createImportRule(Lang.createNamespaceRule()), statement)));
	}
	private static def createConstructionRule(statement : Rule) : TypeRule => {
		let mut child1 = ExtractNodeRule("child", Lang.createBlock(statement));
		let mut child = LeftRule("{", RightRule(child1, "}"));
		return TypeRule("construction", StripRule(child));
	}
	private static def createStructRule(definition : Rule) : TypeRule => {
		let mut modifiers = SimpleExtractStringListRule("modifiers", " ");
		let mut children = ExtractNodeRule("child", Lang.createBlock(RightRule(definition, ";")));
		let mut name = ExtractStringRule("name");
		let mut child = FirstRule(name, " {", RightRule(children, "}"));
		return TypeRule("struct", OptionalRule("modifiers", FirstRule(modifiers, " struct ", child), LeftRule("struct ", child)));
	}
	private static def createDefinitionRule() : Rule => {
		let mut modifiers = Lang.createModifiersRule();
		let mut withoutModifiers = OptionalRule("name", ExtractStringRule("name"), EmptyRule("name"));
		let mut withTypeParams = StripRule(FirstRule(withoutModifiers, "<", RightRule(SimpleExtractStringListRule("type-params", ", "), ">")));
		let mut maybeTypeParams = OptionalRule("type-params", withTypeParams, withoutModifiers);
		let mut withModifiers = LastRule(modifiers, " ", maybeTypeParams);
		let mut maybeModifiers = OptionalRule("modifiers", withModifiers, maybeTypeParams);
		let mut definition = LazyRule();
		let mut params = FirstRule(maybeModifiers, "(", RightRule(Lang.createParamsRule(definition), ")"));
		let mut maybeParams = OptionalRule("params", params, maybeModifiers);
		let mut type = Lang.createTypeRule();
		let mut withType = LastRule(maybeParams, " : ", ExtractNodeRule("type", type));
		let mut maybeType = OptionalRule("type", withType, maybeParams);
		definition.setRule(maybeType);
		return definition;
	}
	private static def createFunctionRule(statement : Rule, value : Rule) : TypeRule => {
		let mut block = LeftRule("{", RightRule(Lang.createBlock(statement), "}"));
		let mut asBlock = ExtractNodeRule("child", OrRule(List.of(block, statement)));
		let mut asValue = ExtractNodeRule("child", value);
		let mut definition = ExtractNodeRule("definition", TypeRule("definition", createDefinitionRule()));
		let mut content = OrRule(List.of(asValue, asBlock));
		let mut withDefinition = FirstRule(definition, " => ", content);
		let mut withoutDefinition = LeftRule("() => ", content);
		return TypeRule("function", OrRule(List.of(withDefinition, withoutDefinition)));
	}
}
