import magma.api.Tuple;
import magma.compile.rule.Rule;
import magma.compile.rule.split.SplitOnceRule;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
class def InvocationStartRule extends SplitOnceRule() => {
	InvocationStartRule(caller : Rule, arguments : Rule) : public => {
		super(caller, "(", arguments);
	}
	def computeIndex(input : String) : Optional<Integer> => {
		let depth = 0;
		let queue = IntStream.range(0, input.length()).map( (i) => input.length()-i-1).mapToObj( (i) => {Tuple(i, input.charAt(i));}).collect(Collectors.toCollection(LinkedList.new));
		while(!queue.isEmpty()){
			let pop = queue.pop();
			let i = pop.left();
			let c = pop.right();
			if(c=='\"'){
				while(!queue.isEmpty()){
					let next = queue.pop().right();
					if(next=='\"'){
						if(!queue.isEmpty()){
							let after = queue.peek().right();
							if(after=='\\'){
								continue
								
							;
							}
						}
					}
					if(next=='\"'){
						break
						
					;
					}
				}
			}
			if(c=='('&&depth==0)return Optional.of(i);
			else if(c==')')depth++;
			else if(c=='(')depth--;
		}
		return Optional.empty();
	}
}
