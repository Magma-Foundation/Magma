
import magma.api.Tuple;
import magma.compile.rule.Rule;
import magma.compile.rule.split.SplitOnceRule;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
class def InvocationStartRule() => {
	def InvocationStartRule(caller : Rule, arguments : Rule) : public => {
		super(caller, "(", arguments);
	}
	protected def computeIndex(input : String) : Optional<Integer> => {
		depth = 0;
		queue = IntStream.range(0, input.length()).map(() => input.length()-i-1).mapToObj(() => Tuple(i, input.charAt(i))).collect(Collectors.toCollection(LinkedList.new));
		while
		(!queue.isEmpty())
		{
			pop = queue.pop();
			i = pop.left();
			c = pop.right();
			if
			(c=='\"')
			{
				while
				(!queue.isEmpty())
				{
					next = queue.pop().right();
					if
					(next=='\"')
					{
						if
						(!queue.isEmpty())
						{
							after = queue.peek().right();
							if
							(after=='\\')
							{
								continue
								;
							}
						}
					}
					if
					(next=='\"')
					{
						break
						;
					}
				}
			}
			if
			(c=='('&&depth==0)
			return Optional.of(i);
			else if(c==')')depth++;
			else if(c=='(')depth--;
		}
		return Optional.empty();
	}
}
