import magma.api.Tuple;
import magma.compile.rule.Rule;
import magma.compile.rule.split.SplitOnceRule;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
class def ConditionEndRule extends SplitOnceRule() => {
	ConditionEndRule(conditionParent : Rule, valueParent : Rule) : public => {
		super(conditionParent, ")", valueParent);
	}
	def computeIndex(input : String) : Optional<Integer> => {
		
		/*
        TODO: reduce nesting
         */
		let queue = IntStream.range(0, input.length()).mapToObj( (i) => Tuple(i, input.charAt(i));).collect(Collectors.toCollection(LinkedList.new));
		let depth = 0;
		while(!queue.isEmpty()){
			let pop = queue.pop();
			let i = pop.left();
			let c = pop.right();
			if(c=='\''){
				let next = queue.pop();
				if(next.right()=='\\'){
					queue.pop();
				}
				queue.pop();
			}
			if(c==')'&&depth==1){
				return Optional.of(i);
			}
			else
			{
				if(c=='(')depth++;
				if(c==')')depth--;
			}
		
		}
		return Optional.empty();
	}
}
