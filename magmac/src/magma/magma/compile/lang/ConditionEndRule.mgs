
import magma.api.Tuple;
import magma.compile.rule.Rule;
import magma.compile.rule.split.SplitOnceRule;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
class def ConditionEndRule() => {
	def ConditionEndRule() : public => {
		super(conditionParent, ")", valueParent);}
	protected def computeIndex() : Optional<Integer> => {
		
		/*
        TODO: reduce nesting
         */
		
		queue : var=
		IntStream.range(0, input.length()).mapToObj(() => Tuple(i, input.charAt(i))).collect(Collectors.toCollection(LinkedList.new));
		
		depth : var=
		0;
		while
		(!queue.isEmpty())
		{
			
			pop : var=
			queue.pop();
			
			i : var=
			pop.left();
			
			c : var=
			pop.right();
			if
			(c=='\'')
			{
				
				next : var=
				queue.pop();
				if
				(next.right()=='\\')
				{
					queue.pop();}
				queue.pop();}
			if
			(c==')'&&depth==1)
			{
				return Optional.of(i);}
			else
			{
				if
				(c=='(')
				depth++;
				if
				(c==')')
				depth--;}}
		return Optional.empty();}}