import magma.api.Tuple;
import magma.compile.rule.split.Searcher;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
export class def ConditionEndSearcher() => {
	public def search(this, input : String) : Optional<Integer> => {
		let mut depth : var = 0;
		let mut queue : var = IntStream.range(0, input.length()).mapToObj(() => Tuple(index, input.charAt(index))).collect(Collectors.toCollection(LinkedList.new));
		while(!queue.isEmpty())
		{
			let mut tuple : var = queue.pop();
			let mut i : var = tuple.left();
			let mut c : var = tuple.right();
			if(c=='\'')
			{
				let mut popped : var = queue.pop();
				if(popped.right()=='\\')
				{
					queue.pop();
				}
				queue.pop();
				continue
				;
			}
			if(c==')'&&depth==1)
			{
				return Optional.of(i);
			}
			else
			{
				if(c=='(')
				depth++;
				if(c==')')
				depth--;
			}
		}
		return Optional.empty();
	}
}
