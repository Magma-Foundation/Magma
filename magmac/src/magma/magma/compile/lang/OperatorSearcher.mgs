import magma.api.Tuple;
import magma.compile.rule.split.Searcher;
import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
default class def OperatorSearcher(slice : String) => {
	public def search(this : Self, input : String) => {
		if
		(!input.contains(slice))
		return Optional.empty();
		
		queue : var=
		
		IntStream.range(0, input.length()).mapToObj(() => Tuple(i, input.charAt(i))).collect(Collectors.toCollection(LinkedList.new));
		
		depth : var=
		
		0;
		while
		(!queue.isEmpty())
		{
			
			tuple : var=
			
			queue.pop();
			
			i : var=
			
			tuple.left();
			
			maybeSlice : var=
			
			input.substring(i, Math.min(i+slice.length(), input.length()));
			if
			(maybeSlice.equals(slice)&&depth==0)
			{
				return Optional.of(i);
			}
			else
			{
				
				c : var=
				
				maybeSlice.charAt(0);
				if
				(c=='\'')
				{
					
					pop : var=
					
					queue.pop();
					if
					(pop.right()=='\\')
					queue.pop();
					queue.pop();
					continue
					;
				}
				if
				(c=='(')
				depth++;
				if
				(c==')')
				depth--;
			}
		}
		
		/*
        TODO: find the operator
         */
		return Optional.empty();
	}
	implements Searcher;
}