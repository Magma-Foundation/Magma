import magma.api.Tuple;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Stream;

/**
 * The Node interface provides methods to manipulate key-value pairs
 * where keys are strings and values are attributes. It supports
 * adding attributes, applying attributes, merging nodes, and
 * streaming entries.
 */
export struct Attributes {
	
	mapValue<T> : (Self, String, Factory<T>, Function<T, T>) => Attributes;
	
	/**
     * Adds an attribute to the node.
     *
     * @param key   the key to associate with the attribute
     * @param value the attribute to add
     * @return a new Node instance with the added attribute
     */
	with : (Self, String, Attribute) => Attributes;
	
	/**
     * Retrieves an attribute associated with the given key.
     *
     * @param key the key to lookup
     * @return an Optional containing the attribute if present, otherwise empty
     */
	apply : (Self, String) => Optional<Attribute>;
	
	/**
     * Merges the current node with another node.
     *
     * @param other the node to merge with
     * @return a new Node instance representing the merged result
     */
	merge : (Self, Attributes) => Attributes;
	
	/**
     * Streams the entries of the node as tuples of key and attribute.
     *
     * @return a Stream of tuples containing the keys and attributes
     */
	streamEntries : (Self) => Stream<Tuple<String, Attribute>>;
	format : (Self, int) => String;
	has : (Self, String) => boolean;
	isEmpty : (Self) => boolean;
	streamKeys : (Self) => magma.api.collect.stream.Stream<String>;
	remove : (Self, String) => Attributes;
}