
import magma.compile.rule.Node;
import java.util.Optional;
export class def NodeAttribute(value : Node) => {
public static final let Factory : Factory<Node> = Factory((() => {
return {
public def fromAttribute(this, attribute : Attribute) : Optional<Node> => {
return attribute.asNode();}
public def toAttribute(this, value : Node) : Attribute => {
return NodeAttribute(value);}};})())();

;
public def asNode(this) : Optional<Node> => {
return Optional.of(value);}
public def format(this, depth : int) : String => {
return value.format(depth);}
public static def from(this, node : Node) : Attribute => {
return NodeAttribute(node);}}