import magma.api.Tuple;
import magma.api.collect.stream.HeadedStream;
import magma.java.NativeListHead;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
export default object MapAttributes {
	public def mapValue<T>(this : Self, key : String, factory : Factory<T>, mapper : Function<T, T>) => {
		if
		(!values.containsKey(key))
		return this;
		return factory.fromAttribute(values.get(key)).map(mapper).map(factory.toAttribute).map(() => with(key, inner)).orElse(this);
	}
	public def with(this : Self, key : String, value : Attribute) => {
		
		copy : var=
		
		HashMap(values);
		copy.put(key, value);
		return MapAttributes(copy);
	}
	public def apply(this : Self, key : String) => values.containsKey(key)?Optional.of(values.get(key)):Optional.empty();
	public def merge(this : Self, other : Attributes) => {
		
		entries : var=
		
		other.streamEntries().collect(Collectors.toSet());
		
		current : Attributes=
		
		this;
		for(entry : var in entries){
			current=current.with(entry.left(), entry.right());
		}
		return current;
	}
	public def streamEntries(this : Self) => values.entrySet().stream().map(() => Tuple(entry.getKey(), entry.getValue()));
	public def format(this : Self, depth : int) => values.entrySet().stream().map(() => "\n"+"\t".repeat(depth+1)+entry.getKey()+" : "+entry.getValue().format(depth+1)).sorted(Comparator.comparingInt(String.length)).collect(Collectors.joining(",", "{", "\n" + "\t".repeat(depth) + "}"));
	public def has(this : Self, name : String) => this.values.containsKey(name);
	public def isEmpty(this : Self) => values.isEmpty();
	public def remove(this : Self, key : String) => {
		
		copy : var=
		
		HashMap(values);
		copy.remove(key);
		return MapAttributes(copy);
	}
	public def streamKeys(this : Self) => HeadedStream(NativeListHead(ArrayList(values.keySet())));
	implements Attributes;
}