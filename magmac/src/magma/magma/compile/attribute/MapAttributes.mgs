
import magma.api.Tuple;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
export class def MapAttributes(values : Map<String, Attribute>) => {
def MapAttributes(this) : public => {
this(Collections.emptyMap());}
public def mapValue<T>(this, key : String, factory : Factory<T>, mapper : (T) => T) : Attributes => {
if(!values.containsKey(key))
return this;
return factory.fromAttribute(values.get(key)).map(mapper).map(factory.toAttribute).map(() => with(key, inner)).orElse(this);}
public def with(this, key : String, value : Attribute) : Attributes => {
let mut copy : var = HashMap(values);
copy.put(key, value);
return MapAttributes(copy);}
public def apply(this, key : String) : Optional<Attribute> => {
return values.containsKey(key)?Optional.of(values.get(key)):Optional.empty();}
public def merge(this, other : Attributes) : Attributes => {
let mut entries : var = other.streamEntries().collect(Collectors.toSet());
let mut current : Attributes = this;
for(entry : var in entries){
current=current.with(entry.left(), entry.right());}
return current;}
public def streamEntries(this) : Stream<Tuple<String, Attribute>> => {
return values.entrySet().stream().map(() => Tuple(entry.getKey(), entry.getValue()));}
public def mapValues(this, mapper : (Attribute) => Attribute) : Attributes => {
let mut copy : var = HashMap();
for(stringAttributeEntry : Map.Entry<String, Attribute> in values.entrySet()){
copy.put(stringAttributeEntry.getKey(), mapper.apply(stringAttributeEntry.getValue()));}
return MapAttributes(copy);}
public def format(this, depth : int) : String => {
return values.entrySet().stream().map(() => "\n"+"\t".repeat(depth+1)+entry.getKey()+" : "+entry.getValue().format(depth+1)).sorted(Comparator.comparingInt(String.length)).collect(Collectors.joining(",", "{", "\n" + "\t".repeat(depth) + "}"));}
public def remove(this, key : String) : Attributes => {
let mut copy : var = HashMap(values);
copy.remove(key);
return MapAttributes(copy);}
public def has(this, name : String) : boolean => {
return this.values.containsKey(name);}
public def isEmpty(this) : boolean => {
return values.isEmpty();}}