import magma.compile.rule.Node;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
export class def NodeListAttribute(List<Node> nodeList)() => {
	public static final Factory : Factory<List<Node>> =Factory();
	
	;
	public def asNodeList() : Optional<List<Node>> => {
		return Optional.of(nodeList);
	}
	public def format(depth : int) : String => {
		if(nodeList.isEmpty())return "[]";
		return nodeList.stream().map( (child) => {child.formatWithDepth(depth+1);}).collect(Collectors.joining(",\n", "[\n", "\n" + "\t".repeat(depth) + "]"));
	}
}
