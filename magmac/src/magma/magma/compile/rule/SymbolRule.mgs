object SymbolRule {
	def isValidDigit(this : Self, i : int, c : char) => i!=0&&Character.isDigit(c);
	def isUnderscore(this : Self, c : char) => c=='_';
	def isDollar(this : Self, c : char) => c=='$';
}
export default class def SymbolRule() => {
	 SymbolRule(this : Self, child : Rule) => super(child)
	def computeMessage(this : Self) => "Not a symbol.";
	def filter(this : Self, input : String) => {
		if
		(input.isEmpty())
		{
			return false;
		}
		
		i : int=
		
		0;
		while
		(i<input.length())
		{
			
			c : var=
			
			input.charAt(i);
			if
			(Character.isLetter(c)||isUnderscore(c)||isDollar(c)||isValidDigit(i, c))
			{
				i++;
				continue
				;
			}
			return false;
		}
		return true;
	}
}