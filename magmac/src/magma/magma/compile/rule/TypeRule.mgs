import magma.api.result.Err;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.java.JavaOptionals;
export class def TypeRule(type : String, child : Rule) => {
	public static final let FORMAT : String = "Node was not of type '%s', but rather '%s'.";
	public def toNode(this, input : String) : RuleResult => {
		let mut result : var = child.toNode(input);
		if(JavaOptionals.toNative(result.findError()).isEmpty())
		return result.withType(type);
		let mut format : var = "Cannot attach type '%s' because of child failure.";
		let mut message : var = format.formatted(type);
		return ErrorRuleResult(CompileParentError(message, input, JavaOptionals.toNative(result.findError()).get()));
	}
	public def fromNode(this, node : Node) : Result<String, Error_> => {
		if(!node.type().equals(type))
		{
			let mut message : var = String.format(FORMAT, type, node.type());
			return Err(CompileError(message, node.toString()));
		}
		return child.fromNode(node).mapErr(() => {
			let mut format : var = "Cannot generate '%s' from node.";
			let mut message : var = format.formatted(type);
			return CompileParentError(message, node.toString(), err);
		});
	}
}
