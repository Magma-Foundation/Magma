import magma.api.Err;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
export class def TypeRule(String type, Rule child)() => {
	public static final FORMAT : String = "Node was not of type '%s', but rather '%s'.";
	public def toNode(input : String) : RuleResult => {
		result : var = child.toNode(input);
		if(result.findError().isEmpty())return result.withType(type);
		format : var = "Cannot attach type '%s' because of child failure.";
		message : var = format.formatted(type);
		return ErrorRuleResult(CompileParentError(message, input, result.findError().get()));
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		if(!node.type().equals(type)){
			message : var = String.format(FORMAT, type, node.type());
			return Err(CompileError(message, node.toString()));
		}
		return child.fromNode(node).mapErr((err) => {
			format : var = "Cannot generate '%s' from node.";
			message : var = format.formatted(type);
			return CompileParentError(message, node.toString(), err);
		});
	}
}
