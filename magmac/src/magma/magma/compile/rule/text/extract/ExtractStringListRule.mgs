import magma.api.collect.stream.JoiningCollector;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.StringListAttribute;
import magma.compile.rule.Node;
import magma.java.JavaOptionals;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
export default class def ExtractStringListRule() => {
	protected final delimiter : String;
	ExtractStringListRule(key : String, delimiter : String) => {
		super(key);
		this=delimiter;
	}
	def fromAttribute(attribute : Node) => JavaOptionals.toNative(attribute.findStringList(key).map(this.join));
	def join(list : magma.api.collect.List<String>) => list.stream().collect(JoiningCollector(delimiter)).orElse("");
	def toAttribute(content : String) => {
		
		list : var=
		
		split(content);
		for(format : String in list){
			
			qualified : var=
			
			qualify(format);
			if
			(qualified.isPresent())
			{
				return Err(qualified.get());
			}
		}
		return Ok(StringListAttribute(list));
	}
	def split(content : String) => {
		
		result : List<String>=
		
		ArrayList();
		
		start : int=
		
		0;
		while
		(true)
		{
			
			end : var=
			
			content.indexOf(delimiter, start);
			if
			(end==-1)
			break;
			result.add(content.substring(start, end));
			start=end+delimiter.length();
		}
		result.add(content.substring(start));
		return result.stream().map(String.strip).filter(() => !value.isEmpty()).toList();
	}
	def qualify : (String) => Optional<Error_>;
}