import magma.api.Err;
import magma.api.Ok;
import magma.api.Result;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.StringListAttribute;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
export class def ExtractStringListRule extends ExtractRule() => {
	
	protected final delimiter : String;
	ExtractStringListRule(key : String, delimiter : String) : public => {
		super(key);
		this=delimiter;
	}
	def fromAttribute(attribute : Attribute) : Optional<String> => {
		return attribute.asStringList().map( (list) => {String.join(delimiter, list);});
	}
	def toAttribute(content : String) : Result<Attribute, Error_> => {
		let list=split(content);
		for(format : String in list){
			let qualified=qualify(format);
			if(qualified.isPresent()){
				return Err(qualified.get());
			}
		}
		return Ok(StringListAttribute(list));
	}
	def split(content : String) : List<String> => {
		let result : List<String>=ArrayList();
		let start : int=0;
		while(true){
			let end=content.indexOf(delimiter, start);
			if(end==-1)break;
			result.add(content.substring(start, end));
			start=end+delimiter.length();
		}
		result.add(content.substring(start));
		return result.stream().map(String.strip).filter( (value) => {!value.isEmpty();}).toList();
	}
	def qualify(child : String) : Optional<Error_>
}
