
import magma.api.Err;
import magma.api.Ok;
import magma.api.Result;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.StringListAttribute;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
public abstract ExtractStringListRule => {
	protected final delimiter : String;
	ExtractStringListRule : public => {
		super(key);
		this=delimiter;}
	protected fromAttribute : Optional<String> => {
		return attribute.asStringList().map(() => String.join(delimiter, list));}
	protected toAttribute : Result<Attribute, Error_> => {
		
		list : var=
		split(content);
		for(format : String in list){
			
			qualified : var=
			qualify(format);
			if
			(qualified.isPresent())
			{
				return Err(qualified.get());}}
		return Ok(StringListAttribute(list));}
	private split : List<String> => {
		
		result : List<String>=
		ArrayList();
		
		start : int=
		0;
		while
		(true)
		{
			
			end : var=
			content.indexOf(delimiter, start);
			if
			(end==-1)
			break;
			result.add(content.substring(start, end));
			start=end+delimiter.length();}
		result.add(content.substring(start));
		return result.stream().map(String.strip).filter(() => !value.isEmpty()).toList();}
	protected abstract qualify : Optional<Error_>;}