
import magma.api.Err;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
() => {
	public toNode : RuleResult => {
		
		node : var=
		child.toNode(input);
		if
		(node.findError().isPresent())
		return node;
		return node.tryCreate().map(NodeAttribute.new).map(() => MapAttributes().with(propertyKey, attribute)).<RuleResult>map(UntypedRuleResult.new).orElse(ErrorRuleResult(CompileError("No name present: ", input)));}
	public fromNode : Result<String, Error_> => {
		
		attributes : var=
		node.attributes();
		
		propertyValue : var=
		attributes.apply(propertyKey);
		if
		(propertyValue.isEmpty())
		return createErr(node);
		
		asNode : var=
		propertyValue.get().asNode();
		if
		(asNode.isEmpty())
		return createErr(node);
		return child.fromNode(asNode.get());}
	private createErr : Err<String, Error_> => {
		
		format : var=
		"Node did not have attribute '%s' as a node.";
		
		message : var=
		format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));}}