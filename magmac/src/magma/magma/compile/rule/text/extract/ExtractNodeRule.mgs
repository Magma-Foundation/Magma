import magma.api.result.Err;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import magma.java.JavaOptionals;
() => {
	public def toNode(this : Self, input : String) => {
		
		node : var=
		
		child.toNode(input);
		if
		(JavaOptionals.toNative(node.findError()).isPresent())
		return node;
		return JavaOptionals.toNative(node.tryCreate()).map(NodeAttribute.new).map(() => MapAttributes().with(propertyKey, attribute)).map(UntypedRuleResult.new).orElse(ErrorRuleResult(CompileError("No name present: ", input)));
	}
	public def fromNode(this : Self, node : Node) => {
		
		asNode : var=
		
		JavaOptionals.toNative(node.findNode(propertyKey));
		if
		(asNode.isEmpty())
		return createErr(node);
		return child.fromNode(asNode.get());
	}
	def createErr(this : Self, node : Node) => {
		
		format : var=
		
		"Node did not have attribute '%s' as a node.";
		
		message : var=
		
		format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));
	}
}