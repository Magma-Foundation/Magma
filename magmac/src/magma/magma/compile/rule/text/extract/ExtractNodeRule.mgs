
import magma.api.Err;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
export class def ExtractNodeRule(propertyKey : String, child : Rule) => {
	public def toNode(this, input : String) : RuleResult => {
		let mut node = child.toNode(input);
		if(node.findError().isPresent())
		return node;
		return node.tryCreate().map(NodeAttribute.new).map(() => MapAttributes().with(propertyKey, attribute)).<RuleResult>map(UntypedRuleResult.new).orElse(ErrorRuleResult(CompileError("No name present: ", input)));
	}
	public def fromNode(this, node : Node) : Result<String, Error_> => {
		let mut attributes = node.attributes();
		let mut propertyValue = attributes.apply(propertyKey);
		if(propertyValue.isEmpty())
		return createErr(node);
		let mut asNode = propertyValue.get().asNode();
		if(asNode.isEmpty())
		return createErr(node);
		return child.fromNode(asNode.get());
	}
	private def createErr(this, node : Node) : Err<String, Error_> => {
		let mut format = "Node did not have attribute '%s' as a node.";
		let mut message = format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));
	}
}
