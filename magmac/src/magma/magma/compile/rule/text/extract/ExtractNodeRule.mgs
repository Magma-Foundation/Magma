import magma.api.Err;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
export class def ExtractNodeRule(String propertyKey, Rule child)() => {
	public def toNode(input : String) : RuleResult => {
		let node = child.toNode(input);
		if(node.findError().isPresent())return node;
		return node.tryCreate().map(NodeAttribute.new).map( (attribute) => {MapAttributes().with(propertyKey, attribute);}).<RuleResult>map(UntypedRuleResult.new).orElse(ErrorRuleResult(CompileError("No name present: ", input)));
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		let attributes = node.attributes();
		let propertyValue = attributes.apply(propertyKey);
		if(propertyValue.isEmpty())return createErr(node);
		let asNode = propertyValue.get().asNode();
		if(asNode.isEmpty())return createErr(node);
		return child.fromNode(asNode.get());
	}
	def createErr(node : Node) : Err<String, Error_> => {
		let format = "Node did not have attribute '%s' as a node.";
		let message = format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));
	}
}
