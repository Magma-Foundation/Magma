import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
object ExtractRule {
	def getStringErrorOk(this : Self, value : String) => Ok(value);
}
export default class def ExtractRule() => {
	protected final key : String;
	 ExtractRule(this : Self, key : String) => this=key;
	def fromAttribute : (Self, Node) => Optional<String>;
	def toAttribute : (Self, String) => Result<Attribute, Error_>;
	public def toNode(this : Self, input : String) => toAttribute(input).match(() => UntypedRuleResult(MapAttributes().with(key, attribute)), ErrorRuleResult.new);
	public def fromNode(this : Self, node : Node) => fromAttribute(node).map(ExtractRule.getStringErrorOk).orElseGet(() => createErr(node));
	def createErr(this : Self, node : Node) => {
		
		format : var=
		
		"Property '%s' does not exist.";
		
		message : var=
		
		format.formatted(key);
		return Err(CompileError(message, node.toString()));
	}
	implements Rule;
}