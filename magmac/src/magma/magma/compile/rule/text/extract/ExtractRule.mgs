import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
export default class def ExtractRule() => {
	protected final key : String;
	ExtractRule(key : String) : public => this=key;
	protected abstract fromAttribute : (Node) => Optional<String>;
	protected abstract toAttribute : (String) => Result<Attribute, Error_>;
	public toNode(input : String) : RuleResult => return toAttribute(input).match(() => UntypedRuleResult(MapAttributes().with(key, attribute)), ErrorRuleResult.new);
	public fromNode(node : Node) : Result<String, Error_> => return fromAttribute(node).map(ExtractRule.getStringErrorOk).orElseGet(() => createErr(node));
	private static getStringErrorOk(value : String) : Result<String, Error_> => return Ok(value);
	private createErr(node : Node) : Err<String, Error_> => {
		
		format : var=
		
		"Property '%s' does not exist.";
		
		message : var=
		
		format.formatted(key);
		return Err(CompileError(message, node.toString()));
	}
}