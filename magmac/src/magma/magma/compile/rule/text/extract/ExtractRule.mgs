
import magma.api.Err;
import magma.api.Ok;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
export let mut ExtractRule = () => class () => {
	protected final key : String;
	def ExtractRule(key : String) : public => {
		this=key;
	}
	protected abstract fromAttribute : Optional<String>;
	protected abstract toAttribute : Result<Attribute, Error_>;
	public def toNode(input : String) : RuleResult => {
		return toAttribute(input).match(() => UntypedRuleResult(MapAttributes().with(key, attribute)), ErrorRuleResult.new);
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		return node.attributes().apply(key).flatMap(this.fromAttribute).map(ExtractRule.getStringErrorOk).orElseGet(() => createErr(node));
	}
	private static def getStringErrorOk(value : String) : Result<String, Error_> => {
		return Ok(value);
	}
	private def createErr(node : Node) : Err<String, Error_> => {
		let mut format = "Property '%s' does not exist.";
		let mut message = format.formatted(key);
		return Err(CompileError(message, node.toString()));
	}
};
