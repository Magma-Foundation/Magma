import magma.api.Err;
import magma.api.Ok;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
export class def ExtractRule() => {
	
	protected final key : String;
	ExtractRule(key : String) : public => {
		this=key;
	}
	def fromAttribute(attribute : Attribute) : Optional<String>
	def toAttribute(content : String) : Result<Attribute, Error_>
	public def toNode(input : String) : RuleResult => {
		return toAttribute(input).match( (attribute) => {UntypedRuleResult(MapAttributes().with(key, attribute));}, ErrorRuleResult.new);
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		return;
	}
	def getStringErrorOk(value : String) : Result<String, Error_> => {
		return Ok(value);
	}
	def createErr(node : Node) : Err<String, Error_> => {
		format : var = "Property '%s' does not exist.";
		message : var = format.formatted(key);
		return Err(CompileError(message, node.toString()));
	}
}
