
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
export class def LeftRule(slice : String, child : Rule) => {
public def toNode(this, input : String) : RuleResult => {
if(input.startsWith(slice))
{
let mut content : var = input.substring(slice.length());
return child.toNode(content);}
else
{
return ErrorRuleResult(CompileError(String.format("Input does not start with '%s'.", slice), input));}}
public def fromNode(this, node : Node) : Result<String, Error_> => {
return child.fromNode(node).mapValue(() => slice+inner);}}