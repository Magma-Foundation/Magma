import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
export class def FilterRule() => {
	
	protected final child : Rule;
	FilterRule(child : Rule) : public => {
		this=child;
	}
	public def toNode(input : String) : RuleResult => {
		if(filter(input))return child.toNode(input);
		return ErrorRuleResult(CompileError("Invalid filter: "+computeMessage(), input));
	}
	
	protected abstract computeMessage() : String;
	
	protected abstract filter(input : String) : boolean;
	public def fromNode(node : Node) : Result<String, Error_> => {
		return child.fromNode(node);
	}
}
