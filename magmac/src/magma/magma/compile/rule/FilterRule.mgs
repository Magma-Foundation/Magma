
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
public abstract class def FilterRule() => {
	protected final child : Rule;
	def FilterRule() : public => {
		this=child;}
	public def toNode() : RuleResult => {
		if
		(filter(input))
		return child.toNode(input);
		return ErrorRuleResult(CompileError("Invalid filter: "+computeMessage(), input));}
	protected abstract computeMessage : String;
	protected abstract filter : boolean;
	public def fromNode() : Result<String, Error_> => {
		return child.fromNode(node);}}