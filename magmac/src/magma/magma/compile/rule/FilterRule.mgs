import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
export default object FilterRule {
	protected final child : Rule;
	public def toNode(this : Self, input : String) => {
		if
		(filter(input))
		return child.toNode(input);
		return ErrorRuleResult(CompileError("Invalid filter: "+computeMessage(), input));
	}
	def computeMessage : (Self) => String;
	def filter : (Self, String) => boolean;
	public def fromNode(this : Self, node : Node) => child.fromNode(node);
	implements Rule;
}