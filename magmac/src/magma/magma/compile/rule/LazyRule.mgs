import magma.api.result.Err;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import java.util.Optional;
export default class def LazyRule() => {
	private child : Optional<Rule>;
	LazyRule() => this=Optional.empty();
	public def setRule(child : Rule) => this=Optional.of(child);
	public def toNode(input : String) => child.map(() => inner.toNode(input)).orElse(ErrorRuleResult(CompileError("Child was not set.", input)));
	public def fromNode(node : Node) => child.map(() => inner.fromNode(node)).orElse(Err(CompileError("No child set.", node.toString())));
}