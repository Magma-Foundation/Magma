import magma.api.result.Err;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import java.util.Optional;
export default class def LazyRule() => {
	private child : Optional<Rule>;
	LazyRule : public => {
		this=Optional.empty();
	}
	public setRule : void => {
		this=Optional.of(child);
	}
	public toNode : RuleResult => {
		return child.map(() => inner.toNode(input)).orElse(ErrorRuleResult(CompileError("Child was not set.", input)));
	}
	public fromNode : Result<String, Error_> => {
		return child.map(() => inner.fromNode(node)).orElse(Err(CompileError("No child set.", node.toString())));
	}
}