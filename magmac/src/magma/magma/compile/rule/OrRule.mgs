
import magma.api.Err;
import magma.api.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.MultipleError;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
() => {
	private static def toError(results : List<Result<String, Error_>>) : Err<String, Error_> => {
		return Err(MultipleError(results.stream().map(Result.findErr).flatMap(Optional.stream).toList()));
	}
	public def toNode(input : String) : RuleResult => {
		
		errors : var=
		ArrayList();
		for(rule : Rule in rules()){
			
			result : var=
			rule.toNode(input);
			if
			(result.findAttributes().isPresent())
			{
				return result;
			}
			result.findError().ifPresent(errors.add);
		}
		if
		(errors.isEmpty())
		{
			return ErrorRuleResult(CompileError("No rules were present.", input));
		}
		else
		{
			return ErrorRuleResult(MultipleError(errors));
		}
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		
		results : var=
		ArrayList();
		for(rule : var in rules){
			
			result : var=
			rule.fromNode(node);
			results.add(result);
		}
		
		anyOk : Optional<Result<String, Error_>>=
		Optional.empty();
		for(result : Result<String, Error_> in results){
			if
			(result.isOk())
			{
				anyOk=Optional.of(result);
				break
				;
			}
		}
		return anyOk.orElseGet(() => toError(results));
	}
}
