import magma.api.result.Err;import magma.api.result.Result;import magma.compile.CompileError;import magma.compile.Error_;import magma.compile.MultipleError;import magma.compile.rule.result.ErrorRuleResult;import magma.compile.rule.result.RuleResult;import magma.java.JavaOptionals;import java.util.ArrayList;import java.util.List;import java.util.Optional;export class def OrRule(rules : List<Rule>) => {private static def toError(this, results : List<Result<String, Error_>>) : Err<String, Error_> => {return Err(MultipleError(results.stream().map(() => JavaOptionals.toNative(stringErrorResult.findErr())).flatMap(Optional.stream).toList()));}public def toNode(this, input : String) : RuleResult => {let mut errors : var = ArrayList();for(rule : Rule in rules()){let mut result : var = rule.toNode(input);if(JavaOptionals.toNative(result.findAttributes()).isPresent()){return result;}JavaOptionals.toNative(result.findError()).ifPresent(errors.add);}if(errors.isEmpty()){return ErrorRuleResult(CompileError("No rules were present.", input));}else{return ErrorRuleResult(MultipleError(errors));}}public def fromNode(this, node : Node) : Result<String, Error_> => {let mut results : var = ArrayList();for(rule : var in rules){let mut result : var = rule.fromNode(node);results.add(result);}let mut anyOk : Optional<Result<String, Error_>> = Optional.empty();for(result : Result<String, Error_> in results){if(result.isOk()){anyOk=Optional.of(result);break;}}return anyOk.orElseGet(() => toError(results));}}