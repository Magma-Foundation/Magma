import magma.api.collect.stream.Stream;import magma.api.option.Option;import magma.compile.attribute.Attribute;import magma.compile.attribute.Attributes;import magma.compile.attribute.MapAttributes;import magma.compile.attribute.NodeAttribute;import magma.compile.attribute.NodeListAttribute;import magma.java.JavaList;import magma.java.JavaOptionals;import java.util.List;import java.util.Optional;import java.util.function.Function;() => {ImmutableNode : public => {this(type, MapAttributes());}public findType : String => {return type;}public formatWithDepth : String => {return "\t".repeat(depth)+format(depth);}public format : String => {return type+" = "+attributes.format(depth);}public toString : String => {return formatWithDepth(0);}public is : boolean => {return this.type.equals(type);}public mapAttributes : Node => {return ImmutableNode(type, mapper.apply(attributes));}public retype : Node => {return ImmutableNode(type, attributes);}public withNode : Node => {return with(key, NodeAttribute(value));}private withNodeList0 : Node => {return with(key, NodeListAttribute(values));}public has : boolean => {return attributes.has(child);}private mapNodes0 : Node => {return mapAttributes(() => attributes.mapValue(key, NodeListAttribute.Factory, mapper));}private findNode0 : Optional<Node> => {return attributes.apply(key).flatMap(Attribute.asNode);}public clear : Node => {return ImmutableNode(type);}private findNodeList0 : Optional<List<Node>> => {return attributes.apply(key).flatMap(Attribute.asNodeList);}public findString : Option<String> => {return JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asString));}public findStringList : Option<magma.api.collect.List<String>> => {return JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asStringList).map(JavaList.new));}public streamKeys : Stream<String> => {return attributes.streamKeys();}public with : Node => {return mapAttributes(() => attributes.with(key, value));}public findNode : Option<Node> => {return JavaOptionals.fromNative(findNode0(key));}private findNodeList1 : Option<List<Node>> => {return JavaOptionals.fromNative(findNodeList0(key));}public withNodeList : Node => {return withNodeList0(key, JavaList.toNative(values));}public mapNodes : Node => {return mapNodes0(key, () => JavaList.toNative(mapper.apply(JavaList.fromNative(nodes))));}public findNodeList : Option<magma.api.collect.List<Node>> => {return findNodeList1(key).map(JavaList.fromNative);}}