import magma.api.collect.List;
import magma.api.collect.stream.Stream;
import magma.api.option.Option;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.Attributes;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.attribute.StringAttribute;
import magma.compile.attribute.StringListAttribute;
import magma.java.JavaList;
import magma.java.JavaOptionals;
import java.util.function.Function;
() => {
	ImmutableNode(type : String) : public => this(type, MapAttributes())
	public findType() : String => type;
	public formatWithDepth(depth : int) : String => "\t".repeat(depth)+format(depth);
	public format(depth : int) : String => type+" = "+attributes.format(depth);
	public toString() : String => formatWithDepth(0);
	public is(type : String) : boolean => this.type.equals(type);
	public retype(type : String) : Node => ImmutableNode(type, attributes);
	public withNode(key : String, value : Node) : Node => with(key, NodeAttribute(value));
	public has(child : String) : boolean => attributes.has(child);
	public clear(type : String) : Node => ImmutableNode(type);
	public findString(key : String) : Option<String> => JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asString));
	public findStringList(key : String) : Option<List<String>> => JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asStringList).map(JavaList.new));
	public streamKeys() : Stream<String> => attributes.streamKeys();
	public mapStringList(key : String, mapper : Function<List<String>, List<String>>) : Node => ImmutableNode(type, attributes.mapValue(key, StringListAttribute.Factory, () => JavaList.toNative(mapper.apply(JavaList.fromNative(list)))));
	public withString(key : String, value : String) : Node => with(key, StringAttribute(value));
	public withStringList(key : String, values : List<String>) : Node => with(key, StringListAttribute(JavaList.toNative(values)));
	public with(key : String, value : Attribute) : Node => ImmutableNode(type, attributes.with(key, value));
	public findNode(key : String) : Option<Node> => JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asNode));
	public withNodeList(key : String, values : magma.api.collect.List<Node>) : Node => with(key, NodeListAttribute(JavaList.toNative(values)));
	public mapNodes(key : String, mapper : Function<magma.api.collect.List<Node>, magma.api.collect.List<Node>>) : Node => ImmutableNode(type, attributes.mapValue(key, NodeListAttribute.Factory, () => JavaList.toNative(mapper.apply(JavaList.fromNative(nodes)))));
	public findNodeList(key : String) : Option<magma.api.collect.List<Node>> => JavaOptionals.fromNative(attributes.apply(key).flatMap(Attribute.asNodeList)).map(JavaList.fromNative);
}