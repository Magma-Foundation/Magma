import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
export default class def ParamSplitter() => {
	public split(input : String) : List<String> => {
		
		segments : var=
		
		ArrayList();
		
		buffer : var=
		
		StringBuilder();
		
		depth : var=
		
		0;
		
		queue : var=
		
		IntStream.range(0, input.length()).mapToObj(input.charAt).collect(Collectors.toCollection(LinkedList.new));
		while
		(!queue.isEmpty())
		{
			
			c : var=
			
			queue.pop();
			if
			(c=='\"')
			{
				buffer.append(c);
				while
				(!queue.isEmpty())
				{
					
					next : var=
					
					queue.pop();
					buffer.append(next);
					if
					(next=='\\')
					{
						buffer.append(queue.pop());
						continue
						;
					}
					if
					(next=='\"')
					{
						break
						;
					}
				}
				continue
				;
			}
			if
			(c=='-')
			{
				buffer.append(c);
				if
				(!queue.isEmpty())
				{
					
					next : var=
					
					queue.peek();
					if
					(next=='>')
					{
						buffer.append(queue.pop());
						continue
						;
					}
				}
				continue
				;
			}
			if
			(c==','&&depth==0)
			{
				segments.add(buffer.toString());
				buffer=StringBuilder();
			}
			else
			{
				if
				(c=='(' || c == '<')
				depth++;
				if
				(c==')' || c == '>')
				depth--;
				buffer.append(c);
			}
		}
		segments.add(buffer.toString());
		return segments.stream().filter(() => !value.isBlank()).toList();
	}
}