import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
export class def ParamSplitter() => {
	public def split(input : String) : List<String> => {
		let segments = ArrayList();
		let buffer = StringBuilder();
		let depth = 0;
		let queue = IntStream.range(0, input.length()).mapToObj(input.charAt).collect(Collectors.toCollection(LinkedList.new));
		while(!queue.isEmpty()){
			let c = queue.pop();
			if(c=='\"'){
				buffer.append(c);
				while(!queue.isEmpty()){
					let next = queue.pop();
					buffer.append(next);
					if(next=='\\'){
						buffer.append(queue.pop());
						continue
						
					;
					}
					if(next=='\"'){
						break
						
					;
					}
				}
				continue
				
			;
			}
			if(c=='-'){
				buffer.append(c);
				if(!queue.isEmpty()){
					let next = queue.peek();
					if(next=='>'){
						buffer.append(queue.pop());
						continue
						
					;
					}
				}
				continue
				
			;
			}
			if(c==','&&depth==0){
				segments.add(buffer.toString());
				buffer=StringBuilder();
			}
			else
			{
				if(c=='(' || c == '<')depth++;
				if(c==')' || c == '>')depth--;
				buffer.append(c);
			}
		
		}
		segments.add(buffer.toString());
		return segments.stream().filter( (value) => !value.isBlank();).toList();
	}
}
