import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.MultipleError;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import magma.java.JavaOptionals;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
export default object BackwardsRule {
	def wrapError(leftSlice : String, rightSlice : String, error : Error_) => CompileParentError("Invalid combination.", "[\"" + leftSlice + "\", \"" + rightSlice + "\"]", error);
}
export default class def BackwardsRule(leftRule : Rule, slice : String, rightRule : Rule) => {
	public def toNode(input : String) => {
		
		allIndexes : var=
		
		findAllIndexesReverse(input);
		
		errors : var=
		
		ArrayList();
		for(index : Integer in allIndexes){
			
			leftSlice : var=
			
			input.substring(0, index);
			
			rightSlice : var=
			
			input.substring(index+slice.length());
			
			leftResult : var=
			
			leftRule.toNode(leftSlice);
			if
			(JavaOptionals.toNative(leftResult.findError()).isPresent())
			{
				errors.add(wrapError(leftSlice, rightSlice, JavaOptionals.toNative(leftResult.findError()).get()));
				continue
				;
			}
			
			rightResult : var=
			
			rightRule.toNode(rightSlice);
			if
			(JavaOptionals.toNative(rightResult.findError()).isPresent())
			{
				errors.add(wrapError(leftSlice, rightSlice, JavaOptionals.toNative(rightResult.findError()).get()));
				continue
				;
			}
			
			optional : var=
			
			JavaOptionals.toNative(leftResult.findAttributes()).flatMap(() => JavaOptionals.toNative(rightResult.findAttributes()).map(() => rightAttributes.merge(leftAttributes))).map(UntypedRuleResult.new);
			if
			(optional.isPresent())
			{
				return optional.get();
			}
		}
		if
		(errors.isEmpty())
		{
			return ErrorRuleResult(CompileError("No rules were present.", input));
		}
		else
		{
			return ErrorRuleResult(MultipleError(errors));
		}
	}
	def findAllIndexesReverse(input : String) => {
		
		indexes : List<Integer>=
		
		ArrayList();
		
		index : int=
		
		input.indexOf(slice);
		while
		(index>=0)
		{
			indexes.add(index);
			index=input.indexOf(slice, index+1);
		}
		Collections.reverse(indexes);
		return indexes;
	}
	public def fromNode(node : Node) => leftRule.fromNode(node).flatMapValue(() => rightRule.fromNode(node).mapValue(() => leftResult+slice+rightResult));
	implements Rule;
}