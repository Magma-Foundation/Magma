
import magma.api.Collectors;
import magma.api.Err;
import magma.api.Result;
import magma.api.Streams;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
() => {
	private final propertyKey : String;
	private final childRule : Rule;
	private final splitter : Splitter;
	private final delimiter : String;
	SplitMultipleRule : public => {
		this=propertyKey;
		this=childRule;
		this=splitter;
		this=delimiter;}
	public toNode : RuleResult => {
		
		split : var=
		splitter.split(input);
		
		members : var=
		ArrayList();
		for(childString : String in split){
			
			result : var=
			childRule.toNode(childString);
			if
			(result.findError().isPresent())
			return result.mapErr(() => CompileParentError("Cannot process child.", childString, err));
			
			optional : var=
			result.tryCreate();
			if
			(optional.isEmpty())
			{
				return ErrorRuleResult(CompileError("No name present for.", childString));}
			members.add(optional.get());}
		return UntypedRuleResult(MapAttributes(Map.of(propertyKey, NodeListAttribute(members))));}
	private joinNodes : Result<String, Error_> => {
		return Streams.fromNativeList(list).map(() => childRule.fromNode(node)).collect(Collectors.exceptionally(Collectors.joining(delimiter))).mapValue(() => inner.orElse(""));}
	public fromNode : Result<String, Error_> => {
		return node.attributes().apply(propertyKey).flatMap(Attribute.asNodeList).map(this.joinNodes).orElseGet(() => createErr(node));}
	private createErr : Err<String, Error_> => {
		
		format : var=
		"Property '%s' does not exist on node.";
		
		message : var=
		format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));}}