
import magma.api.Collectors;
import magma.api.Err;
import magma.api.Result;
import magma.api.Streams;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.attribute.Attribute;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
public final class def SplitMultipleRule() => {
	private final propertyKey : String;
	private final childRule : Rule;
	private final splitter : Splitter;
	private final delimiter : String;
	def SplitMultipleRule(splitter : Splitter, delimiter : String, propertyKey : String, childRule : Rule) : public => {
		this=propertyKey;
		this=childRule;
		this=splitter;
		this=delimiter;
	}
	public def toNode(input : String) : RuleResult => {
		split = splitter.split(input);
		members = ArrayList();
		for(childString : String in split){
			result = childRule.toNode(childString);
			if
			(result.findError().isPresent())
			return result.mapErr(() => CompileParentError("Cannot process child.", childString, err));
			optional = result.tryCreate();
			if
			(optional.isEmpty())
			{
				return ErrorRuleResult(CompileError("No name present for.", childString));
			}
			members.add(optional.get());
		}
		return UntypedRuleResult(MapAttributes(Map.of(propertyKey, NodeListAttribute(members))));
	}
	private def joinNodes(list : List<Node>) : Result<String, Error_> => {
		return Streams.fromNativeList(list).map(() => childRule.fromNode(node)).collect(Collectors.exceptionally(Collectors.joining(delimiter))).mapValue(() => inner.orElse(""));
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		return node.attributes().apply(propertyKey).flatMap(Attribute.asNodeList).map(this.joinNodes).orElseGet(() => createErr(node));
	}
	private def createErr(node : Node) : Err<String, Error_> => {
		format = "Property '%s' does not exist on node.";
		message = format.formatted(propertyKey);
		return Err(CompileError(message, node.toString()));
	}
}
