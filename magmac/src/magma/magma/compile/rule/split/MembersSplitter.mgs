import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
export class def MembersSplitter() => {
	public def split(input : String) : List<String> => {
		let current = State();
		let queue = IntStream.range(0, input.length()).mapToObj(input.charAt).collect(Collectors.toCollection(LinkedList.new));
		while(!queue.isEmpty()){
			let c = queue.pop();
			let state = current.append(c);
			if(c=='/'&&state.isLevel()&&!queue.isEmpty()){
				let after = queue.peek();
				if(after=='/'){
					// We are in a single-line comment.
					let withAfter = state.append(queue.pop());
					while(!queue.isEmpty()){
						let next = queue.pop();
						withAfter=withAfter.append(next);
						if(next=='\n'){
							break
							
						;
						}
					}
					current=withAfter.advance();
					continue
					
				;
				}
				else if(after=='*'){
					// We are in a block comment.
					let withAfter = state.append(queue.pop());
					while(!queue.isEmpty()){
						let next = queue.pop();
						withAfter=withAfter.append(next);
						if(next=='*'&&!queue.isEmpty()&&queue.peek()=='/'){
							withAfter=withAfter.append(queue.pop());
							break
							
						;
						}
					}
					current=withAfter.advance();
					continue
					
				;
				}
			}
			if(c=='\''){
				let next = queue.pop();
				let withNext = current.append(next);
				let escaped = next=='\\'?current.append(queue.pop()):withNext;
				current=escaped.append(queue.pop());
				continue
				
			;
			}
			if(c=='\"'){
				let withString = current;
				while(!queue.isEmpty()){
					let next = queue.pop();
					withString=withString.append(next);
					if(next=='\\'){
						withString.append(queue.pop());
						continue
						
					;
					}
					if(next=='\"'){
						break
						
					;
					}
				}
				current=withString;
				continue
				
			;
			}
			if(c==';'&&state.isLevel()){
				current=state.advance();
			}
			else if(c=='}'&&state.isShallow()){
				current=state.exit().advance();
			}
			else if(c=='{' || c == '('){
				current=state.enter();
			}
			else if(c=='}' || c == ')'){
				current=state.exit();
			}
			else
			{
				current=state;
			}
		
		}
		return current.advance().tokens.stream().filter((token) => !token.isBlank()).toList();
	}
	class def State(List<String> tokens, StringBuilder buffer, int depth)() => {
		 State() : public => {
			this(Collections.emptyList(), StringBuilder(), 0);
		}
		def advance() : State => {
			let copy = ArrayList(this.tokens);
			copy.add(this.buffer.toString());
			return State(copy, StringBuilder(), depth);
		}
		def append(c : char) : State => {
			return State(tokens, this.buffer.append(c), depth);
		}
		public def isLevel() : boolean => {
			return this.depth==0;
		}
		public def enter() : State => {
			return State(tokens, buffer, depth+1);
		}
		public def exit() : State => {
			return State(tokens, buffer, depth-1);
		}
		public def isShallow() : boolean => {
			return depth==1;
		}
	}
	implements Splitter;
}
