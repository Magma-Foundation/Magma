
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
() => {
	public split : List<String> => {
		
		current : var=
		State();
		
		queue : var=
		IntStream.range(0, input.length()).mapToObj(input.charAt).collect(Collectors.toCollection(LinkedList.new));
		while
		(!queue.isEmpty())
		{
			
			c : var=
			queue.pop();
			
			state : var=
			current.append(c);
			if
			(c=='/'&&state.isLevel()&&!queue.isEmpty())
			{
				
				after : var=
				queue.peek();
				if
				(after=='/')
				{
					// We are in a single-line comment.
					
					withAfter : var=
					state.append(queue.pop());
					while
					(!queue.isEmpty())
					{
						
						next : var=
						queue.pop();
						withAfter=withAfter.append(next);
						if
						(next=='\n')
						{
							break
							;}}
					current=withAfter.advance();
					continue
					;}
				else if(after=='*'){
					// We are in a block comment.
					
					withAfter : var=
					state.append(queue.pop());
					while
					(!queue.isEmpty())
					{
						
						next : var=
						queue.pop();
						withAfter=withAfter.append(next);
						if
						(next=='*'&&!queue.isEmpty()&&queue.peek()=='/')
						{
							withAfter=withAfter.append(queue.pop());
							break
							;}}
					current=withAfter.advance();
					continue
					;}}
			if
			(c=='\'')
			{
				
				next : var=
				queue.pop();
				
				withNext : var=
				current.append(next);
				
				escaped : var=
				next=='\\'?current.append(queue.pop()):withNext;
				current=escaped.append(queue.pop());
				continue
				;}
			if
			(c=='\"')
			{
				
				withString : var=
				current;
				while
				(!queue.isEmpty())
				{
					
					next : var=
					queue.pop();
					withString=withString.append(next);
					if
					(next=='\\')
					{
						withString.append(queue.pop());
						continue
						;}
					if
					(next=='\"')
					{
						break
						;}}
				current=withString;
				continue
				;}
			if
			(c==';'&&state.isLevel())
			{
				current=state.advance();}
			else if(c=='}'&&state.isShallow()){
				current=state.exit().advance();}
			else if(c=='{' || c == '('){
				current=state.enter();}
			else if(c=='}' || c == ')'){
				current=state.exit();}
			else
			{
				current=state;}}
		return current.advance().tokens.stream().filter(() => !token.isBlank()).toList();}
	() => {
		State : public => {
			this(Collections.emptyList(), StringBuilder(), 0);}
		private advance : State => {
			
			copy : var=
			ArrayList(this.tokens);
			copy.add(this.buffer.toString());
			return State(copy, StringBuilder(), depth);}
		private append : State => {
			return State(tokens, this.buffer.append(c), depth);}
		public isLevel : boolean => {
			return this.depth==0;}
		public enter : State => {
			return State(tokens, buffer, depth+1);}
		public exit : State => {
			return State(tokens, buffer, depth-1);}
		public isShallow : boolean => {
			return depth==1;}}}