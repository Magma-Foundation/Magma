
import magma.api.Result;
import magma.api.Tuple;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
public abstract class def SplitOnceRule() => {
	protected final leftRule : Rule;
	protected final slice : String;
	protected final rightRule : Rule;
	def SplitOnceRule(leftRule : Rule, slice : String, rightRule : Rule) : public => {
		this=leftRule;
		this=slice;
		this=rightRule;
	}
	public def toNode(input : String) : RuleResult => {
		let mut tuple = computeIndex(input).map(() => {
			let mut left1 = input.substring(0, keywordIndex);
			let mut right1 = input.substring(keywordIndex+slice.length());
			return Tuple(left1, right1);
		});
		return tuple.map(() => {
			let mut left = contentStart.left();
			let mut right = contentStart.right();
			let mut leftResult = leftRule.toNode(left);
			if(leftResult.findError().isPresent())
			return leftResult;
			let mut rightResult = rightRule.toNode(right);
			if(rightResult.findError().isPresent())
			return rightResult;
			return leftResult.findAttributes().flatMap(() => rightResult.findAttributes().map(() => rightAttributes.merge(leftAttributes))).map(UntypedRuleResult.new).orElseThrow();
		}).orElseGet(() => {
			let mut format = "Slice '%s' not present.";
			let mut message = format.formatted(slice);
			return ErrorRuleResult(CompileError(message, input));
		});
	}
	protected abstract computeIndex : Optional<Integer>;
	public def fromNode(node : Node) : Result<String, Error_> => {
		let mut leftResult = leftRule.fromNode(node);
		let mut rightValue = rightRule.fromNode(node);
		return leftResult.flatMapValue(() => rightValue.mapValue(() => left+slice+right)).mapErr(() => createError(node, err));
	}
	private def createError(node : Node, err : Error_) : CompileParentError => {
		let mut format = "Cannot merge node using slice '%s'.";
		let mut message = format.formatted(slice);
		return CompileParentError(message, node.toString(), err);
	}
}
