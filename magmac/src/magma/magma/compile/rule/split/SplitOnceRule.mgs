import magma.api.Result;
import magma.api.Tuple;
import magma.compile.CompileError;
import magma.compile.CompileParentError;
import magma.compile.Error_;
import magma.compile.rule.Node;
import magma.compile.rule.Rule;
import magma.compile.rule.result.ErrorRuleResult;
import magma.compile.rule.result.RuleResult;
import magma.compile.rule.result.UntypedRuleResult;
import java.util.Optional;
export class def SplitOnceRule() => {
	
	protected final leftRule : Rule;
	
	protected final slice : String;
	
	protected final rightRule : Rule;
	SplitOnceRule(leftRule : Rule, slice : String, rightRule : Rule) : public => {
		this=leftRule;
		this=slice;
		this=rightRule;
	}
	public def toNode(input : String) : RuleResult => {
		tuple : var = computeIndex(input).map( (keywordIndex) => {
			left1 : var = input.substring(0, keywordIndex);
			right1 : var = input.substring(keywordIndex+slice.length());
			return Tuple(left1, right1);
		});
		return;
	}
	def computeIndex(input : String) : Optional<Integer>
	public def fromNode(node : Node) : Result<String, Error_> => {
		leftResult : var = leftRule.fromNode(node);
		rightValue : var = rightRule.fromNode(node);
		return leftResult.flatMapValue( (left) => {rightValue.mapValue( (right) => left+slice+right);}).mapErr( (err) => {createError(node, err);});
	}
	def createError(node : Node, err : Error_) : CompileParentError => {
		format : var = "Cannot merge node using slice '%s'.";
		message : var = format.formatted(slice);
		return CompileParentError(message, node.toString(), err);
	}
}
