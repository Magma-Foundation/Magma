import magma.api.Result;
import magma.compile.Error_;
import magma.compile.rule.result.RuleResult;
import java.util.List;
export class def OptionalRule() => {
	private final key : String;
	private final child : Rule;
	private final onEmpty : Rule;
	private final orRule : OrRule;
	 OptionalRule(key : String, child : Rule, onEmpty : Rule) : public => {
		this=key;
		this=child;
		this=onEmpty;
		this=OrRule(List.of(child, onEmpty));
	}
	public def toNode(input : String) : RuleResult => {
		return orRule.toNode(input);
	}
	public def fromNode(node : Node) : Result<String, Error_> => {
		if(node.has(key)){
			return child.fromNode(node);
		}
		else
		{
			return onEmpty.fromNode(node);
		}
	
	}
	implements Rule;
}
