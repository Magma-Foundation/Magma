import magma.api.option.Option;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.ImmutableNode;
import magma.compile.rule.Node;
import java.util.function.Function;
export struct RuleResult {
	private static createNothingPresentError() : Err<Node, Error_> => Err(CompileError("Neither value nor error is present.", ""));
	private static wrapInOk(inner : Node) : Result<Node, Error_> => Ok(inner);
	findError : () => Option<Error_>;
	findAttributes : () => Option<Attributes>;
	tryCreate : () => Option<Node>;
	withType : (String) => RuleResult;
	mapErr : (Function<Error_, Error_>) => RuleResult;
	default create() : Result<Node, Error_> => tryCreate().map(RuleResult.wrapInOk).orElseGet(this.wrapInErr);
	private wrapInErr() : Result<Node, Error_> => findError().map(() => Err(err)).orElseGet(RuleResult.createNothingPresentError);
}