import magma.api.option.Option;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.compile.CompileError;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.ImmutableNode;
import magma.compile.rule.Node;
import java.util.function.Function;
export struct RuleResult {
	static def createNothingPresentError(this : Self) => Err(CompileError("Neither value nor error is present.", ""));
	static def wrapInOk(this : Self, inner : Node) => Ok(inner);
	findError : (Self) => Option<Error_>;
	findAttributes : (Self) => Option<Attributes>;
	tryCreate : (Self) => Option<Node>;
	withType : (Self, String) => RuleResult;
	mapErr : (Self, Function<Error_, Error_>) => RuleResult;
	def create(this : Self) => tryCreate().map(RuleResult.wrapInOk).orElseGet(this.wrapInErr);
	def wrapInErr(this : Self) => findError().map(() => Err(err)).orElseGet(RuleResult.createNothingPresentError);
}