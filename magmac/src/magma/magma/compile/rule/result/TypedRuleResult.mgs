import magma.api.option.Option;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.Node;
import magma.java.JavaOptionals;
import java.util.Optional;
import java.util.function.Function;
export class def TypedRuleResult(name : String, attributes : Attributes) => {
	private def findAttributes0(this) : Optional<Attributes> => {
		return Optional.of(attributes);
	}
	private def tryCreate0(this) : Optional<Node> => {
		return Optional.of(Node(name, attributes));
	}
	private def findError0(this) : Optional<Error_> => {
		return Optional.empty();
	}
	public def withType(this, type : String) : RuleResult => {
		return this;
	}
	public def mapErr(this, mapper : (Error_) => Error_) : RuleResult => {
		return this;
	}
	public def findError(this) : Option<Error_> => {
		return JavaOptionals.fromNative(findError0());
	}
	public def findAttributes(this) : Option<Attributes> => {
		return JavaOptionals.fromNative(findAttributes0());
	}
	public def tryCreate(this) : Option<Node> => {
		return JavaOptionals.fromNative(tryCreate0());
	}
}
