import magma.api.option.Option;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.ImmutableNode;
import magma.compile.rule.Node;
import magma.java.JavaOptionals;
import java.util.Optional;
import java.util.function.Function;
export default class def TypedRuleResult(name : String, attributes : Attributes) => {
	def findAttributes0() => Optional.of(attributes);
	def tryCreate0() => Optional.of(ImmutableNode(name, attributes));
	def findError0() => Optional.empty();
	public def withType(type : String) => this;
	public def mapErr(mapper : Function<Error_, Error_>) => this;
	public def findError() => JavaOptionals.fromNative(findError0());
	public def findAttributes() => JavaOptionals.fromNative(findAttributes0());
	public def tryCreate() => JavaOptionals.fromNative(tryCreate0());
	implements RuleResult;
}