import magma.api.option.Option;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.ImmutableNode;
import magma.compile.rule.Node;
import magma.java.JavaOptionals;
import java.util.Optional;
import java.util.function.Function;
() => {
	private findAttributes0() : Optional<Attributes> => Optional.of(attributes);
	private tryCreate0() : Optional<Node> => Optional.of(ImmutableNode(name, attributes));
	private findError0() : Optional<Error_> => Optional.empty();
	public withType(type : String) : RuleResult => this;
	public mapErr(mapper : Function<Error_, Error_>) : RuleResult => this;
	public findError() : Option<Error_> => JavaOptionals.fromNative(findError0());
	public findAttributes() : Option<Attributes> => JavaOptionals.fromNative(findAttributes0());
	public tryCreate() : Option<Node> => JavaOptionals.fromNative(tryCreate0());
}