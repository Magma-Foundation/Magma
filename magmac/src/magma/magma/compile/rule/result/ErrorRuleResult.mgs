import magma.api.option.Option;
import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.Node;
import magma.java.JavaOptionals;
import java.util.Optional;
import java.util.function.Function;
() => {
	private findError0 : Optional<Error_> => {
		return Optional.of(e);
	}
	public mapErr : RuleResult => {
		return ErrorRuleResult(mapper.apply(e));
	}
	private findAttributes0 : Optional<Attributes> => {
		return Optional.empty();
	}
	private tryCreate0 : Optional<Node> => {
		return Optional.empty();
	}
	public withType : RuleResult => {
		return this;
	}
	public findError : Option<Error_> => {
		return JavaOptionals.fromNative(findError0());
	}
	public findAttributes : Option<Attributes> => {
		return JavaOptionals.fromNative(findAttributes0());
	}
	public tryCreate : Option<Node> => {
		return JavaOptionals.fromNative(tryCreate0());
	}
}