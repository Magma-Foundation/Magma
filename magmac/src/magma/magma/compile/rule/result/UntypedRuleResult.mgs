import magma.compile.Error_;
import magma.compile.attribute.Attributes;
import magma.compile.rule.Node;
import java.util.Optional;
import java.util.function.Function;
export class def UntypedRuleResult(Attributes attributes)() => {
	public def findName() : Optional<String> => {
		return Optional.empty();
	}
	public def findAttributes() : Optional<Attributes> => {
		return Optional.of(attributes);
	}
	public def tryCreate() : Optional<Node> => {
		return Optional.empty();
	}
	public def findError() : Optional<Error_> => {
		return Optional.empty();
	}
	public def withType(type : String) : RuleResult => {
		return TypedRuleResult(type, attributes);
	}
	public def mapErr(mapper : Function<Error_, Error_>) : RuleResult => {
		return this;
	}
}
