import magma.compile.attribute.Attribute;
import magma.compile.attribute.Attributes;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.attribute.StringAttribute;
import magma.compile.attribute.StringListAttribute;
import java.util.List;
import java.util.function.Function;
export class def Node(String type, Attributes attributes)() => {
	Node(type : String) : public => {
		this(type, MapAttributes());
	}
	public def mapNode(key : String, nodeNodeFunction : Node => Node) : Node => {
		return mapAttributes((attributes) => attributes.mapValue(key, NodeAttribute.Factory, nodeNodeFunction));
	}
	public def withString(key : String, value : String) : Node => {
		return with(key, StringAttribute(value));
	}
	def with(key : String, value : Attribute) : Node => {
		return mapAttributes((attributes) => attributes.with(key, value));
	}
	public def formatWithDepth(depth : int) : String => {
		return "\t".repeat(depth)+format(depth);
	}
	public def format(depth : int) : String => {
		return type+" = "+attributes.format(depth);
	}
	public def toString() : String => {
		return formatWithDepth(0);
	}
	public def is(type : String) : boolean => {
		return this.type.equals(type);
	}
	public def mapAttributes(mapper : Attributes => Attributes) : Node => {
		return Node(type, mapper.apply(attributes));
	}
	public def retype(type : String) : Node => {
		return Node(type, attributes);
	}
	public def withAttributes(attributes : Attributes) : Node => {
		return Node(type, attributes);
	}
	public def withNode(key : String, value : Node) : Node => {
		return with(key, NodeAttribute(value));
	}
	public def withNodeList(key : String, values : List<Node>) : Node => {
		return with(key, NodeListAttribute(values));
	}
	public def withStringList(key : String, values : List<String>) : Node => {
		return with(key, StringListAttribute(values));
	}
	public def remove(key : String) : Node => {
		return Node(type, attributes.remove(key));
	}
	public def has(child : String) : boolean => {
		return attributes.has(child);
	}
}
