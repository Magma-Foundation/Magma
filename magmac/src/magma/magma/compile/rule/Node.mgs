import magma.compile.attribute.Attribute;
import magma.compile.attribute.Attributes;
import magma.compile.attribute.MapAttributes;
import magma.compile.attribute.NodeAttribute;
import magma.compile.attribute.NodeListAttribute;
import magma.compile.attribute.StringAttribute;
import magma.compile.attribute.StringListAttribute;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
export class def Node(type : String, attributes : Attributes) => {
def Node(this, type : String) : public => {
this(type, MapAttributes());}
public def mapNode(this, key : String, nodeNodeFunction : (Node) => Node) : Node => {
return mapAttributes(() => attributes.mapValue(key, NodeAttribute.Factory, nodeNodeFunction));}
public def withString(this, key : String, value : String) : Node => {
return with(key, StringAttribute(value));}
private def with(this, key : String, value : Attribute) : Node => {
return mapAttributes(() => attributes.with(key, value));}
public def formatWithDepth(this, depth : int) : String => {
return "\t".repeat(depth)+format(depth);}
public def format(this, depth : int) : String => {
return type+" = "+attributes.format(depth);}
public def toString(this) : String => {
return formatWithDepth(0);}
public def is(this, type : String) : boolean => {
return this.type.equals(type);}
public def mapAttributes(this, mapper : (Attributes) => Attributes) : Node => {
return Node(type, mapper.apply(attributes));}
public def retype(this, type : String) : Node => {
return Node(type, attributes);}
public def withAttributes(this, attributes : Attributes) : Node => {
return Node(type, attributes);}
public def withNode(this, key : String, value : Node) : Node => {
return with(key, NodeAttribute(value));}
public def withNodeList(this, key : String, values : List<Node>) : Node => {
return with(key, NodeListAttribute(values));}
public def withStringList(this, key : String, values : List<String>) : Node => {
return with(key, StringListAttribute(values));}

/*
    TODO: throw an error if the property requested doesn't exist.
     */
public def remove(this, key : String) : Node => {
return Node(type, attributes.remove(key));}
public def has(this, child : String) : boolean => {
return attributes.has(child);}
public def mapNodes(this, key : String, mapper : (List<Node>) => List<Node>) : Node => {
return mapAttributes(() => attributes.mapValue(key, NodeListAttribute.Factory, mapper));}
public def mapOrSetNodeList(this, key : String, onPresent : (List<Node>) => List<Node>, onEmpty : () => List<Node>) : Node => {
if(has(key))
{
return mapAttributes(() => attributes.mapValue(key, NodeListAttribute.Factory, onPresent));}
else
{
return with(key, NodeListAttribute(onEmpty.get()));}}
public def mapOrSetStringList(this, key : String, onPresent : (List<String>) => List<String>, onEmpty : () => List<String>) : Node => {
if(has(key))
{
return mapAttributes(() => attributes.mapValue(key, StringListAttribute.Factory, onPresent));}
else
{
return with(key, StringListAttribute(onEmpty.get()));}}
public def findNode(this, key : String) : Optional<Node> => {
return attributes.apply(key).flatMap(Attribute.asNode);}
public def findString(this, key : String) : Optional<String> => {
return attributes.apply(key).flatMap(Attribute.asString);}
public def findStringList(this, key : String) : Optional<List<String>> => {
return attributes.apply(key).flatMap(Attribute.asStringList);}
public def clear(this, type : String) : Node => {
return Node(type);}
public def findNodeList(this, key : String) : Optional<List<Node>> => {
return attributes.apply(key).flatMap(Attribute.asNodeList);}}