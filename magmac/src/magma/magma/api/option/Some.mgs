
import magma.api.Tuple;
import java.util.function.Function;
import java.util.function.Supplier;
export class def Some<T>(value : T) => {
public def map<R>(this, mapper : (T) => R) : Option<R> => {
return Some(mapper.apply(value));}
public def orElseGet(this, supplier : () => T) : T => {
return value;}
public def orElse(this, other : T) : T => {
return value;}
public def isPresent(this) : boolean => {
return true;}
public def toTuple(this, other : T) : Tuple<Boolean, T> => {
return Tuple(true, value);}
public def isEmpty(this) : boolean => {
return false;}
public def flatMap<R>(this, mapper : (T) => Option<R>) : Option<R> => {
return mapper.apply(value);}
public def orElsePanic(this) : T => {
return value;}}