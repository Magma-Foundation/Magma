import magma.api.Tuple;
import magma.lang.Instance;
import java.util.function.Function;
import java.util.function.Supplier;
export default class def None<T>() => {
	public def None<T>(this : Self) => None();
	public def map<R>(this : Self, mapper : Function<T, R>) => None();
	public def orElseGet(this : Self, supplier : Supplier<T>) => supplier.get();
	public def orElse(this : Self, other : T) => other;
	public def isPresent(this : Self) => false;
	public def toTuple(this : Self, other : T) => Tuple(false, other);
	public def isEmpty(this : Self) => true;
	public def flatMap<R>(this : Self, mapper : Function<T, Option<R>>) => None();
	public def orElsePanic(this : Self) => throw RuntimeException("Option was empty!");
	public def and<R>(this : Self, other : Option<R>) => None();
	implements Option<T>;
}