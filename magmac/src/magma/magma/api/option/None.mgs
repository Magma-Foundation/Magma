import magma.api.Tuple;
import magma.lang.Instance;
import java.util.function.Function;
import java.util.function.Supplier;
export default class def None() => {
	public static None<T>() : None<T> => None();
	public map<R>(mapper : Function<T, R>) : Option<R> => None();
	public orElseGet(supplier : Supplier<T>) : T => supplier.get();
	public orElse(other : T) : T => other;
	public isPresent() : boolean => false;
	public toTuple(other : T) : Tuple<Boolean, T> => Tuple(false, other);
	public isEmpty() : boolean => true;
	public flatMap<R>(mapper : Function<T, Option<R>>) : Option<R> => None();
	public orElsePanic() : T => throw RuntimeException("Option was empty!");
	public and<R>(other : Option<R>) : Option<Tuple<T, R>> => None();
}