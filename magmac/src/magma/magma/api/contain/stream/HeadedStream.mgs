import magma.api.Tuple;
import magma.api.contain.collect.Collector;
import magma.api.option.Option;
import magma.api.result.Ok;
import magma.api.result.Result;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
export class def HeadedStream<T>(provider : Head<T>) => {
	public def foldLeftToResult<R, E>(initial : R, mapper : (R, T) => Result<R, E>) => this.foldLeft(Ok.from(initial), () => reResult.flatMapValue(() => mapper.apply(inner, t)));
	public def anyMatch(predicate : (T) => Bool) => foldLeft(false, () => aBoolean||predicate.test(t));
	public def filter(filter : (T) => Bool) => flatMap(() => HeadedStream(filter.test(value) ? SingleHead(value) : EmptyHead.EmptyHead()));
	public def flatMap<R>(mapper : (T) => Head<R>) => HeadedStream(head().map(mapper).map(() => FlatMapHead(initial, this, mapper)).orElse(EmptyHead.EmptyHead()));
	public def extend<R>(mapper : (T) => R) => map(() => Tuple(value, mapper.apply(value)));
	public def map<R>(mapper : (T) => R) => HeadedStream(() => this.provider.head().map(mapper));
	public def collect<C>(collector : Collector<T, C>) => {
		let mut current = collector.createInitial();
		return foldLeft(current, collector.fold);
	}
	public def foldLeft<C>(current : C, folder : (C, T) => C) => while(true){
		let mut finalCurrent = current;
		let mut tuple = head().map(() => folder.apply(finalCurrent, head)).toTuple(current);
		if(tuple.left())
		{
			current = tuple.right();
		}
		else
		{
			return current;
		}
	}
	public def head() => provider.head();
	implements Stream<T>;
}