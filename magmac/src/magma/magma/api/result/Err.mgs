import magma.api.option.Option;
import magma.java.JavaOptionals;
import java.util.Optional;
import java.util.function.Function;
export class def Err<T, E>(value : E) => {
	def findValue1() => Optional.empty();
	def findErr0() => Optional.of(value);
	public def flatMapValue<R>(mapper : Function<T, Result<R, E>>) => Err(value);
	public def mapValue<R>(mapper : Function<T, R>) => Err(value);
	public def isOk() => false;
	public def mapErr<R>(mapper : Function<E, R>) => Err(mapper.apply(value));
	public def match<R>(onOk : Function<T, R>, onErr : Function<E, R>) => onErr.apply(value);
	public def findValue() => JavaOptionals.fromNative(findValue1());
	public def findErr() => JavaOptionals.fromNative(findErr0());
	implements Result<T, E>;
}