
import java.util.Optional;
import java.util.function.Function;
export class def AbstractStream<T>(provider : Head<T>) => {
	public def head() : Optional<T> => {
		return this.provider.head();
	}
	public def map<R>(mapper : (T) => R) : Stream<R> => {
		let mut outer = this.provider;
		return AbstractStream(() => outer.head().map(mapper));
	}
	public def collect<C>(collector : Collector<T, C>) : C => {
		let mut current = collector.createInitial();
		while(true)
		{
			let mut finalCurrent : C = current;
			let mut tuple = Options.toTuple(head().map(() => collector.fold(finalCurrent, head)), current);
			if(tuple.left())
			{
				current=tuple.right();
			}
			else
			{
				return current;
			}
		}
	}
}
