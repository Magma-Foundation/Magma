
import java.util.Optional;
import java.util.function.Function;
public abstract class def AbstractStream() => {
	public def map<R>(mapper : (T) => R) : Stream<R> => {
		return AbstractStream((() => {
			return {
				public def head() : Optional<R> => {
					return AbstractStream.this.head().map(mapper);
				}
			};
		})())();
	}
	public def collect<C>(collector : Collector<T, C>) : C => {
		
		current : var=
		collector.createInitial();
		while
		(true)
		{
			
			finalCurrent : C=
			current;
			
			tuple : var=
			Options.toTuple(head().map(() => collector.fold(finalCurrent, head)), current);
			if
			(tuple.left())
			{
				current=tuple.right();
			}
			else
			{
				return current;
			}
		}
	}
}
