
import java.util.Optional;
import java.util.function.Function;
export let mut AbstractStream<T> = () => class () => {
	public def map<R>(mapper : (T) => R) : Stream<R> => {
		return AbstractStream((() => {
			return {
				public def head() : Optional<R> => {
					return AbstractStream.this.head().map(mapper);
				}
			};
		})())();
	}
	public def collect<C>(collector : Collector<T, C>) : C => {
		let mut current = collector.createInitial();
		while(true)
		{
			let mut finalCurrent : C = current;
			let mut tuple = Options.toTuple(head().map(() => collector.fold(finalCurrent, head)), current);
			if(tuple.left())
			{
				current=tuple.right();
			}
			else
			{
				return current;
			}
		}
	}
};
