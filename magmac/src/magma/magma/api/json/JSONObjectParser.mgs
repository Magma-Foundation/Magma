import magma.api.Tuple;
import magma.api.collect.Map;
import magma.api.collect.stream.RequiredCollector;
import magma.api.option.None;
import magma.api.option.Option;
import magma.java.JavaMap;
() => {
	public parse : Option<JSONValue> => {
		if
		(!input.startsWith("{")||!input.endsWith("}"))
		return None.None();
		return JSON.split(input.substring(1, input.length()-1)).stream().map(this.parseEntry).collect(RequiredCollector(JavaMap.collecting())).map(JSONObject.new);
	}
	private parseEntry : Option<Tuple<String, JSONValue>> => {
		
		separator : var=
		
		inner.indexOf(':');
		if
		(separator==-1)
		return None.None();
		
		left : var=
		
		inner.substring(0, separator).strip();
		
		right : var=
		
		inner.substring(separator+1).strip();
		if
		(!left.startsWith("\"")||!left.endsWith("\""))
		{
			return None.None();
		}
		
		key : var=
		
		left.substring(1, left.length()-1);
		return valueParser.parse(right).map(() => Tuple(key, value));
	}
}