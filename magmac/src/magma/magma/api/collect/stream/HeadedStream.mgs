import magma.api.Tuple;
import magma.api.option.None;
import magma.api.option.Option;
import magma.api.result.Ok;
import magma.api.result.Result;
import magma.java.JavaOptionals;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
() => {
	public def foldLeftToResult<R, E>(this : Self, initial : R, mapper : BiFunction<R, T, Result<R, E>>) => this.foldLeft(Ok.from(initial), () => reResult.flatMapValue(() => mapper.apply(inner, t)));
	public def anyMatch(this : Self, predicate : Predicate<T>) => foldLeft(false, () => aBoolean||predicate.test(t));
	public def filter(this : Self, filter : Predicate<T>) => flatMap(() => HeadedStream(filter.test(value)?SingleHead(value):EmptyHead.EmptyHead()));
	public def flatMap<R>(this : Self, mapper : Function<T, Head<R>>) => HeadedStream(head().map(mapper).map(() => FlatMapHead(initial, this, mapper)).orElse(EmptyHead.EmptyHead()));
	public def extend<R>(this : Self, mapper : Function<T, R>) => map(() => Tuple(value, mapper.apply(value)));
	public def map<R>(this : Self, mapper : Function<T, R>) => HeadedStream(() => this.provider.head().map(mapper));
	public def collect<C>(this : Self, collector : Collector<T, C>) => {
		
		current : var=
		
		collector.createInitial();
		return foldLeft(current, collector.fold);
	}
	public def foldLeft<C>(this : Self, current : C, folder : BiFunction<C, T, C>) => while(true){
		
		finalCurrent : C=
		
		current;
		
		tuple : var=
		
		JavaOptionals.toTuple(JavaOptionals.toNative(head()).map(() => folder.apply(finalCurrent, head)), current);
		if
		(tuple.left())
		{
			current=tuple.right();
		}
		else
		{
			return current;
		}
	}
	public def head(this : Self) => provider.head();
	object FlatMapHead {
		private final outer : Head<T>;
		private final mapper : Function<T, Head<R>>;
		private current : Head<R>;
		public def head(this : Self) => while(true){
			
			currentHead : var=
			
			current.head();
			if
			(currentHead.isPresent())
			return currentHead;
			
			tuple : var=
			
			outer.head().map(mapper).toTuple(current);
			if
			(tuple.left())
			{
				current=tuple.right();
			}
			else
			{
				return None.None();
			}
		}
		implements Head<R>;
	}
}