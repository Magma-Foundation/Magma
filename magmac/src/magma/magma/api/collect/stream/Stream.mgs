import magma.api.Tuple;
import magma.api.collect.List;
import magma.api.option.Option;
import magma.api.result.Result;
import magma.compile.rule.Node;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
export struct Stream {
	
	map<R> : (Self, Function<T, R>) => Stream<R>;
	
	collect<C> : (Self, Collector<T, C>) => C;
	
	foldLeft<C> : (Self, C, BiFunction<C, T, C>) => C;
	head : (Self) => Option<T>;
	
	foldLeftToResult<R, E> : (Self, R, BiFunction<R, T, Result<R, E>>) => Result<R, E>;
	anyMatch : (Self, Predicate<T>) => boolean;
	filter : (Self, Predicate<T>) => Stream<T>;
	
	flatMap<R> : (Self, Function<T, Head<R>>) => Stream<R>;
	
	extend<R> : (Self, Function<T, R>) => Stream<Tuple<T, R>>;
}