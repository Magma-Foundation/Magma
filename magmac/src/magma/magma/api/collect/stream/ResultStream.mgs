import magma.api.Tuple;
import magma.api.option.Option;
import magma.api.result.Err;
import magma.api.result.Ok;
import magma.api.result.Result;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
export object ResultStream {
	def flatMapElement<B, C>(headBResult : Result<Stream<C>, B>) => headBResult.match(() => onOk.map(Ok.new), () => Streams.of(Err(err)));
}
export class def ResultStream<A, B>(stream : Stream<Result<A, B>>) => {
	public def map<R>(mapper : (Result<A, B>) => R) => stream.map(mapper);
	public def collect<C>(collector : Collector<Result<A, B>, C>) => stream.collect(collector);
	public def foldLeft<C>(current : C, folder : (C, Result<A, B>) => C) => stream.foldLeft(current, folder);
	public def head() => stream.head();
	public def foldLeftToResult<R, E>(initial : R, mapper : (R, Result<A, B>) => Result<R, E>) => stream.foldLeftToResult(initial, mapper);
	public def anyMatch(predicate : (Result<A, B>) => Bool) => stream.anyMatch(predicate);
	public def filter(filter : (Result<A, B>) => Bool) => stream.filter(filter);
	public def flatMap<R>(mapper : (Result<A, B>) => Head<R>) => stream.flatMap(mapper);
	public def extend<R>(mapper : (Result<A, B>) => R) => stream.extend(mapper);
	public def flatMapValue<C>(mapper : (A) => Stream<C>) => map(() => inner.mapValue(mapper)).flatMap(ResultStream.flatMapElement);
	implements Stream<Result<A, B>>;
}