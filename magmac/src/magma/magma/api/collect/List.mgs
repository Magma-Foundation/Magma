import magma.api.collect.stream.Stream;import magma.api.option.Option;/**
 * Interface representing a list collection with methods for adding elements,
 * streaming, and checking properties of the list.
 *
 * @param <T> the type of elements in the list
 */public struct List {/**
     * Adds an element to the list and returns the updated list.
     *
     * @param next the element to add
     * @return the updated list with the added element
     */add : (T) => List<T>;/**
     * Returns a stream of the elements in the list.
     *
     * @return a Stream of the list's elements
     */stream : () => Stream<T>;/**
     * Checks if the list contains the specified element.
     *
     * @param element the element to check for
     * @return true if the list contains the element, false otherwise
     */contains : (T) => boolean;/**
     * Checks if the list is empty.
     *
     * @return true if the list is empty, false otherwise
     */isEmpty : () => boolean;/**
     * Retrieves the last element in the list, if present.
     *
     * @return an Option containing the last element, or an empty Option if the list is empty
     */last : () => Option<T>;/**
     * Returns the number of elements in the list.
     *
     * @return the size of the list
     */size : () => int;}