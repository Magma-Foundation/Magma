
import java.util.Optional;
import java.util.function.Function;
export class def Err<T, E>(value : E) => {
	public def findValue() : Optional<T> => {
		return Optional.empty();
	}
	public def findErr() : Optional<E> => {
		return Optional.of(value);
	}
	public def flatMapValue<R>(mapper : (T) => Result<R, E>) : Result<R, E> => {
		return Err(value);
	}
	public def mapValue<R>(mapper : (T) => R) : Result<R, E> => {
		return Err(value);
	}
	public def isOk() : boolean => {
		return false;
	}
	public def mapErr<R>(mapper : (E) => R) : Result<T, R> => {
		return Err(mapper.apply(value));
	}
	public def match<R>(onOk : (T) => R, onErr : (E) => R) : R => {
		return onErr.apply(value);
	}
}
