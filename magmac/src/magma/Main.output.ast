block = {
	children : [
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "Error_"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "ClassSplitter"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "Generator"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaLang"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "JavaNormalizer"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaFormatter"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaGenerator"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "MagmaLang"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "lang", "PackageRemover"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Node"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["magma", "compile", "rule", "Rule"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["java", "io", "IOException"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["java", "nio", "file", "Files"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["java", "nio", "file", "Paths"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["java", "util", "Arrays"]
			}
		},
		import = {
			left-indent : "\n",
			external : namespace = {
				namespace : ["java", "util", "Collections"]
			}
		},
		function = {
			name : "Main",
			left-indent : "\n",
			modifiers : ["public"],
			definition : definition = {
				name : "Main",
				params : [

				],
				modifiers : ["export", "class", "def"]
			},
			child : block = {
				children : [
					function = {
						left-indent : "\n\t",
						definition : definition = {
							name : "main",
							modifiers : ["public", "def"],
							type : symbol = {
								value : "void"
							},
							params : [
								definition = {
									name : "args",
									type : array = {
										child : symbol = {
											value : "String"
										}
									}
								}
							]
						},
						child : block = {
							children : [
								try = {
									left-indent : "\n\t\t",
									child : block = {
										children : [
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "source",
													modifiers : ["let"]
												},
												value : invocation = {
													caller : access = {
														child : "get",
														parent : symbol = {
															value : "Paths"
														}
													},
													arguments : [
														string = {
															value : "."
														},
														string = {
															value : "magmac"
														},
														string = {
															value : "src"
														},
														string = {
															value : "magma"
														},
														string = {
															value : "Main.java"
														}
													]
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "input",
													modifiers : ["let"]
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "source"
														}
													],
													caller : access = {
														child : "readString",
														parent : symbol = {
															value : "Files"
														}
													}
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "target",
													modifiers : ["let"]
												},
												value : invocation = {
													arguments : [
														string = {
															value : "Main.mgs"
														}
													],
													caller : access = {
														child : "resolveSibling",
														parent : symbol = {
															value : "source"
														}
													}
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													modifiers : ["let"],
													name : "parseResult"
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "input"
														}
													],
													caller : access = {
														child : "toNode",
														parent : invocation = {
															arguments : [

															],
															caller : access = {
																child : "createRootRule",
																parent : symbol = {
																	value : "JavaLang"
																}
															}
														}
													}
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "parseError",
													modifiers : ["let"]
												},
												value : invocation = {
													arguments : [

													],
													caller : access = {
														child : "findError",
														parent : symbol = {
															value : "parseResult"
														}
													}
												}
											},
											invocation = {
												left-indent : "\n\t\t\t",
												caller : access = {
													child : "ifPresent",
													parent : symbol = {
														value : "parseError"
													}
												},
												arguments : [
													function = {
														param-name : "error",
														definition : definition = {
															modifiers : [],
															params : [
																definition = {
																	name : "error"
																}
															]
														},
														child : invocation = {
															caller : symbol = {
																value : "print"
															},
															arguments : [
																symbol = {
																	value : "error"
																},
																number = {
																	value : "0"
																}
															]
														}
													}
												]
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "root",
													modifiers : ["let"]
												},
												value : invocation = {
													arguments : [

													],
													caller : access = {
														child : "orElseThrow",
														parent : invocation = {
															arguments : [

															],
															caller : access = {
																child : "create",
																parent : symbol = {
																	value : "parseResult"
																}
															}
														}
													}
												}
											},
											invocation = {
												left-indent : "\n\t\t\t",
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													invocation = {
														arguments : [
															string = {
																value : "Main.input.ast"
															}
														],
														caller : access = {
															child : "resolveSibling",
															parent : symbol = {
																value : "source"
															}
														}
													},
													invocation = {
														arguments : [

														],
														caller : access = {
															child : "toString",
															parent : symbol = {
																value : "root"
															}
														}
													}
												]
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "generated",
													modifiers : ["let"]
												},
												value : invocation = {
													caller : symbol = {
														value : "generate"
													},
													arguments : [
														symbol = {
															value : "root"
														}
													]
												}
											},
											invocation = {
												left-indent : "\n\t\t\t",
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													invocation = {
														arguments : [
															string = {
																value : "Main.output.ast"
															}
														],
														caller : access = {
															child : "resolveSibling",
															parent : symbol = {
																value : "source"
															}
														}
													},
													invocation = {
														arguments : [

														],
														caller : access = {
															child : "toString",
															parent : symbol = {
																value : "generated"
															}
														}
													}
												]
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													name : "rule",
													modifiers : ["let"],
													type : symbol = {
														value : "Rule"
													}
												},
												value : invocation = {
													arguments : [

													],
													caller : access = {
														child : "createRootRule",
														parent : symbol = {
															value : "MagmaLang"
														}
													}
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													modifiers : ["let"],
													name : "generateResult"
												},
												value : invocation = {
													arguments : [
														symbol = {
															value : "generated"
														}
													],
													caller : access = {
														child : "fromNode",
														parent : symbol = {
															value : "rule"
														}
													}
												}
											},
											declaration = {
												modifiers : ["let"],
												left-indent : "\n\t\t\t",
												definition : definition = {
													modifiers : ["let"],
													name : "generateError"
												},
												value : invocation = {
													arguments : [

													],
													caller : access = {
														child : "findErr",
														parent : symbol = {
															value : "generateResult"
														}
													}
												}
											},
											invocation = {
												left-indent : "\n\t\t\t",
												caller : access = {
													child : "ifPresent",
													parent : symbol = {
														value : "generateError"
													}
												},
												arguments : [
													function = {
														param-name : "error",
														definition : definition = {
															modifiers : [],
															params : [
																definition = {
																	name : "error"
																}
															]
														},
														child : invocation = {
															caller : symbol = {
																value : "print"
															},
															arguments : [
																symbol = {
																	value : "error"
																},
																number = {
																	value : "0"
																}
															]
														}
													}
												]
											},
											invocation = {
												left-indent : "\n\t\t\t",
												caller : access = {
													child : "writeString",
													parent : symbol = {
														value : "Files"
													}
												},
												arguments : [
													symbol = {
														value : "target"
													},
													invocation = {
														arguments : [

														],
														caller : access = {
															child : "orElseThrow",
															parent : invocation = {
																arguments : [

																],
																caller : access = {
																	child : "findValue",
																	parent : symbol = {
																		value : "generateResult"
																	}
																}
															}
														}
													}
												]
											}
										]
									}
								},
								catch = {
									left-indent : "\n\t\t",
									condition : declaration = {
										name : "e",
										modifiers : ["let"],
										type : symbol = {
											value : "IOException"
										}
									},
									child : block = {
										children : [
											comment = {
												left-indent : "\n\t\t\t",
												value : "noinspection CallToPrintStackTrace"
											},
											invocation = {
												left-indent : "\n\t\t\t",
												arguments : [

												],
												caller : access = {
													child : "printStackTrace",
													parent : symbol = {
														value : "e"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					function = {
						left-indent : "\n\t",
						definition : definition = {
							name : "print",
							modifiers : ["def"],
							type : symbol = {
								value : "void"
							},
							params : [
								definition = {
									name : "e",
									type : symbol = {
										value : "Error_"
									}
								},
								definition = {
									name : "depth",
									type : symbol = {
										value : "int"
									}
								}
							]
						},
						child : block = {
							children : [
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										modifiers : ["let"],
										name : "actualContext"
									},
									value : invocation = {
										arguments : [
											string = {
												value : ""
											}
										],
										caller : access = {
											child : "orElse",
											parent : invocation = {
												arguments : [

												],
												caller : access = {
													child : "findContext",
													parent : symbol = {
														value : "e"
													}
												}
											}
										}
									}
								},
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										name : "index",
										modifiers : ["let"]
									},
									value : invocation = {
										arguments : [
											char = {
												value : "\n"
											}
										],
										caller : access = {
											child : "indexOf",
											parent : symbol = {
												value : "actualContext"
											}
										}
									}
								},
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										name : "context",
										modifiers : ["let"]
									},
									value : ternary = {
										true : symbol = {
											value : "actualContext"
										},
										condition : equals = {
											right : number = {
												value : "-1"
											},
											left : symbol = {
												value : "index"
											}
										},
										false : invocation = {
											caller : access = {
												child : "substring",
												parent : symbol = {
													value : "actualContext"
												}
											},
											arguments : [
												number = {
													value : "0"
												},
												symbol = {
													value : "index"
												}
											]
										}
									}
								},
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										name : "message",
										modifiers : ["let"]
									},
									value : invocation = {
										arguments : [

										],
										caller : access = {
											child : "findMessage",
											parent : symbol = {
												value : "e"
											}
										}
									}
								},
								invocation = {
									left-indent : "\n\t\t",
									caller : access = {
										child : "ifPresent",
										parent : symbol = {
											value : "message"
										}
									},
									arguments : [
										function = {
											param-name : "s",
											definition : definition = {
												modifiers : [],
												params : [
													definition = {
														name : "s"
													}
												]
											},
											child : invocation = {
												caller : access = {
													child : "println",
													parent : access = {
														child : "err",
														parent : symbol = {
															value : "System"
														}
													}
												},
												arguments : [
													add = {
														left : invocation = {
															arguments : [
																symbol = {
																	value : "depth"
																}
															],
															caller : access = {
																child : "repeat",
																parent : string = {
																	value : "\t"
																}
															}
														},
														right : add = {
															left : symbol = {
																value : "depth"
															},
															right : add = {
																left : string = {
																	value : " = "
																},
																right : add = {
																	left : symbol = {
																		value : "s"
																	},
																	right : add = {
																		left : string = {
																			value : " "
																		},
																		right : symbol = {
																			value : "context"
																		}
																	}
																}
															}
														}
													}
												]
											}
										}
									]
								},
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										name : "causes",
										modifiers : ["let"]
									},
									value : invocation = {
										arguments : [
											invocation = {
												arguments : [

												],
												caller : access = {
													child : "emptyList",
													parent : symbol = {
														value : "Collections"
													}
												}
											}
										],
										caller : access = {
											child : "orElse",
											parent : invocation = {
												arguments : [

												],
												caller : access = {
													child : "findCauses",
													parent : symbol = {
														value : "e"
													}
												}
											}
										}
									}
								},
								if = {
									left-indent : "\n\t\t",
									child : block = {
										children : [
											return = {
												left-indent : "\n\t\t\t"
											}
										]
									},
									condition : invocation = {
										arguments : [

										],
										caller : access = {
											child : "isEmpty",
											parent : symbol = {
												value : "causes"
											}
										}
									}
								},
								if = {
									left-indent : "\n\t\t",
									condition : greater-than = {
										right : number = {
											value : "1"
										},
										left : invocation = {
											arguments : [

											],
											caller : access = {
												child : "size",
												parent : symbol = {
													value : "causes"
												}
											}
										}
									},
									child : block = {
										children : [
											for = {
												name : "cause",
												left-indent : "\n\t\t\t",
												type : symbol = {
													value : "Error_"
												},
												collection : symbol = {
													value : "causes"
												},
												child : block = {
													children : [
														invocation = {
															left-indent : "\n\t\t\t\t",
															caller : symbol = {
																value : "print"
															},
															arguments : [
																symbol = {
																	value : "cause"
																},
																symbol = {
																	value : "depth"
																}
															]
														}
													]
												}
											}
										]
									}
								},
								else = {
									left-indent : "\n\t\t",
									child : block = {
										children : [
											invocation = {
												left-indent : "\n\t\t\t",
												caller : symbol = {
													value : "print"
												},
												arguments : [
													invocation = {
														arguments : [
															number = {
																value : "0"
															}
														],
														caller : access = {
															child : "get",
															parent : symbol = {
																value : "causes"
															}
														}
													},
													add = {
														right : number = {
															value : "1"
														},
														left : symbol = {
															value : "depth"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					function = {
						left-indent : "\n\t",
						definition : definition = {
							name : "generate",
							modifiers : ["def"],
							type : symbol = {
								value : "Node"
							},
							params : [
								definition = {
									name : "root",
									type : symbol = {
										value : "Node"
									}
								}
							]
						},
						child : block = {
							children : [
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									definition : definition = {
										name : "list",
										modifiers : ["let"]
									},
									value : invocation = {
										caller : access = {
											child : "asList",
											parent : symbol = {
												value : "Arrays"
											}
										},
										arguments : [
											invocation = {
												arguments : [

												],
												caller : symbol = {
													value : "PackageRemover"
												}
											},
											invocation = {
												arguments : [

												],
												caller : symbol = {
													value : "ClassSplitter"
												}
											},
											invocation = {
												arguments : [

												],
												caller : symbol = {
													value : "JavaNormalizer"
												}
											},
											invocation = {
												arguments : [

												],
												caller : symbol = {
													value : "MagmaGenerator"
												}
											},
											invocation = {
												arguments : [

												],
												caller : symbol = {
													value : "MagmaFormatter"
												}
											}
										]
									}
								},
								declaration = {
									modifiers : ["let"],
									left-indent : "\n\t\t",
									value : symbol = {
										value : "root"
									},
									definition : definition = {
										name : "acc",
										modifiers : ["let"],
										type : symbol = {
											value : "Node"
										}
									}
								},
								for = {
									name : "generator",
									left-indent : "\n\t\t",
									type : symbol = {
										value : "Generator"
									},
									collection : symbol = {
										value : "list"
									},
									child : block = {
										children : [
											assignment = {
												reference : "acc",
												left-indent : "\n\t\t\t",
												value : invocation = {
													caller : access = {
														child : "generate",
														parent : symbol = {
															value : "generator"
														}
													},
													arguments : [
														symbol = {
															value : "acc"
														},
														number = {
															value : "-1"
														}
													]
												}
											}
										]
									}
								},
								return = {
									left-indent : "\n\t\t",
									child : symbol = {
										value : "acc"
									}
								}
							]
						}
					}
				]
			}
		}
	]
}