let option : Option<&[u8]> = Some("test");
let result : Option<usize> = option.map(value => value.length);

becomes

class def Some<&[u8]> Some<&[u8]>(value : &[u8]) {
    implicit def Option() : Option<&[u8]> => Option {
            
    }
}

let option : Option<&[u8]> = Some<&[u8]>("test").Option();

let group : <keyof (R in Option<R>), (&[u8] => R) => Option<R>> = option.map;

let func : (&[u8] => usize) => Option<usize> = group<usize>;

let result : Option<usize> = func(value => value.length);